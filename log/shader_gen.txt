------------------------------------------
textures/common/sky_u2
------------------------------------------
textures/common/sky_500
------------------------------------------
textures/common/sky_100
------------------------------------------
textures/castle/sky_castle1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm8
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_ctf1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/hellskyteam
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/nightsky_xian_dm4
------------------------------------------
textures/skies/pj_arena2sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pj_arena4_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pjbasesky_arena1_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/newhell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/nightsky_nocloud
------------------------------------------
textures/skies/nightsky_nocloud_400
------------------------------------------
textures/skies/nightsky_nocloud_1000
------------------------------------------
textures/skies/nightsky_nocloud_200
------------------------------------------
textures/skies/hellskybright
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/nightsky_nocloud_100
------------------------------------------
textures/skies/nightsky_nocloud_600
------------------------------------------
textures/skies/xtoxicsky_90_60
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/nightsky_xian_dm3
------------------------------------------
textures/skies/nightsky_xian_dm2
------------------------------------------
textures/skies/nightsky_xian_dm1
------------------------------------------
textures/skies/xtoxicsky_dm9
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_dm3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/tim_dm14red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/tim_dm14
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/tim_hell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/stars_arena7
------------------------------------------
textures/skies/xblacksky_dm7
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xblacksky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicskytim_q3dm5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/pjwal2f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin1move
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/proto_skin2b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/snake
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin1_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin6_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/chapthroat2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/electric_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/border12b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/border11light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/proto_fence
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/dark_tin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin5_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/pewter_spec
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/panelbrn010w
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/yellow_rustc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/deeprust_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/skull_monitor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/dark_tin2_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/wires01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/wires02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/spidertrim3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/spidertrim4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/pewter_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/skybox
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/pj_launcher
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/invisi_light1
------------------------------------------
textures/base_light/tlight05
------------------------------------------
textures/base_light/ceil1_26
------------------------------------------
textures/base_light/wsupprt1_12
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr2_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr1_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr03_2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr03_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr02_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_500k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_30k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_20k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xnightsky_600
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/pjceil1_39_1p5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_34_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_34_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_33
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_31
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_30
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_35
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_22a_8k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_6
------------------------------------------
textures/base_light/ceil1_22a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/baslt4_1_4k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/wstlt1_5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/sm_light1blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/sm_light1red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/border11light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/patch10_pj_lite2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lt6_2p5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lt6_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light4_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light3b_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lt2_8000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/border11_250
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1_1500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1red_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/tim_dm3_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_70k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_50k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_20k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/border7_ceil50
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lightflare_500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lightflare_wht500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/s_proto_light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_light_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_lightred2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_lightred
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/dm18twr
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/geolight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/light3_8
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/light1_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/cross_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/q1metal7_97b_mirror
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/lightcone
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xian_rune21
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xian_rune11
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/bluegoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/borderlight_500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pj_ctf1sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/q1metal7_98d_pent_256
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/pentagramfloor_rotating
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/pentagramfloor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/blocks11b_jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/blocks15b_jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/jesus
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/teslacoil
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xq1metalbig_nojumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/firewall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/q1metal7_98d_flicker
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/iron01_e_flicker
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/lavahell2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xgoopy_pentagram
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/surface6jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xblocks11be
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sprites/foe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sprites/friend
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/blueflag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_redflag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_blueflag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_4c_fin_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/lavahell_goddamnbright
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_2b_fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/iron01_d_flicker
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/red_scary4_csansfacefin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/red_scary4_cfin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_tower_bluefin_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/red_scary4_d3fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_door/door02_eblue2_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_door/door02_bred2_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_arch_r_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_arch_b_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/killblockctf_r
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/test2_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/blue_telep
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/cross_1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/glowfloor1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/xlargeblockfloor5_pent_offset
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/xlargeblockfloor5_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_2_fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/xstepborder3_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/metalbridge06brokeb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/largerblock3b_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/q1metal7_98blueow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light5_5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lt2_4000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/xq1metalbig_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/electrohell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/gkcspinemove
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/gkc17d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/flicker_blocks10
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_28
------------------------------------------
textures/gothic_block/blocks17gwater
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/evil_e3window_dark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/evil_e3window
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light5_20k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks15_sandy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/wetwall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks17_sandy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/xblocks17i_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks15_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks18cgeomtrnx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks18cgeomtrn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks18cgeomtrn2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks15cgeomtrn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks17_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_door/skullarch_b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks18b_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks17g_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/organics/wire02a_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/x_support2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/z_support
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/fireblocks17floor3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/shinysupport2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/grate1_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/support1rust
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/support1shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/x_support4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/boxq3_4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/boxq3_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/boxq3_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/hastesign_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/plasmalogo_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_dm1a
------------------------------------------
textures/sfx/mkc_fog_dm1
------------------------------------------
textures/base_support/cable_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/mkc_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/wispy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/bwhtest/lightning
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/fire2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/densewaterfog
------------------------------------------
textures/test/lavatest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/water_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/lavacrustshader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/fogtestshader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/shader2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/metal2_2kc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1blue_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/web
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/openwindow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/flameshader
------------------------------------------
textures/dont_use/nightsky_kc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_q3ctf3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/foggentest_shader
------------------------------------------
textures/test/blocks10pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/hellodolly
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/kenelectric
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/boxq3_2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_button/shootme2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/sky_test
------------------------------------------
textures/base_floor/nomarkstone_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pjgrate1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/x_support
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_skullgrate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/kc_grate4b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_grate3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/diamond_noisy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/diamond_dirty
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/skylight_spec
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/skylight1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/tilefloor7_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floorshiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floorwet
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangfloor_noisy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/tile5_plain
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangdarkspot
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangspot2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangspot
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/powerupshit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pool_floor3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/spiderbite
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pool_floor2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/proto_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pool_side2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floor3blava
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/diamond2c_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangdark_ow3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floor_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/cybergrate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/cybergrate3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light2blue_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_rustygrate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/floor3_3dark_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pjgrate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/metalbridge04dbroke
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/q3dm0
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/techfloor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
al
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/hfloor3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/streetbricks10_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_door/door02_i_ornate5_fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/trianglelight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_ntech2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_ntech
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light5_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_ndark_circles
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/floor3_3dark
------------------------------------------
textures/gothic_wall/iron01_ndark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_n_circles
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_mthin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_mtech2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_m3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1red_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_m2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_m_circles
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_m
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_tourney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_l4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_l2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_l
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_f2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase02c_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase03c_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase02b_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase09e_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/test2_r_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase09d_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/tongue_bone
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/gothgrate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/runway
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_grate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/window_evil7
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/window_evil6a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/supportborderside_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalsupport4h_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalsupport4h_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/baseboard09_p_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/pitted_rust3_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/pitted_rust2_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/border6_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalsupport4j_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalsupport4b_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/foglightshader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/km_arena1tower4fx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/zinc_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light6_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pureblack
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_1l_fin_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bugmirror
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_ctfblue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_rustygrate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_tdm3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_bigflame
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_mkcdm4
------------------------------------------
textures/sfx/q1teleporter
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/shinysupport1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pitted_rust3arrowblocks
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pitted_rust3arrowbase
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pj_a1_fog1
------------------------------------------
textures/sfx/hellfogdense
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_1r_fin_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/q3dm9fog
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/q3tourney3fog
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/hellfog_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/diamondredpad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_q3dm10
------------------------------------------
textures/base_trim/tin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/proto_hellfog
------------------------------------------
textures/sfx/fog_timdm2
------------------------------------------
textures/sfx/fog_timdm1
------------------------------------------
textures/sfx/q1metal7_98d_pent_256
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/teslacoil3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/rustysupport
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/teslacoil
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xq1metalbig_jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_4bsmall_fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/pent_metalbridge06b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/firetest2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/space_holder
------------------------------------------
textures/sfx/firetestnolight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bluestripe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/blocks11b_jumppad_smaller
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/yellowstripe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/baslt3_1_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/surface6jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blackness
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xfiretest2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xfiretest1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/lt2_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xdensegreyfog
------------------------------------------
textures/dont_use/shader5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/redgoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_90k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/q1met_redpad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor_rotating2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/kcbasesky_arena1_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor_rotating
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/goopq1metal7_98dstripe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/q1metal7_98dstripe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pittedrust3stripes
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks11b_himom
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase03b_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/gimmickdiamondarrow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/8
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/7
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/6
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/x_noblight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/0
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/redpadblocks17
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad1q1metal7_99
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01_block17
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_xq1metalbig
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01b_metalbridge06c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01_metalbridge06b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/pent_metalbridge06
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_dirt
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/xborder12b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_largeblock3b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_largeblock3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky_150
------------------------------------------
textures/eerie/light1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_metalbridge04
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks11bjumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/patch10_beat4_drip
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal2_shiny_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal1b_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks11ct
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_door/shinymetaldoor_outside
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/lighammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_door/shinymetaldoor_outside3b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_door/shinymetaldoor_outside3a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2ftv
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/medkit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2fline
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fishy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconr_yellow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_intel
------------------------------------------
textures/base_wall/bluemetalsupport2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/grill
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/menuinfo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/concrete4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_quad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_rocket
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/goopq1metal7_98dnodamage
------------------------------------------
raildisc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode117
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/slash/yuriko
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/gauntlet/gauntlet2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/moon/light15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/omm
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/tankjr/tankjr
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_ya
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_rl
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor_red3test
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_40000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/shinygrate1_4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/plasma/plasma_glo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/medal_impressive
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/bones/red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_50k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_30000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
scoreboardscore
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/tim_km2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/bitch/orb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/plasma/plasma_glass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/light1_6kgothicred
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1dark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
menuback
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_30000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/hellsky2goo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_20000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_4000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_flare
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/marsbase/glass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_10000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/shinymetal2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_4000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_plasma
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/support2rust
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grapple/grapple
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/border12b_pj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/clear_calm1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/atechengine_ax
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/concretefloor1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/parkr/parkr_chest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/q1metal7_97redow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/river
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_grate4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_3k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/metalbase09_bluekillblock_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_4k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_3k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/gkcspine
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_8k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/quad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks17bloody
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_lrg_500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pjgrate1kc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/timportal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/border7_ceil22a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/light1dark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky1
------------------------------------------
models/mapobjects/scoreboard/s_name
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/bfg/f_bfg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2d_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/killblock_b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_4000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/ironcrosslt1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/xfiretest2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/light1blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/q3dm14fog
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/xaero/xaero_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1blue_800
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/chain/chain
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_6k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/clangdark_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/hellredclouds
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/crackle1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/skin7_teeth2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_ctfred
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
bfgexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell_1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_flare2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_ctfblue2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/girders1i_yellofin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
grenadeexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/menuinfo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/lavafogshader
------------------------------------------
rocketexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/transwater
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/eight_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan3bladeb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_40000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/baph/bapholamp_fx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/seven_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/six_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/dooreye3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/quad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/x_support3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xgoopjumpypad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/three_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/stained15d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflame1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/hand
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/hellsky2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/health
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/caulk
------------------------------------------
viewbloodblend
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/armor1h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floor_ow3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/flight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/assault1d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/ironcrosslt1_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xlightgreyfog
------------------------------------------
gfx/2d/crosshairk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairh
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/baslt4_1_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/klesk/klesk_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairf
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/water/waterfall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode11
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/nightsky_xian_dm15
------------------------------------------
textures/dont_use/sign_test_glow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshaire
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_37
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshaird
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/railgun/railgun2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/zap_scroll
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/swirl_r1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
scoreboardping
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/nightsky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_decal_spawn1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/zap_scroll1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/border7_ceil39b_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/glowfloor2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/ripplewater2a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/border11light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/shinybluemetal1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/drag_glass1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a >= 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/damage/burn_med_mrk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xian_light3_7
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/weeds/weed01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/glass_frame
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/energypad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/energy_red1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
lightningexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/xaero/xaero
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/hellfog_tim_dm14
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/button
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pj_dm10sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/rocketl/f_rocketl
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/damage/bullet_mrk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/chapthroatooz
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/killblockgeomtrn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal1c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/reflt3_10
------------------------------------------
icons/iconw_plasma
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
smokepuffragepro
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/ripplewater2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/mirror1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/misc/tracer
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2clight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconf_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/patch11_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/steed1gf
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase03d_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_rg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/q3tourneyscreen
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/mkc_fog_dm4
------------------------------------------
textures/hell/metal2_2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_sg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/clear_ripple2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_lrg_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/portal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/b_flag2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangdark_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/pool
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/skip
------------------------------------------
textures/common/cushion
------------------------------------------
textures/shrine/ceil1_6
------------------------------------------
icons/envirosuit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/glass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_dusty
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/rocketl/rocketl14
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/hellfog
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_10000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/missileclip
------------------------------------------
textures/sfx/swirl_b1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/wallhead/wallhead
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/9
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/clip
------------------------------------------
textures/dont_use/nightsky_kcold
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconh_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/computer_blocks17
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/areaportal
------------------------------------------
textures/base_light/btactmach0
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weaphits/bfg02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/shader4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2eye
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/healthfloor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xredfog
------------------------------------------
textures/sfx/portal_sfx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky_space
------------------------------------------
textures/base_light/xceil1_39_b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/b_flag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/lava2z
------------------------------------------
textures/common/nightsky2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pj_dm9sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/nolightmap
------------------------------------------
textures/base_floor/techfloor2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/haste
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_110k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/tilefloor5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/mirror2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/km_arena1tower4_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_30000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/protobanner_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/ceil1_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sprites/plasma1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/beam
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/redgoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/bluegoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/spiderbit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/wsupprt1_12h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/tesla_cable
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/cybergrate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairi
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/blackness
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/baph/wrist
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode19
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_railgun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/red_flagbase
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/comp3b_dark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconr_shard
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase09b_iron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/symbol_redlt1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/redmetalsupport2fline
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm9
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/ceil1_8
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/blue_flagbase
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/column2c_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflame2_2250
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/flatlavahell_1500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_grapple
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode17
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/reflt3_9
------------------------------------------
gfx/2d/numbers/minus_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/bloodwater
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/xctf_painwater
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/killblock_c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/one_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
lightningboltnewnpm
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/xfiretest1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/bata3dm1/bata3dm1_floor6
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_20000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_4k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/battlesuit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/proto_skin2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/razor/h_id
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/bones/blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bloodstain
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/chrome_rivet
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bounce_concrete
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/rconcrete_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/train1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/bitch/forearm
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_lrg_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
lagometer
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/timborder11c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/ceil1_4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/slimeshader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/grenammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/shard2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/calm_pool
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_capture
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_grenade
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/tallblue_5esmallb_fin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/origin
------------------------------------------
textures/sfx/metalbridge06_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/light1red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
lightningboltnew
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
disconnected
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2c_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/noimpact
------------------------------------------
wake
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
rgbgen
------------------------------------------
gfx/2d/numbers/nine_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconr_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshair
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------

------------------------------------------
textures/test/electricity3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
ripplewater2_back
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/hellsky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/bloodwater_pj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/bitch/hologirl
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/hellsky2bright
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell_750
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconf_blu
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/shi
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/ps_bloodwater1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/pentagram_light1_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/flatripplewater_1500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode122
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode123
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metlsupport4i_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/donotenter
------------------------------------------
models/mapobjects/lamps/bot_wing2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/railgun/railgun3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/panel_glo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/five_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/bwhtest/crackedearth
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/border11light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/clear_ripple3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/tongue_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/skel/skel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_water2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_gauntlet
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/comp_panel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/hunter/harpy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/pjceil1_39_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clangdark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/hellbutt01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/slick
------------------------------------------
textures/skies/nightsky_nocloud_500
------------------------------------------
gfx/2d/numbers/four_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/largerblock3b3x128_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/core1_1
------------------------------------------
textures/gothic_light/border7_ceil30
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/quadweapon
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/hunter/red_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahellflat_400
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentfloor_diamond2c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_10000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/blacksky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/wires01_ass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal2_noisy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/plasammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/electricwall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_impressive
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/wallhead/wallhead_eye
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_timctf1
------------------------------------------
textures/base/q1met_redpad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/proto_spec
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/skull/monkeyhead
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/ball1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/trail1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/marsbase/teleprtr_fx1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_pg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xlargeblockfloor3_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/slime1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/proto_poolpass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/metalfloor_wall_15ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/jets/jet_as
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/metaltechgeomtrn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/metalbase03a_brick
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xian_dm3padwall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/clear_ripple1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/anarki/anarki_b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/jello
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/glass_stained1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
teleporteffect
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky_300
------------------------------------------
models/powerups/instant/regen
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/slime2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/trail2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/metal3_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/green_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
scoreboardname
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/pj_wstlt1_3k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/rusty_pentagrate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltechfloor01final_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/shinygrate1_4_glow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/shotammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/concrete_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/slime1_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_4k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_assist
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/rlight1_2
------------------------------------------
models/powerups/ammo/railammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode12
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/goth_lt2_lrg2k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metalfloor_wall_5_glow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/largerblock3_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahelldark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/hint
------------------------------------------
models/powerups/ammo/lighammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode13
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/atech1_alpha
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairc
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/grenadel/grenadelx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/animationtest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/steed1gd
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/orbb_h2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/grill2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode110
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/tim/rmetaltechgeomtrn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/bones/stiff
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode111
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/rockammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sprites/plasma2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks18ccomputer_offset
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/darkness
------------------------------------------
textures/liquids/calm_poollight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode112
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode115
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode15
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode116
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/calm_pool2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/console03
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_500000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode118
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_20000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
bloodmark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_defend
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltred_20000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/kmlamp_white
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/glowfloor3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_door/shinymetaldoor_outside3a2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/protolava
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal1b_chrome
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/razor/patriot_gogs
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
markshadow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/medkit_base
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/cross/cross_skull
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
flareshader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/energy_grn1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrossltblue_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/proto_pool3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/damage/hole_lg_mrk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/teleport_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/flag/banner_strgg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode120
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/bluepad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/region
------------------------------------------
textures/common/invisible
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/metalfloor_wall_14_specular
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
lightningbolt
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
menubackragepro
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/panel_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/flag/banner02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/clear_ripple1_q3dm1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/moon/light2013
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light5_10k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/steedmetal2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/crosshairj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/weapclip
------------------------------------------
textures/skies/mkc_ctf5sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
levelshotdetail
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/under
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_34_5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/battleweapon
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/protobanner
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/killtrim_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_lg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell_2500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2e
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_machinegun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/grenammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode14
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_railgun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xbluefog
------------------------------------------
textures/sfx/goopq1metal7_98d_pent_256
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/trigger
------------------------------------------
textures/base_wall/bluemetal2_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/zero_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
white
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/horned/horned
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/chain/chain2_end
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/slamp/slamp3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/machammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/nodrawnonsolid
------------------------------------------
textures/gothic_light/ironcrossltred_30000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/teleporter
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/watertest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/railammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/cornerlight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavahell_xdm1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/border11light_300
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/invis
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/xoct20c_shiney
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/nodraw
------------------------------------------
models/mapobjects/lightning/red/red01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode113
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xgoopjumpypad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/rusty_baphograte
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/regen
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/light2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/iron01_g_flicker
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode114
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_ra
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/gauntlet/gauntlet3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_green_pj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
medal_excellent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/center2trn
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bluegoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grapple/grapple_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/pj_ctf2_sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
menubacknologo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_n
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_gauntlet
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/teleporter/energy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_39
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/patch10_beatup4_shiny2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_2000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/teslacoiltrans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_shotgun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/pj_metal14_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/chrome_metal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_bfg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_34_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_bulb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/demon_block15fx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sprites/balloon3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/teleport_fluid
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetal1light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/cursor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
bloodexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/ranger/wrack
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/vector
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/bfgammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskytim_dm7
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/waterfall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_rocket
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/proto_skin
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/launchpad_diamond
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/uriel_w
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
bulletexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
hastesmokepuff
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/hunter/harpy_f
------------------------------------------
icons/icona_shotgun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/portal2_sfx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/invis
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/km_arena1towerblue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_lightning
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconh_green
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/xq1metalbig_jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/flagtest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/chain/chain3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicsky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/bfgammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_dm4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconh_yellow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_90k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/symbol_bluelt1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/orbb_light_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/ammo/grenade
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/invisibility
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/lightmap
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/blank
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/standlamp2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconh_mega
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/quit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/organics/wire02_f2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/main_q3abanner
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflame1side
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_30k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/major/daemia
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_gl
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/scrolllight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
railcore
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/centercon
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
projectionshadow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
waterbubble
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/shrine/reflt3_5
------------------------------------------
smokepuff
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/brandon/braneye
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
shotgunsmokepuff
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
sun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/largerblock3blood
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/brandon/branhat
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/shinybluemetal1b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/signs/bioh
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/flight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/electricwall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/blupaintedmetalcomp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_button/timbutton
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/comp3c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/flicker_light15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/pipe/pipe02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/comp3b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_pjdm1
------------------------------------------
textures/sfx/computerblocks15
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/comp3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/basewall01bit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_30_8k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/rockammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/basewall01_ow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/techborder
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/blumtlspt2b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/mkc_dm4sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/future9light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/green_contrim_noisey
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/slash/grrl_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/spine
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/rotate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/xaero/xaero_q
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/dooreye
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/console
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/orbb_light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/darkness
------------------------------------------
models/mapobjects/console/sphere2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/testconstantfog
------------------------------------------
models/mapobjects/console/jacobs
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/scrolltext
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/red_telep
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/podium/podium
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/slash/yurikoskate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/constfog
------------------------------------------
models/players/slash/yuriko_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/hunter/harpy_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky_30
------------------------------------------
textures/base_wall/protobanner_still
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/pipe/pipe02x
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode119
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/jets/jet_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/nibbles
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/crash/crash_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/crash/crash_t
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/bigchars
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/proto_slime
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/pj_light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01bgoopy7_98d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/razor/id
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/sarge/cigar
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/cross/cross
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/diamond2cspot
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/redstripe
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/baph/baphomet
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weaphits/electric
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/banner/q3banner04
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/parkr/parkr_head
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/xpipecolumn_gray_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01block18b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/banner/q3banner02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_decal_logo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/bones/xray
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/skel/xray
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/redflag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt2_3000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/spotlamp/spotlamp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/blue_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/surface8_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/spotlamp/beam
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/spotlamp/spotlamp_l
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/shader3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/grunt/stripe_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/calm_pool_bgtess
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/skull/monkeyhead2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/green
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/timlamp/timlamp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grenadel/f_grenadel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/wallhead/lion_m
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/biker/cadaver
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/xaero/xaero_a
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/slash/slashskate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/uriel_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin6move
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/mkc_evil_e3window
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/lucy/h_angel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/hell/lavasolid
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/klesk/flisk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/klesk/flisk_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/patch10_pj_lite2_1000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weaphits/bfg01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grapple/grapple_j
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/launchpad_metalbridge04d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xmetalfloor_wall_9b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/sarge/null
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/null
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/goopq1metal7_98darrow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/podium/podskull
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/wallhead/femhead
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflame2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/q1metal7_99spot
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/train1kc_shader
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/podium/podiumfx1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/force/clwhite
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/podium/podiumfx2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/podium/podiumfx3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/intestine
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode18
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/visor/gorre
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/newred
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/doom/phobos
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/bat/bat
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/meteor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/patch10shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/torso
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode121
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/enviro
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/toxicskydim
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/chain
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/orbb_tail
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/intestine2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/lucy/angel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/xripplewater2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_lamp2b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil_white5k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_light
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/pentagramfloor_q1metal7_99
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_ctf
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_lamp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_lamp2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/bot_wing
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
explode16
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/console/sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/gratelamp/gratetorch
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/killsky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/pewter_nonsolid
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/sarge/roderic
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/gratelamp/gratetorch2b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/doom/phobos_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/flagbits
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/shotammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/steedmetallight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/gothgrate3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
plasmaexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan_grate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/r_flag2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/proto_comp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 5 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_object/quadsign_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/flag_red
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/bitch/bitch02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/plasammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/jaildr01_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/barrel/barrel2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/pitted_rust_ps
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/flares/electric
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/light1_6kgothic
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/anarki/anarki_g
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/mynx/mynx_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/scoreboard/s_score
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_mh
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/trail
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/slamp/slamp2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/ctf_tower_redfin_shiny
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
railexplosion
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/skull
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/border11c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xnightsky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/lavacrust
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lightning/white/white1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lightning/blu/blu01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/gratelamp/gratelamp
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/pjrock18
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/hellfog_mini_dm10
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/gratelamp/gratelamp_flare
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/uberiron
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grenadel/ring
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/spawnpad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/powerupshit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/chain/chain2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/orbb_tail_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/orbb/red_h
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_7k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flametest
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/teleporter/transparency2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/kc_dm10sky
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/r_flag
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/flags/pole
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/ctf/killblockctf_b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metalbridge06c_big_pentagram
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_34
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/haste
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/red_w
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/blue_w
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_grenade
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/newyellow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/teleporter/widget
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
bloodtrail
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/shotgun/f_shotgun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metalfloor_wall_15b_glow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_machinegun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflamebright
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_30_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/teleporter/teleporter_edge
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/jesus/jesuswall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/crash/crash
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_waterlight2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/skull/ribcage
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_floor/pent_metalbridge02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/weeds/weed02
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/corpse/corpse
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame1side
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/hellredclouds
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/nodrop
------------------------------------------
models/mapobjects/portal_2/portal_3_edge
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/teleporter
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/colua0/colua0_lght
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/colua0/colua0_flare
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_trim/barbedwire
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamps/flare03
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/steam_01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/blupaintedmetal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/bfgammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/doom/f_doom
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/grenammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/sky_1000
------------------------------------------
models/powerups/ammo/machammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/plasammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_grate5
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light2_lrg_200
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/shotgun/shotgun_laser
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/rockammo2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/proto_gruel
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_red_pj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_trim/dark_tin2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/shotammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/yellow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/common/clusterportal
------------------------------------------
models/powerups/health/yellow_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/mega2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/razor/patriot
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/mega1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/red_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/health/blue_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/evil_e3bwindow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/dooreye2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/computerpurptileb
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/lavahell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/marsbase/grate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/iconw_lightning
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/armor/energy_yel1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/ammo/rocket/rockflar
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/green_con04
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamplight_ys
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fanfx
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltech12final_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2c_1vent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lamplight_y
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light5_15k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xmetalfloor_wall_14b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xblackfog
------------------------------------------
models/mapobjects/arenalogo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/railammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/machinegun/f_machinegun
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/railgun/f_railgun2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/crosslt1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/railgun/railgun4
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/watertile
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluecover
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/bfg/bfg_e
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/bfg/bfg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/soylent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_10000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/bfg/bfg_k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/lighammo1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/f_lightning
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/ammo/rocket/rockfls1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1blue_1500
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/teleporter/transparency
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/ammo/rocket/rockfls2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/teslacoil2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/plasma/f_plasma
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/teeth
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/flamethrower/f_flamethrower
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skies/xtoxicsky_dm14
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/firewall
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/border7_ceil39_6k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/grapple/f_grapple
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/doom/doom_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fog_timdm8
------------------------------------------
console
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/xian/xianfacf
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/weapons2/lightning/ball
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_120000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/lightning/yel/yel01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/scan
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_22a_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/instant/quad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
powerups/regen
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/hunter/hunter_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/medkit_sphere
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/lavabeam
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/medkit_fluid
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/holdable/teleport_base
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/bluemetalsupport2e2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/ironcrosslt1_4000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks17g_jumpad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/largerblock3b3_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base/bluemet1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bullseye
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/dust_puppy2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/spawn_floord2c
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xgoopy_pentagram
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/spawn_floor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan3blade
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/patch10_pj_lite
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_38_40k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/sarge/krusade
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/proto_zzztblu3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/bouncepad01_xarch
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/rain
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/largerblock3b3x128_pentred
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/demonltblackfinal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/hellfog_pj_dm10
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metalfloor_wall_14b_glow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_support/metal1_5
------------------------------------------
textures/common/full_clip
------------------------------------------
textures/sfx/xfinalfoginvert
------------------------------------------
textures/sfx/xbluefogx128
------------------------------------------
textures/sfx/beam
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/damage/plasma_mrk
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_dusty2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_waterlight1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/light1blue_5000
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/beam_water
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/console01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/glass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
scoreboardtime
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/fan_grate2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/dont_use/shader5old
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltech12darkfinal_blueglow
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/killblock_i4b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/gothgrate1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/eerie/redgoal
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/kc_hellfog_1k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/glass01
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/donna
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/tree/branch
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xmetalfloor_wall_5b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/proto_lightgreen
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/x_conduit
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 4 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/zap_ball
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/jacobs_x
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltechfloor02final_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/skin4_side
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_block/blocks18d_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltech12darkfinal_bounce
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/liquids/mercury
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/light1_4kgothic
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/c_met5_2_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/skin/spikemove
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/patch10shiny_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metalfloor_glass
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/select
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
icons/icona_bfg
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/powerups/ammo/machammo
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xclang_floor2_bouncy
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/portal_2/portal_3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/clang_floorshiny2
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/portal_sfx_ring
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/pool_side3
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/small_smoke1_1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xflame2_1800
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_wall/kcgrate1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/grid
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_door/shinymetaldoor
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/launchpad_blocks18d
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/organics/dirt_trans
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_light/gothic_light3_20k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/launchpad_blocks17
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame1km
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks11b_jumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_dimmer
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/ceil1_32
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_blue
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame1_hell
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
gfx/2d/numbers/two_32b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_blue_pj
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_blue_nolight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/xfinalfog
------------------------------------------
textures/sfx/smallerblock3b3dim_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/metaltechfloor02final_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/test/rnd_ledm1
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_floor/proto_grate
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flameanim_red_nolight
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/uriel/zael
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/flame1dark
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/base_light/xceil1_39_70k
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/gothic_wall/iron01_f
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/goopq1metal7_98dhuge_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/mapobjects/baph/baphomet_gold
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks17final_pent
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/computerblocks11b
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/blocks18ccomputer
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
models/players/razor/razor_gogs
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
attribute vec3 normal;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

------------------------------------------
textures/sfx/diamond2cjumppad
[ 0 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 100
attribute vec3 position;
attribute vec4 color;
attribute vec2 tex0;
uniform mat4 modelToView;
uniform mat4 viewToClip;
varying vec4 frag_Color;
varying vec2 frag_Tex;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 100
precision highp float;
varying vec4 frag_Color;
varying vec2 frag_Tex;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
const float gamma = 1.0 / 2.2;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture2D( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	gl_FragColor = color;
} 

 ]

