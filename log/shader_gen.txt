[ 0 ] [ 

 Main Fragment 

const float gamma = 1.0 / 2.2;
in vec4 frag_Color;
in vec2 frag_Tex;
in vec2 frag_Lightmap;
uniform sampler2D mainImageSampler;
uniform vec2 mainImageImageScaleRatio;
uniform vec4 mainImageImageTransform;
uniform sampler2D lightmapSampler;
uniform vec2 lightmapImageScaleRatio;
uniform vec4 lightmapImageTransform;
out vec4 fragment;
void main(void) {
	vec2 texCoords;
	vec4 image, lightmap, color;
	texCoords = mod( frag_Tex, vec2( 0.99 ) ) * mainImageImageScaleRatio * mainImageImageTransform.zw + mainImageImageTransform.xy;
	image = texture( mainImageSampler, texCoords );
	texCoords = mod( frag_Lightmap, vec2( 0.99 ) ) * lightmapImageScaleRatio * lightmapImageTransform.zw + lightmapImageTransform.xy;
	lightmap = texture( lightmapSampler, texCoords );
	color = frag_Color * image * lightmap;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
fragment = color;
} 

 ][ 0 ] [ 

 Main Vertex 

in vec3 position;
in vec2 tex0;
in vec2 lightmap;
in vec4 color;
out vec4 frag_Color;
out vec2 frag_Tex;
out vec2 frag_Lightmap;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Color = color;
	frag_Lightmap = lightmap;
	frag_Tex = tex0;
} 

 ]------------------------------------------
textures/skies/xtoxicsky_tourney
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/base_trim/pewter_shiney
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
in vec3 normal;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = 2.0 * normal * dot( dirToEye, normal ) - dirToEye;
	vec2 displace = R.yz * 0.5;
	vec2 st = vec2( 0.5 ) + vec2( displace.x, -displace.y );
	frag_Tex = st;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 2 ] [ 

 Vertex 

in vec3 position;
in vec2 lightmap;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
} 

 ][ 2 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/base_light/ceil1_37
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 lightmap;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 2 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 2 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/base_light/ceil1_38_10k
------------------------------------------
textures/base_light/xceil1_39_20k
------------------------------------------
textures/gothic_block/evil_e3bwindow
------------------------------------------
textures/base_floor/pjgrate2
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 lightmap;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/gothic_trim/supportborderside_shiney
[ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/common/weapclip
------------------------------------------
models/mapobjects/teleporter/widget
[ 1 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 1 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/common/trigger
------------------------------------------
textures/common/nodrop
------------------------------------------
models/mapobjects/flag/banner_strgg
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
in vec4 color;
out vec4 frag_Color;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
in vec4 frag_Color;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/common/clip
------------------------------------------
textures/common/hint
------------------------------------------
textures/liquids/flatlavahell_1500
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform float tcModTurb;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st *= tcModTurb;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/base_wall/atech1_alpha
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ][ 2 ] [ 

 Vertex 

in vec3 position;
in vec2 lightmap;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
} 

 ][ 2 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/common/nodraw
------------------------------------------
textures/common/nodrawnonsolid
------------------------------------------
models/mapobjects/chain/chain
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
in vec4 color;
out vec4 frag_Color;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
in vec4 frag_Color;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
models/mapobjects/teleporter/transparency
------------------------------------------
textures/common/caulk
------------------------------------------
models/mapobjects/teleporter/energy
------------------------------------------
textures/sfx/kc_hellfog_1k
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform vec4 tcModScroll;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st += tcModScroll.xy * tcModScroll.zw;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/base_support/cable_trans
------------------------------------------
models/mapobjects/teleporter/teleporter_edge
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
in vec4 color;
out vec4 frag_Color;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
in vec4 frag_Color;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/sfx/beam_dusty2
------------------------------------------
textures/sfx/x_conduit
[ 3 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 3 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/sfx/metalbridge06_bounce
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]------------------------------------------
textures/sfx/flame1side
------------------------------------------
textures/base_light/ceil1_38_30k
------------------------------------------
textures/gothic_trim/x_noblight
[ 0 ] [ 

 Vertex 

in vec3 position;
in vec2 tex0;
out vec2 frag_Tex;
uniform mat4 modelToView;
uniform mat4 viewToClip;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
} 

 ][ 0 ] [ 

 Fragment 

const float gamma = 1.0 / 2.2;
in vec2 frag_Tex;
out vec4 fragment;
uniform mat2 tcModScale;
uniform vec4 tcModScroll;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
void main(void) {
	vec2 st = frag_Tex;
	st += tcModScroll.xy * tcModScroll.zw;
	st = tcModScale * st;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st );
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]---------------------------

PROGRAM COUNT: 22

-----------------------------