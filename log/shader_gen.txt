------------------------------------------
textures/aedm7/aecell_decal_logo1
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_decal_spawn1
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_gl
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_lg
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_mh
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_pg
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_quad
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_ra
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_rg
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_rl
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_sg
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/aedm7/aecell_pads_ya
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/bata3dm1/bata3dm1_floor6
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 lightmap;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2DArray sampler0;
uniform vec3 bias;
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	vec4 color = texture( sampler0, vec3( st * bias.xy, bias.z ) ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/force/clwhite
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/marsbase/glass
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
layout( location = 3 ) in vec3 normal;
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	vec3 dirToEye = normalize( vec3( -modelToView[ 3 ] ) - position );
	vec3 R = normalize( 2.0 * normal * dot( dirToEye, normal ) - dirToEye );
	vec2 displace = ( R.xz ) * 0.5;
	vec2 st = vec2( 0.5 );
	st.s -= displace.x;
	st.t += displace.y;
frag_Tex = st;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/marsbase/grate
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
#extension GL_ARB_conservative_depth: enable
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
layout( depth_unchanged ) float gl_FragDepth;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	if ( color.a < 0.5 )
	{
		discard;
	}
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 lightmap;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2DArray sampler0;
uniform vec3 bias;
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	vec4 color = texture( sampler0, vec3( st * bias.xy, bias.z ) ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/marsbase/teleprtr_fx1
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec2 texCenter;
uniform mat2 texRotate;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st += texRotate * ( frag_Tex - texCenter );
	st = clamp( applyTransform( st ), imageTransform.xy, applyTransform( vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 3 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 lightmap;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2DArray sampler0;
uniform vec3 bias;
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	vec4 color = texture( sampler0, vec3( st * bias.xy, bias.z ) ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/moon/light15k
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 lightmap;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2DArray sampler0;
uniform vec3 bias;
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	vec4 color = texture( sampler0, vec3( st * bias.xy, bias.z ) ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/moon/light2013
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 lightmap;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = lightmap;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2DArray sampler0;
uniform vec3 bias;
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	vec4 color = texture( sampler0, vec3( st * bias.xy, bias.z ) ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 1 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = vec4( 1.0 );
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

[ 2 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

------------------------------------------
textures/water/waterfall
[ 0 ] [

 Vertex 

#version 450
layout( location = 0 ) in vec3 position;
layout( location = 1 ) in vec4 color;
layout( location = 2 ) in vec2 tex0;
layout( std140 ) uniform Transforms {
	mat4 viewToClip;
	mat4 modelToView;
};
out vec2 frag_Tex;
out vec4 frag_Color;
void main(void) {
	gl_Position = viewToClip * modelToView * vec4( position, 1.0 );
	frag_Tex = tex0;
	frag_Color = color;
} 

 Fragment 

#version 450
in vec2 frag_Tex;
in vec4 frag_Color;
const float gamma = 1.0 / 3.0;
uniform vec4 tcModScroll;
uniform float tcModTurb;
uniform mat2 tcModScale;
uniform sampler2D sampler0;
uniform vec4 imageTransform;
uniform vec2 imageScaleRatio;
vec2 applyTransform(in vec2 coords) {
	return coords * imageTransform.zw * imageScaleRatio + imageTransform.xy;
}
out vec4 fragment;
void main(void) {
	vec2 st = frag_Tex;
	st = tcModScale * st;
	st *= tcModTurb;
	st += tcModScroll.xy * tcModScroll.zw;
	st = mod( st, 1.0 );
	st = applyTransform( mod( st, vec2( 0.99 ) ) );
	vec4 color = texture( sampler0, st ) * frag_Color;
	color.r = pow( color.r, gamma );
	color.g = pow( color.g, gamma );
	color.b = pow( color.b, gamma );
	fragment = color;
} 

 ]

