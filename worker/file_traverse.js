// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


/*
Module['stringObj'] = function stringObj(name, data) {
	var seen = [];
    return '========\nSTRINGIFY DUMP for \"' + name + '\": '
        + JSON.stringify(data, function(key, val) {
            if (seen.indexOf(val) >= 0) {
                return;
            } else {
                seen.push(val);
                return val;
            }
        }, '\t') + '\n=======\n';
}

Module['printObj'] = function printObj(name, data) {
    Module.print(Module.stringObj(name, data));
}
*/

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');

    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret;  return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }
  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
      return func;
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk


function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}

function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 33554432;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
if (HEAPU8[0] !== 255 || HEAPU8[3] !== 0) throw 'Typed arrays 2 must be run on a little-endian system';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;




// === Body ===

var ASM_CONSTS = [function($0, $1, $2, $3, $4) { { self.fetchBundleAsync($0, $1, $2, $3, $4); } },
 function($0, $1, $2) { { try { return self.walkFileDirectory($0, $1, $2); } catch (e) { console.log(e.message); return 0; } } }];

function _emscripten_asm_const_iiii(code, a0, a1, a2) {
 return ASM_CONSTS[code](a0, a1, a2);
}

function _emscripten_asm_const_iiiiii(code, a0, a1, a2, a3, a4) {
 return ASM_CONSTS[code](a0, a1, a2, a3, a4);
}



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 9504;
  /* global initializers */  __ATINIT__.push({ func: function() { __GLOBAL__sub_I_file_traverse_cxx() } });
  

/* memory initializer */ allocate([160,4,0,0,251,27,0,0,200,4,0,0,217,27,0,0,48,0,0,0,0,0,0,0,200,4,0,0,134,27,0,0,16,0,0,0,0,0,0,0,200,4,0,0,171,27,0,0,64,0,0,0,0,0,0,0,160,4,0,0,204,27,0,0,200,4,0,0,243,28,0,0,8,0,0,0,0,0,0,0,200,4,0,0,15,29,0,0,8,0,0,0,0,0,0,0,200,4,0,0,31,29,0,0,88,0,0,0,0,0,0,0,200,4,0,0,48,29,0,0,88,0,0,0,0,0,0,0,200,4,0,0,101,29,0,0,48,0,0,0,0,0,0,0,200,4,0,0,65,29,0,0,136,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,0,0,0,0,255,255,255,255,253,255,255,255,249,255,255,255,241,255,255,255,225,255,255,255,193,255,255,255,129,255,255,255,1,255,255,255,1,254,255,255,1,252,255,255,1,248,255,255,1,240,255,255,1,224,255,255,1,192,255,255,1,128,255,255,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,13,0,0,0,15,0,0,0,17,0,0,0,19,0,0,0,23,0,0,0,27,0,0,0,31,0,0,0,35,0,0,0,43,0,0,0,51,0,0,0,59,0,0,0,67,0,0,0,83,0,0,0,99,0,0,0,115,0,0,0,131,0,0,0,163,0,0,0,195,0,0,0,227,0,0,0,2,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,7,0,0,0,9,0,0,0,13,0,0,0,17,0,0,0,25,0,0,0,33,0,0,0,49,0,0,0,65,0,0,0,97,0,0,0,129,0,0,0,193,0,0,0,1,1,0,0,129,1,0,0,1,2,0,0,1,3,0,0,1,4,0,0,1,6,0,0,1,8,0,0,1,12,0,0,1,16,0,0,1,24,0,0,1,32,0,0,1,48,0,0,1,64,0,0,1,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,5,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,9,0,0,0,9,0,0,0,10,0,0,0,10,0,0,0,11,0,0,0,11,0,0,0,12,0,0,0,12,0,0,0,13,0,0,0,13,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,8,0,0,0,8,0,0,0,8,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,0,0,128,63,46,186,232,62,172,3,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,6,0,0,0,22,33,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,172,3,0,0,36,4,0,0,5,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,6,0,0,0,30,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,16,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,0,0,0,0,32,0,0,0,9,0,0,0,17,0,0,0,11,0,0,0,12,0,0,0,13,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,8,28,0,0,0,0,0,0,72,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,0,0,0,0,88,0,0,0,24,0,0,0,25,0,0,0,26,0,0,0,0,0,0,0,104,0,0,0,24,0,0,0,27,0,0,0,26,0,0,0,0,0,0,0,120,0,0,0,24,0,0,0,28,0,0,0,26,0,0,0,87,111,114,107,101,114,58,32,82,101,97,100,70,105,108,101,95,66,101,103,105,110,32,101,110,116,101,114,105,110,103,0,78,111,32,102,105,108,101,32,105,110,105,116,105,97,108,105,122,101,100,46,46,46,0,87,111,114,107,101,114,58,32,84,114,97,118,101,114,115,101,68,105,114,101,99,116,111,114,121,32,101,110,116,101,114,105,110,103,0,87,111,114,107,101,114,58,32,82,101,97,100,73,109,97,103,101,32,101,110,116,101,114,105,110,103,0,54,57,51,49,0,104,116,116,112,58,47,47,108,111,99,97,108,104,111,115,116,58,0,47,106,115,47,102,101,116,99,104,46,106,115,0,101,109,115,99,114,105,112,116,101,110,95,97,115,121,110,99,95,119,103,101,116,95,100,97,116,97,32,105,110,106,101,99,116,32,102,101,116,99,104,32,102,97,105,108,101,100,0,123,32,115,101,108,102,46,102,101,116,99,104,66,117,110,100,108,101,65,115,121,110,99,40,36,48,44,32,36,49,44,32,36,50,44,32,36,51,44,32,36,52,41,59,32,125,0,66,117,110,100,108,101,32,78,97,109,101,32,70,111,117,110,100,58,32,37,115,10,0,102,111,112,101,110,32,102,111,114,32,39,37,115,39,32,102,97,105,108,101,100,10,0,83,101,110,100,70,105,108,101,95,79,110,76,111,97,100,32,114,101,97,99,104,101,100,46,0,47,119,111,114,107,105,110,103,0,80,97,116,104,32,82,101,99,101,105,118,101,100,58,32,37,115,10,0,65,116,116,101,109,112,116,105,110,103,32,102,111,112,101,110,32,102,111,114,32,39,37,115,39,46,46,46,10,0,123,32,116,114,121,32,123,32,114,101,116,117,114,110,32,115,101,108,102,46,119,97,108,107,70,105,108,101,68,105,114,101,99,116,111,114,121,40,36,48,44,32,36,49,44,32,36,50,41,59,32,125,32,99,97,116,99,104,32,40,101,41,32,123,32,99,111,110,115,111,108,101,46,108,111,103,40,101,46,109,101,115,115,97,103,101,41,59,32,114,101,116,117,114,110,32,48,59,32,125,32,125,0,70,97,105,108,101,100,32,116,111,32,116,114,97,118,101,114,115,101,32,39,37,115,39,10,0,46,106,112,103,0,46,116,103,97,0,46,106,112,101,103,0,69,82,82,79,82,58,32,102,105,108,101,32,99,111,117,108,100,32,110,111,116,32,98,101,32,111,112,101,110,101,100,0,69,82,82,79,82,58,32,83,84,66,73,32,114,101,106,101,99,116,101,100,32,116,104,101,32,105,109,97,103,101,32,102,105,108,101,0,73,109,97,103,101,32,82,101,97,100,32,115,117,99,99,101,115,115,102,117,108,58,10,119,105,100,116,104,58,32,37,105,44,32,104,101,105,103,104,116,58,32,37,105,44,32,98,112,112,58,32,37,105,10,0,114,98,0,99,97,110,39,116,32,102,111,112,101,110,0,110,111,32,83,79,73,0,101,120,112,101,99,116,101,100,32,109,97,114,107,101,114,0,98,97,100,32,68,82,73,32,108,101,110,0,98,97,100,32,68,81,84,32,116,121,112,101,0,98,97,100,32,68,81,84,32,116,97,98,108,101,0,0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,98,97,100,32,68,72,84,32,104,101,97,100,101,114,0,98,97,100,32,99,111,100,101,32,108,101,110,103,116,104,115,0,110,111,32,83,79,70,0,98,97,100,32,83,79,70,32,108,101,110,0,111,110,108,121,32,56,45,98,105,116,0,110,111,32,104,101,97,100,101,114,32,104,101,105,103,104,116,0,48,32,119,105,100,116,104,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,99,111,109,112,111,110,101,110,116,32,73,68,0,98,97,100,32,72,0,98,97,100,32,86,0,98,97,100,32,84,81,0,116,111,111,32,108,97,114,103,101,0,111,117,116,111,102,109,101,109,0,98,97,100,32,114,101,113,95,99,111,109,112,0,98,97,100,32,83,79,83,32,99,111,109,112,111,110,101,110,116,32,99,111,117,110,116,0,98,97,100,32,83,79,83,32,108,101,110,0,98,97,100,32,68,67,32,104,117,102,102,0,98,97,100,32,65,67,32,104,117,102,102,0,98,97,100,32,83,79,83,0,40,40,40,106,45,62,99,111,100,101,95,98,117,102,102,101,114,41,32,62,62,32,40,51,50,32,45,32,104,45,62,115,105,122,101,91,99,93,41,41,32,38,32,115,116,98,105,95,95,98,109,97,115,107,91,104,45,62,115,105,122,101,91,99,93,93,41,32,61,61,32,104,45,62,99,111,100,101,91,99,93,0,47,104,111,109,101,47,97,109,115,116,100,101,114,100,97,109,47,100,101,118,47,101,110,118,47,101,109,115,100,107,47,101,109,115,99,114,105,112,116,101,110,47,109,97,115,116,101,114,47,116,104,105,114,100,95,112,97,114,116,121,47,115,116,98,95,105,109,97,103,101,46,99,0,115,116,98,105,95,95,106,112,101,103,95,104,117,102,102,95,100,101,99,111,100,101,0,98,97,100,32,104,117,102,102,109,97,110,32,99,111,100,101,0,110,32,62,61,32,48,32,38,38,32,110,32,60,32,40,105,110,116,41,32,40,115,105,122,101,111,102,40,115,116,98,105,95,95,98,109,97,115,107,41,47,115,105,122,101,111,102,40,42,115,116,98,105,95,95,98,109,97,115,107,41,41,0,115,116,98,105,95,95,101,120,116,101,110,100,95,114,101,99,101,105,118,101,0,99,97,110,39,116,32,109,101,114,103,101,32,100,99,32,97,110,100,32,97,99,0,106,117,110,107,32,98,101,102,111,114,101,32,109,97,114,107,101,114,0,137,80,78,71,13,10,26,10,98,97,100,32,112,110,103,32,115,105,103,0,109,117,108,116,105,112,108,101,32,73,72,68,82,0,98,97,100,32,73,72,68,82,32,108,101,110,0,49,47,50,47,52,47,56,45,98,105,116,32,111,110,108,121,0,98,97,100,32,99,116,121,112,101,0,98,97,100,32,99,111,109,112,32,109,101,116,104,111,100,0,98,97,100,32,102,105,108,116,101,114,32,109,101,116,104,111,100,0,98,97,100,32,105,110,116,101,114,108,97,99,101,32,109,101,116,104,111,100,0,48,45,112,105,120,101,108,32,105,109,97,103,101,0,102,105,114,115,116,32,110,111,116,32,73,72,68,82,0,105,110,118,97,108,105,100,32,80,76,84,69,0,116,82,78,83,32,97,102,116,101,114,32,73,68,65,84,0,116,82,78,83,32,98,101,102,111,114,101,32,80,76,84,69,0,98,97,100,32,116,82,78,83,32,108,101,110,0,116,82,78,83,32,119,105,116,104,32,97,108,112,104,97,0,0,255,85,0,17,0,0,0,1,110,111,32,80,76,84,69,0,111,117,116,111,102,100,97,116,97,0,110,111,32,73,68,65,84,0,98,97,100,32,122,108,105,98,32,104,101,97,100,101,114,0,110,111,32,112,114,101,115,101,116,32,100,105,99,116,0,98,97,100,32,99,111,109,112,114,101,115,115,105,111,110,0,122,45,62,99,111,100,101,95,98,117,102,102,101,114,32,60,32,40,49,85,32,60,60,32,122,45,62,110,117,109,95,98,105,116,115,41,0,115,116,98,105,95,95,102,105,108,108,95,98,105,116,115,0,97,45,62,110,117,109,95,98,105,116,115,32,61,61,32,48,0,115,116,98,105,95,95,112,97,114,115,101,95,117,110,99,111,109,112,101,114,115,115,101,100,95,98,108,111,99,107,0,122,108,105,98,32,99,111,114,114,117,112,116,0,114,101,97,100,32,112,97,115,116,32,98,117,102,102,101,114,0,111,117,116,112,117,116,32,98,117,102,102,101,114,32,108,105,109,105,116,0,98,97,100,32,115,105,122,101,115,0,98,97,100,32,99,111,100,101,108,101,110,103,116,104,115,0,98,105,116,115,32,60,61,32,49,54,0,115,116,98,105,95,95,98,105,116,95,114,101,118,101,114,115,101,0,16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15,122,45,62,115,105,122,101,91,98,93,32,61,61,32,115,0,115,116,98,105,95,95,122,104,117,102,102,109,97,110,95,100,101,99,111,100,101,95,115,108,111,119,112,97,116,104,0,99,32,61,61,32,49,56,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,104,117,102,102,109,97,110,95,99,111,100,101,115,0,98,97,100,32,100,105,115,116,0,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,32,124,124,32,111,117,116,95,110,32,61,61,32,115,45,62,105,109,103,95,110,43,49,0,115,116,98,105,95,95,99,114,101,97,116,101,95,112,110,103,95,105,109,97,103,101,95,114,97,119,0,110,111,116,32,101,110,111,117,103,104,32,112,105,120,101,108,115,0,105,110,118,97,108,105,100,32,102,105,108,116,101,114,0,105,109,103,95,119,105,100,116,104,95,98,121,116,101,115,32,60,61,32,120,0,0,1,0,5,6,105,109,103,95,110,43,49,32,61,61,32,111,117,116,95,110,0,105,109,103,95,110,32,61,61,32,51,0,111,117,116,95,110,32,61,61,32,50,32,124,124,32,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,99,111,109,112,117,116,101,95,116,114,97,110,115,112,97,114,101,110,99,121,0,115,45,62,105,109,103,95,111,117,116,95,110,32,61,61,32,52,0,115,116,98,105,95,95,100,101,95,105,112,104,111,110,101,0,88,88,88,88,32,80,78,71,32,99,104,117,110,107,32,110,111,116,32,107,110,111,119,110,0,114,101,113,95,99,111,109,112,32,62,61,32,49,32,38,38,32,114,101,113,95,99,111,109,112,32,60,61,32,52,0,115,116,98,105,95,95,99,111,110,118,101,114,116,95,102,111,114,109,97,116,0,48,0,110,111,116,32,66,77,80,0,117,110,107,110,111,119,110,32,66,77,80,0,98,97,100,32,66,77,80,0,109,111,110,111,99,104,114,111,109,101,0,66,77,80,32,82,76,69,0,104,115,122,32,61,61,32,49,48,56,32,124,124,32,104,115,122,32,61,61,32,49,50,52,0,115,116,98,105,95,95,98,109,112,95,108,111,97,100,0,105,110,118,97,108,105,100,0,98,97,100,32,98,112,112,0,98,97,100,32,109,97,115,107,115,0,110,111,116,32,71,73,70,0,98,97,100,32,73,109,97,103,101,32,68,101,115,99,114,105,112,116,111,114,0,109,105,115,115,105,110,103,32,99,111,108,111,114,32,116,97,98,108,101,0,110,111,32,99,108,101,97,114,32,99,111,100,101,0,116,111,111,32,109,97,110,121,32,99,111,100,101,115,0,105,108,108,101,103,97,108,32,99,111,100,101,32,105,110,32,114,97,115,116,101,114,0,117,110,107,110,111,119,110,32,99,111,100,101,0,110,111,116,32,80,83,68,0,119,114,111,110,103,32,118,101,114,115,105,111,110,0,119,114,111,110,103,32,99,104,97,110,110,101,108,32,99,111,117,110,116,0,117,110,115,117,112,112,111,114,116,101,100,32,98,105,116,32,100,101,112,116,104,0,119,114,111,110,103,32,99,111,108,111,114,32,102,111,114,109,97,116,0,83,128,246,52,0,80,73,67,84,0,98,97,100,32,102,105,108,101,0,98,97,100,32,102,111,114,109,97,116,0,109,97,120,32,118,97,108,117,101,32,62,32,50,53,53,0,35,63,82,65,68,73,65,78,67,69,10,0,35,63,82,65,68,73,65,78,67,69,0,110,111,116,32,72,68,82,0,70,79,82,77,65,84,61,51,50,45,98,105,116,95,114,108,101,95,114,103,98,101,0,117,110,115,117,112,112,111,114,116,101,100,32,102,111,114,109,97,116,0,45,89,32,0,117,110,115,117,112,112,111,114,116,101,100,32,100,97,116,97,32,108,97,121,111,117,116,0,43,88,32,0,105,110,118,97,108,105,100,32,100,101,99,111,100,101,100,32,115,99,97,110,108,105,110,101,32,108,101,110,103,116,104,0,98,97,100,32,112,97,108,101,116,116,101,0,117,110,107,110,111,119,110,32,105,109,97,103,101,32,116,121,112,101,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114,101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,110,97,110,0,78,65,78,0,46,0,114,119,97,0,98,97,115,105,99,95,115,116,114,105,110,103,0,118,101,99,116,111,114,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,116,121,112,101,95,105,110,102,111,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,83,116,57,101,120,99,101,112,116,105,111,110,0,117,110,99,97,117,103,104,116,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,116,101,114,109,105,110,97,116,105,110,103,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,116,104,114,101,119,32,97,110,32,101,120,99,101,112,116,105,111,110,0,83,116,57,98,97,100,95,97,108,108,111,99,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,83,116,49,50,111,117,116,95,111,102,95,114,97,110,103,101,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr;
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

   
  Module["_memset"] = _memset;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  
  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
  
          // catches pause/resume main loop from blocker execution
          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
  
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
  
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
  
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll':
            delta = event.detail;
            break;
          case 'mousewheel':
            delta = event.wheelDelta;
            break;
          case 'wheel':
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
  
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
  
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            }
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Module['readAsync'](url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};function _emscripten_async_wget_data(url, arg, onload, onerror) {
      Browser.asyncLoad(Pointer_stringify(url), function(byteArray) {
        var buffer = _malloc(byteArray.length);
        HEAPU8.set(byteArray, buffer);
        Runtime.dynCall('viii', onload, [arg, buffer, byteArray.length]);
        _free(buffer);
      }, function() {
        if (onerror) Runtime.dynCall('vi', onerror, [arg]);
      }, true /* no need for run dependency, this is async but will not do any prepare etc. step */ );
    }

  
  
  function _free() {
  }
  Module["_free"] = _free;function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }


  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  function ___lock() {}

  function ___unlock() {}

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  var _emscripten_asm_const_int=true;

  function _emscripten_worker_respond_provisionally(data, size) {
      if (workerResponded) throw 'already responded with final response!';
      var transferObject = {
        'callbackId': workerCallbackId,
        'finalResponse': false,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        postMessage(transferObject);
      }
    }

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~02000000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
  		  // #HOLLAND01: using curr as node name will prevent FS.nameTable
  		  // lookups, given that all FS functions assume node names
  		  // are just their corresponding parts within a given path,
  		  // rather than incremental aggregates of parent names as well.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, /*curr*/
                parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) {
                     throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                }
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___cxa_find_matching_catch_2() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_find_matching_catch_3() {
          return ___cxa_find_matching_catch.apply(null, arguments);
        }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
  	var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _llvm_pow_f64=Math_pow;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  function _emscripten_worker_respond(data, size) {
      if (workerResponded) throw 'already responded with final response!';
      workerResponded = true;
      var transferObject = {
        'callbackId': workerCallbackId,
        'finalResponse': true,
        'data': data ? new Uint8Array(HEAPU8.subarray((data),(data + size))) : 0
      };
      if (data) {
        postMessage(transferObject, [transferObject.data.buffer]);
      } else {
        postMessage(transferObject);
      }
    }

  function ___gxx_personality_v0() {
    }


  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var ___dso_handle=STATICTOP; STATICTOP += 16;;
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_i(x) { Module["printErr"]("Invalid function pointer called with signature 'i'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_v(x) { Module["printErr"]("Invalid function pointer called with signature 'v'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_i": nullFunc_i, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_v": nullFunc_v, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiiiii": nullFunc_iiiiii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_v": invoke_v, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "_emscripten_run_script": _emscripten_run_script, "_llvm_pow_f64": _llvm_pow_f64, "_pthread_key_create": _pthread_key_create, "_pthread_cleanup_push": _pthread_cleanup_push, "_abort": _abort, "_emscripten_worker_respond": _emscripten_worker_respond, "___gxx_personality_v0": ___gxx_personality_v0, "___assert_fail": ___assert_fail, "___cxa_free_exception": ___cxa_free_exception, "___cxa_find_matching_catch_2": ___cxa_find_matching_catch_2, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "_emscripten_worker_respond_provisionally": _emscripten_worker_respond_provisionally, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_sbrk": _sbrk, "___cxa_begin_catch": ___cxa_begin_catch, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "___setErrNo": ___setErrNo, "_pthread_getspecific": _pthread_getspecific, "___cxa_find_matching_catch_3": ___cxa_find_matching_catch_3, "_pthread_self": _pthread_self, "_pthread_once": _pthread_once, "___syscall54": ___syscall54, "___unlock": ___unlock, "_emscripten_set_main_loop": _emscripten_set_main_loop, "_emscripten_asm_const_iiiiii": _emscripten_asm_const_iiiiii, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "_emscripten_asm_const_iiii": _emscripten_asm_const_iiii, "___cxa_throw": ___cxa_throw, "___lock": ___lock, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "_time": _time, "___cxa_allocate_exception": ___cxa_allocate_exception, "_emscripten_async_wget_data": _emscripten_async_wget_data, "_atexit": _atexit, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_i=env.nullFunc_i;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_v=env.nullFunc_v;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiiiii=env.nullFunc_iiiiii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_v=env.invoke_v;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var _emscripten_run_script=env._emscripten_run_script;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var _pthread_key_create=env._pthread_key_create;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _abort=env._abort;
  var _emscripten_worker_respond=env._emscripten_worker_respond;
  var ___gxx_personality_v0=env.___gxx_personality_v0;
  var ___assert_fail=env.___assert_fail;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_find_matching_catch_2=env.___cxa_find_matching_catch_2;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var _emscripten_worker_respond_provisionally=env._emscripten_worker_respond_provisionally;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _sbrk=env._sbrk;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var ___setErrNo=env.___setErrNo;
  var _pthread_getspecific=env._pthread_getspecific;
  var ___cxa_find_matching_catch_3=env.___cxa_find_matching_catch_3;
  var _pthread_self=env._pthread_self;
  var _pthread_once=env._pthread_once;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var _emscripten_asm_const_iiiiii=env._emscripten_asm_const_iiiiii;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var _emscripten_asm_const_iiii=env._emscripten_asm_const_iiii;
  var ___cxa_throw=env.___cxa_throw;
  var ___lock=env.___lock;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var _time=env._time;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var _emscripten_async_wget_data=env._emscripten_async_wget_data;
  var _atexit=env._atexit;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
if ((STACKTOP|0) >= (STACK_MAX|0)) abort();

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}
function copyTempFloat(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
}
function copyTempDouble(ptr) {
  ptr = ptr|0;
  HEAP8[tempDoublePtr>>0] = HEAP8[ptr>>0];
  HEAP8[tempDoublePtr+1>>0] = HEAP8[ptr+1>>0];
  HEAP8[tempDoublePtr+2>>0] = HEAP8[ptr+2>>0];
  HEAP8[tempDoublePtr+3>>0] = HEAP8[ptr+3>>0];
  HEAP8[tempDoublePtr+4>>0] = HEAP8[ptr+4>>0];
  HEAP8[tempDoublePtr+5>>0] = HEAP8[ptr+5>>0];
  HEAP8[tempDoublePtr+6>>0] = HEAP8[ptr+6>>0];
  HEAP8[tempDoublePtr+7>>0] = HEAP8[ptr+7>>0];
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function ___cxx_global_var_init() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 20|0;
 $5 = sp + 8|0;
 $6 = 7560;
 $7 = 0;
 $8 = $6;
 $4 = $8;
 HEAP32[$5>>2] = 0;
 $9 = $4;
 $3 = $5;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $1 = $9;
 HEAP32[$2>>2] = $11;
 $12 = $1;
 $0 = $2;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 (___cxa_atexit((29|0),(7560|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__110unique_ptrI11asyncArgs_tNS_14default_deleteIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $9 = 0;
 $12 = $8;
 $7 = $12;
 $13 = $7;
 $6 = $13;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $__tmp$i = $15;
 $16 = $9;
 $3 = $12;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 HEAP32[$18>>2] = $16;
 $19 = $__tmp$i;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $1 = $12;
 $21 = $1;
 $0 = $21;
 $22 = $0;
 $23 = $__tmp$i;
 $4 = $22;
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 __ZN11asyncArgs_tD2Ev($24);
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function ___cxx_global_var_init_1() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $2 = sp + 20|0;
 $5 = sp + 8|0;
 $6 = 7564;
 $7 = 0;
 $8 = $6;
 $4 = $8;
 HEAP32[$5>>2] = 0;
 $9 = $4;
 $3 = $5;
 $10 = $3;
 $11 = HEAP32[$10>>2]|0;
 $1 = $9;
 HEAP32[$2>>2] = $11;
 $12 = $1;
 $0 = $2;
 $13 = $0;
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$12>>2] = $14;
 (___cxa_atexit((30|0),(7564|0),(___dso_handle|0))|0);
 STACKTOP = sp;return;
}
function __ZNSt3__110unique_ptrI6file_tNS_14default_deleteIS1_EEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $10 = $this;
 $11 = $10;
 $8 = $11;
 $9 = 0;
 $12 = $8;
 $7 = $12;
 $13 = $7;
 $6 = $13;
 $14 = $6;
 $15 = HEAP32[$14>>2]|0;
 $__tmp$i = $15;
 $16 = $9;
 $3 = $12;
 $17 = $3;
 $2 = $17;
 $18 = $2;
 HEAP32[$18>>2] = $16;
 $19 = $__tmp$i;
 $20 = ($19|0)!=(0|0);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $1 = $12;
 $21 = $1;
 $0 = $21;
 $22 = $0;
 $23 = $__tmp$i;
 $4 = $22;
 $5 = $23;
 $24 = $5;
 $25 = ($24|0)==(0|0);
 if ($25) {
  STACKTOP = sp;return;
 }
 __ZN6file_tD2Ev($24);
 __ZdlPv($24);
 STACKTOP = sp;return;
}
function _ReadFile_Begin($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $size;
 (_puts(1340)|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZL10InitSystemPFvPciES_i(31,$2,$3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 __ZL14ReadFile_ProxyPci($5,$6);
 STACKTOP = sp;return;
}
function __ZL10InitSystemPFvPciES_i($proxy,$data,$size) {
 $proxy = $proxy|0;
 $data = $data|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__tmp$i = 0, $port = 0, $urlString = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $13 = sp + 116|0;
 $urlString = sp + 80|0;
 $14 = $proxy;
 $15 = $data;
 $16 = $size;
 $19 = HEAP8[8140]|0;
 $20 = $19&1;
 if ($20) {
  $$expand_i1_val2 = 1;
  HEAP8[$13>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$13>>0]|0;
  $50 = $$pre_trunc&1;
  STACKTOP = sp;return ($50|0);
 }
 $21 = (__Znwj(12)|0);
 $22 = $14;
 $23 = $15;
 $24 = $16;
 __THREW__ = 0;
 invoke_viiii(32,($21|0),($22|0),($23|0),($24|0));
 $25 = __THREW__; __THREW__ = 0;
 $26 = $25&1;
 if ($26) {
  $46 = ___cxa_find_matching_catch_2()|0;
  $47 = tempRet0;
  $17 = $46;
  $18 = $47;
  __ZdlPv($21);
  $48 = $17;
  $49 = $18;
  ___resumeException($48|0);
  // unreachable;
 }
 $11 = 7560;
 $12 = $21;
 $27 = $11;
 $10 = $27;
 $28 = $10;
 $9 = $28;
 $29 = $9;
 $30 = HEAP32[$29>>2]|0;
 $__tmp$i = $30;
 $31 = $12;
 $6 = $27;
 $32 = $6;
 $5 = $32;
 $33 = $5;
 HEAP32[$33>>2] = $31;
 $34 = $__tmp$i;
 $35 = ($34|0)!=(0|0);
 if ($35) {
  $4 = $27;
  $36 = $4;
  $3 = $36;
  $37 = $3;
  $38 = $__tmp$i;
  $7 = $37;
  $8 = $38;
  $39 = $8;
  $40 = ($39|0)==(0|0);
  if (!($40)) {
   __ZN11asyncArgs_tD2Ev($39);
   __ZdlPv($39);
  }
 }
 dest=$urlString; stop=dest+36|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $port = 1457;
 (_strncat($urlString,1462,17)|0);
 $41 = $port;
 (_strncat($urlString,$41,4)|0);
 (_strncat($urlString,1480,12)|0);
 $2 = 7560;
 $42 = $2;
 $1 = $42;
 $43 = $1;
 $0 = $43;
 $44 = $0;
 $45 = HEAP32[$44>>2]|0;
 _emscripten_async_wget_data(($urlString|0),($45|0),(33|0),(34|0));
 HEAP8[8140] = 1;
 $$expand_i1_val = 0;
 HEAP8[$13>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$13>>0]|0;
 $50 = $$pre_trunc&1;
 STACKTOP = sp;return ($50|0);
}
function __ZL14ReadFile_ProxyPci($data,$size) {
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $__a$i$i = 0, $__i$i$i = 0, $buffer = 0, $bundleName = 0, $port = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $bundleName = sp + 36|0;
 $32 = sp + 16|0;
 $buffer = sp;
 $28 = $data;
 $29 = $size;
 $27 = $bundleName;
 $34 = $27;
 $26 = $34;
 $35 = $26;
 $25 = $35;
 $36 = $25;
 $24 = $36;
 $23 = $34;
 $37 = $23;
 $22 = $37;
 $38 = $22;
 $21 = $38;
 $39 = $21;
 $__a$i$i = $39;
 $__i$i$i = 0;
 while(1) {
  $40 = $__i$i$i;
  $41 = ($40>>>0)<(3);
  if (!($41)) {
   break;
  }
  $42 = $__i$i$i;
  $43 = $__a$i$i;
  $44 = (($43) + ($42<<2)|0);
  HEAP32[$44>>2] = 0;
  $45 = $__i$i$i;
  $46 = (($45) + 1)|0;
  $__i$i$i = $46;
 }
 $47 = $28;
 $48 = $29;
 __THREW__ = 0;
 $49 = (invoke_iiii(35,($bundleName|0),($47|0),($48|0))|0);
 $50 = __THREW__; __THREW__ = 0;
 $51 = $50&1;
 do {
  if (!($51)) {
   if ($49) {
    $port = 1457;
    $67 = $28;
    $68 = $29;
    __THREW__ = 0;
    invoke_viii(38,($buffer|0),($67|0),($68|0));
    $69 = __THREW__; __THREW__ = 0;
    $70 = $69&1;
    if ($70) {
     break;
    }
    $14 = $bundleName;
    $71 = $14;
    $13 = $71;
    $72 = $13;
    $12 = $72;
    $73 = $12;
    $11 = $73;
    $74 = $11;
    $10 = $74;
    $75 = $10;
    $9 = $75;
    $76 = $9;
    $77 = HEAP8[$76>>0]|0;
    $78 = $77&255;
    $79 = $78 & 1;
    $80 = ($79|0)!=(0);
    if ($80) {
     $3 = $73;
     $81 = $3;
     $2 = $81;
     $82 = $2;
     $1 = $82;
     $83 = $1;
     $84 = ((($83)) + 8|0);
     $85 = HEAP32[$84>>2]|0;
     $92 = $85;
    } else {
     $8 = $73;
     $86 = $8;
     $7 = $86;
     $87 = $7;
     $6 = $87;
     $88 = $6;
     $89 = ((($88)) + 1|0);
     $5 = $89;
     $90 = $5;
     $4 = $90;
     $91 = $4;
     $92 = $91;
    }
    $0 = $92;
    $93 = $0;
    $94 = HEAP32[$buffer>>2]|0;
    $95 = ((($buffer)) + 4|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = $port;
    $98 = _emscripten_asm_const_iiiiii(0, ($93|0), (39|0), ($94|0), ($96|0), ($97|0))|0;
    __ZN10charBuff_tD2Ev($buffer);
    $33 = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($bundleName);
    STACKTOP = sp;return;
   } else {
    $52 = $28;
    $53 = $29;
    $18 = $32;
    $19 = $52;
    $20 = $53;
    $54 = $18;
    $17 = $54;
    $55 = $17;
    $16 = $55;
    $56 = $16;
    $15 = $56;
    $57 = $19;
    $58 = $20;
    __THREW__ = 0;
    invoke_viii(36,($54|0),($57|0),($58|0));
    $59 = __THREW__; __THREW__ = 0;
    $60 = $59&1;
    if ($60) {
     break;
    }
    __THREW__ = 0;
    invoke_vi(37,($32|0));
    $61 = __THREW__; __THREW__ = 0;
    $62 = $61&1;
    if ($62) {
     $65 = ___cxa_find_matching_catch_2()|0;
     $66 = tempRet0;
     $30 = $65;
     $31 = $66;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($bundleName);
     $99 = $30;
     $100 = $31;
     ___resumeException($99|0);
     // unreachable;
    } else {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($32);
     $33 = 1;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($bundleName);
     STACKTOP = sp;return;
    }
   }
  }
 } while(0);
 $63 = ___cxa_find_matching_catch_2()|0;
 $64 = tempRet0;
 $30 = $63;
 $31 = $64;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($bundleName);
 $99 = $30;
 $100 = $31;
 ___resumeException($99|0);
 // unreachable;
}
function _ReadFile_Chunk($bcmd,$size) {
 $bcmd = $bcmd|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cmd = 0, $m = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $m = sp;
 $14 = $bcmd;
 $15 = $size;
 $13 = 7564;
 $16 = $13;
 $12 = $16;
 $17 = $12;
 $11 = $17;
 $18 = $11;
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)!=(0|0);
 if ($20) {
  $5 = 7564;
  $21 = $5;
  $4 = $21;
  $22 = $4;
  $3 = $22;
  $23 = $3;
  $24 = HEAP32[$23>>2]|0;
  $25 = (__ZNK6file_tcvbEv($24)|0);
  if ($25) {
   $26 = $14;
   $cmd = $26;
   $2 = 7564;
   $27 = $2;
   $1 = $27;
   $28 = $1;
   $0 = $28;
   $29 = $0;
   $30 = HEAP32[$29>>2]|0;
   $31 = $cmd;
   $32 = HEAP32[$31>>2]|0;
   $33 = $cmd;
   $34 = ((($33)) + 4|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = (__ZN6file_t4ReadEjj($30,$32,$35)|0);
   if ($36) {
    $8 = 7564;
    $37 = $8;
    $7 = $37;
    $38 = $7;
    $6 = $38;
    $39 = $6;
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($40)) + 4|0);
    $9 = $41;
    $10 = 0;
    $42 = $9;
    $43 = $10;
    $44 = HEAP32[$42>>2]|0;
    $45 = (($44) + ($43)|0);
    $46 = $cmd;
    $47 = ((($46)) + 4|0);
    $48 = HEAP32[$47>>2]|0;
    _emscripten_worker_respond(($45|0),($48|0));
    STACKTOP = sp;return;
   } else {
    HEAP32[$m>>2] = 0;
    _emscripten_worker_respond(($m|0),4);
    STACKTOP = sp;return;
   }
  }
 }
 (_puts(1372)|0);
 _emscripten_worker_respond((0|0),0);
 STACKTOP = sp;return;
}
function __ZNK6file_tcvbEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 $4 = $3 ^ 1;
 $5 = $4 ^ 1;
 STACKTOP = sp;return ($5|0);
}
function __ZN6file_t4ReadEjj($this,$offset,$size) {
 $this = $this|0;
 $offset = $offset|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp;
 $8 = sp + 94|0;
 $20 = sp + 93|0;
 $24 = sp + 92|0;
 $21 = $this;
 $22 = $offset;
 $23 = $size;
 $25 = $21;
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)!=(0|0);
 if (!($27)) {
  $$expand_i1_val = 0;
  HEAP8[$20>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$20>>0]|0;
  $72 = $$pre_trunc&1;
  STACKTOP = sp;return ($72|0);
 }
 $28 = ((($25)) + 4|0);
 $29 = $23;
 HEAP8[$24>>0] = 0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEjRKh($28,$29,$24);
 $30 = HEAP32[$25>>2]|0;
 $31 = $22;
 (_fseek($30,$31,0)|0);
 $32 = ((($25)) + 4|0);
 $18 = $32;
 $19 = 0;
 $33 = $18;
 $34 = $19;
 $35 = HEAP32[$33>>2]|0;
 $36 = (($35) + ($34)|0);
 $37 = $23;
 $38 = HEAP32[$25>>2]|0;
 (_fread($36,$37,1,$38)|0);
 $39 = ((($25)) + 4|0);
 $17 = $39;
 $40 = $17;
 $16 = $40;
 $41 = $16;
 $42 = ((($41)) + 4|0);
 $43 = HEAP32[$42>>2]|0;
 $44 = HEAP32[$41>>2]|0;
 $45 = $43;
 $46 = $44;
 $47 = (($45) - ($46))|0;
 $__old_size$i = $47;
 $15 = $40;
 $48 = $15;
 $49 = HEAP32[$48>>2]|0;
 $13 = $48;
 $14 = $49;
 $50 = $13;
 while(1) {
  $51 = $14;
  $52 = ((($50)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($51|0)!=($53|0);
  if (!($54)) {
   break;
  }
  $12 = $50;
  $55 = $12;
  $56 = ((($55)) + 8|0);
  $11 = $56;
  $57 = $11;
  $10 = $57;
  $58 = $10;
  $59 = ((($50)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ((($60)) + -1|0);
  HEAP32[$59>>2] = $61;
  $9 = $61;
  $62 = $9;
  $6 = $58;
  $7 = $62;
  $63 = $6;
  $64 = $7;
  ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
  $3 = $63;
  $4 = $64;
  $65 = $3;
  $66 = $4;
  $1 = $65;
  $2 = $66;
 }
 $67 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(40,($40|0),($67|0));
 $68 = __THREW__; __THREW__ = 0;
 $69 = $68&1;
 if ($69) {
  $70 = ___cxa_find_matching_catch_3(0|0)|0;
  $71 = tempRet0;
  ___clang_call_terminate($70);
  // unreachable;
 }
 $0 = $40;
 $$expand_i1_val2 = 1;
 HEAP8[$20>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$20>>0]|0;
 $72 = $$pre_trunc&1;
 STACKTOP = sp;return ($72|0);
}
function _TraverseDirectory($dir,$size) {
 $dir = $dir|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $dir;
 $1 = $size;
 (_puts(1395)|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZL10InitSystemPFvPciES_i(41,$2,$3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 __ZL23TraverseDirectory_ProxyPci($5,$6);
 STACKTOP = sp;return;
}
function __ZL23TraverseDirectory_ProxyPci($dir,$size) {
 $dir = $dir|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $error = 0, $mountDir = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $mountDir = sp + 16|0;
 $error = sp + 96|0;
 $15 = $dir;
 $16 = $size;
 $19 = $15;
 __ZL8FullPathPKc($mountDir,$19);
 _memset(($error|0),0,256)|0;
 $14 = $mountDir;
 $20 = $14;
 $13 = $20;
 $21 = $13;
 $12 = $21;
 $22 = $12;
 $11 = $22;
 $23 = $11;
 $10 = $23;
 $24 = $10;
 $9 = $24;
 $25 = $9;
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 & 1;
 $29 = ($28|0)!=(0);
 if ($29) {
  $3 = $22;
  $30 = $3;
  $2 = $30;
  $31 = $2;
  $1 = $31;
  $32 = $1;
  $33 = ((($32)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $41 = $34;
 } else {
  $8 = $22;
  $35 = $8;
  $7 = $35;
  $36 = $7;
  $6 = $36;
  $37 = $6;
  $38 = ((($37)) + 1|0);
  $5 = $38;
  $39 = $5;
  $4 = $39;
  $40 = $4;
  $41 = $40;
 }
 $0 = $41;
 $42 = $0;
 $43 = _emscripten_asm_const_iiii(1, ($42|0), (42|0), ($error|0))|0;
 $code = $43;
 $44 = $code;
 $45 = ($44|0)!=(0);
 if ($45) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($mountDir);
  STACKTOP = sp;return;
 }
 $46 = $15;
 __THREW__ = 0;
 HEAP32[$vararg_buffer>>2] = $46;
 (invoke_iii(43,(1819|0),($vararg_buffer|0))|0);
 $47 = __THREW__; __THREW__ = 0;
 $48 = $47&1;
 if ($48) {
  $49 = ___cxa_find_matching_catch_2()|0;
  $50 = tempRet0;
  $17 = $49;
  $18 = $50;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($mountDir);
  $51 = $17;
  $52 = $18;
  ___resumeException($51|0);
  // unreachable;
 } else {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($mountDir);
  STACKTOP = sp;return;
 }
}
function _ReadImage($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $path;
 $1 = $size;
 (_puts(1430)|0);
 $2 = $0;
 $3 = $1;
 $4 = (__ZL10InitSystemPFvPciES_i(44,$2,$3)|0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $5 = $0;
 $6 = $1;
 __ZL15ReadImage_ProxyPci($5,$6);
 STACKTOP = sp;return;
}
function __ZL15ReadImage_ProxyPci($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i = 0;
 var $__a$i$i$i = 0, $__i$i$i = 0, $__i$i$i$i = 0, $__lhs_sz$i = 0, $__lp$i = 0, $__rp$i = 0, $__tmp$i = 0, $candidates = 0, $cleanup$dest = 0, $cond = 0, $firstExt = 0, $full = 0, $hasExt = 0, $i = 0, $strPath = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $27 = sp + 8|0;
 $30 = sp + 793|0;
 $57 = sp + 792|0;
 $58 = sp + 791|0;
 $61 = sp;
 $64 = sp + 790|0;
 $118 = sp + 789|0;
 $strPath = sp + 104|0;
 $full = sp + 92|0;
 $candidates = sp + 48|0;
 $firstExt = sp + 32|0;
 $170 = sp + 16|0;
 $165 = $path;
 $166 = $size;
 $172 = $165;
 $173 = $166;
 $162 = $strPath;
 $163 = $172;
 $164 = $173;
 $174 = $162;
 $161 = $174;
 $175 = $161;
 $160 = $175;
 $176 = $160;
 $159 = $176;
 $177 = $163;
 $178 = $164;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($174,$177,$178);
 $179 = $165;
 __THREW__ = 0;
 invoke_vii(45,($full|0),($179|0));
 $180 = __THREW__; __THREW__ = 0;
 $181 = $180&1;
 if ($181) {
  $388 = ___cxa_find_matching_catch_2()|0;
  $389 = tempRet0;
  $167 = $388;
  $168 = $389;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($strPath);
  $512 = $167;
  $513 = $168;
  ___resumeException($512|0);
  // unreachable;
 }
 __THREW__ = 0;
 $182 = (invoke_ii(46,16)|0);
 $183 = __THREW__; __THREW__ = 0;
 $184 = $183&1;
 L5: do {
  if ($184) {
   label = 47;
  } else {
   __THREW__ = 0;
   invoke_vii(47,($182|0),($full|0));
   $185 = __THREW__; __THREW__ = 0;
   $186 = $185&1;
   if ($186) {
    $392 = ___cxa_find_matching_catch_2()|0;
    $393 = tempRet0;
    $167 = $392;
    $168 = $393;
    __ZdlPv($182);
    break;
   }
   $157 = 7564;
   $158 = $182;
   $187 = $157;
   $156 = $187;
   $188 = $156;
   $155 = $188;
   $189 = $155;
   $190 = HEAP32[$189>>2]|0;
   $__tmp$i = $190;
   $191 = $158;
   $152 = $187;
   $192 = $152;
   $151 = $192;
   $193 = $151;
   HEAP32[$193>>2] = $191;
   $194 = $__tmp$i;
   $195 = ($194|0)!=(0|0);
   if ($195) {
    $150 = $187;
    $196 = $150;
    $149 = $196;
    $197 = $149;
    $198 = $__tmp$i;
    $153 = $197;
    $154 = $198;
    $199 = $154;
    $200 = ($199|0)==(0|0);
    if (!($200)) {
     __ZN6file_tD2Ev($199);
     __ZdlPv($199);
    }
   }
   $148 = 7564;
   $201 = $148;
   $147 = $201;
   $202 = $147;
   $146 = $202;
   $203 = $146;
   $204 = HEAP32[$203>>2]|0;
   __THREW__ = 0;
   $205 = (invoke_ii(48,($204|0))|0);
   $206 = __THREW__; __THREW__ = 0;
   $207 = $206&1;
   if ($207) {
    label = 47;
   } else {
    L15: do {
     if (!($205)) {
      $169 = $candidates;
      $144 = $candidates;
      $145 = 1844;
      $208 = $144;
      $143 = $208;
      $209 = $143;
      $142 = $209;
      $210 = $142;
      $141 = $210;
      $211 = $145;
      $212 = $145;
      __THREW__ = 0;
      $213 = (invoke_ii(49,($212|0))|0);
      $214 = __THREW__; __THREW__ = 0;
      $215 = $214&1;
      if (!($215)) {
       __THREW__ = 0;
       invoke_viii(36,($208|0),($211|0),($213|0));
       $216 = __THREW__; __THREW__ = 0;
       $217 = $216&1;
       if (!($217)) {
        $218 = ((($candidates)) + 12|0);
        $169 = $218;
        $139 = $218;
        $140 = 1849;
        $219 = $139;
        $138 = $219;
        $220 = $138;
        $137 = $220;
        $221 = $137;
        $136 = $221;
        $222 = $140;
        $223 = $140;
        __THREW__ = 0;
        $224 = (invoke_ii(49,($223|0))|0);
        $225 = __THREW__; __THREW__ = 0;
        $226 = $225&1;
        if (!($226)) {
         __THREW__ = 0;
         invoke_viii(36,($219|0),($222|0),($224|0));
         $227 = __THREW__; __THREW__ = 0;
         $228 = $227&1;
         if (!($228)) {
          $229 = ((($218)) + 12|0);
          $169 = $229;
          $134 = $229;
          $135 = 1854;
          $230 = $134;
          $133 = $230;
          $231 = $133;
          $132 = $231;
          $232 = $132;
          $131 = $232;
          $233 = $135;
          $234 = $135;
          __THREW__ = 0;
          $235 = (invoke_ii(49,($234|0))|0);
          $236 = __THREW__; __THREW__ = 0;
          $237 = $236&1;
          if (!($237)) {
           __THREW__ = 0;
           invoke_viii(36,($230|0),($233|0),($235|0));
           $238 = __THREW__; __THREW__ = 0;
           $239 = $238&1;
           if (!($239)) {
            $130 = $firstExt;
            $240 = $130;
            $129 = $240;
            $241 = $129;
            $128 = $241;
            $242 = $128;
            $127 = $242;
            $126 = $240;
            $243 = $126;
            $125 = $243;
            $244 = $125;
            $124 = $244;
            $245 = $124;
            $__a$i$i = $245;
            $__i$i$i = 0;
            while(1) {
             $246 = $__i$i$i;
             $247 = ($246>>>0)<(3);
             if (!($247)) {
              break;
             }
             $248 = $__i$i$i;
             $249 = $__a$i$i;
             $250 = (($249) + ($248<<2)|0);
             HEAP32[$250>>2] = 0;
             $251 = $__i$i$i;
             $252 = (($251) + 1)|0;
             $__i$i$i = $252;
            }
            __THREW__ = 0;
            $253 = (invoke_iii(50,($full|0),($firstExt|0))|0);
            $254 = __THREW__; __THREW__ = 0;
            $255 = $254&1;
            L28: do {
             if (!($255)) {
              $256 = $253&1;
              $hasExt = $256;
              $i = 0;
              L30: while(1) {
               $257 = $i;
               $123 = $candidates;
               $258 = ($257>>>0)<(3);
               if (!($258)) {
                label = 65;
                break;
               }
               $259 = $hasExt;
               $260 = $259&1;
               if ($260) {
                $261 = $i;
                $121 = $candidates;
                $122 = $261;
                $262 = $121;
                $263 = $122;
                $264 = (($262) + (($263*12)|0)|0);
                $119 = $firstExt;
                $120 = $264;
                $265 = $119;
                $117 = $265;
                $266 = $117;
                $116 = $266;
                $267 = $116;
                $115 = $267;
                $268 = $115;
                $114 = $268;
                $269 = $114;
                $270 = HEAP8[$269>>0]|0;
                $271 = $270&255;
                $272 = $271 & 1;
                $273 = ($272|0)!=(0);
                if ($273) {
                 $110 = $266;
                 $274 = $110;
                 $109 = $274;
                 $275 = $109;
                 $108 = $275;
                 $276 = $108;
                 $277 = ((($276)) + 4|0);
                 $278 = HEAP32[$277>>2]|0;
                 $285 = $278;
                } else {
                 $113 = $266;
                 $279 = $113;
                 $112 = $279;
                 $280 = $112;
                 $111 = $280;
                 $281 = $111;
                 $282 = HEAP8[$281>>0]|0;
                 $283 = $282&255;
                 $284 = $283 >> 1;
                 $285 = $284;
                }
                $__lhs_sz$i = $285;
                $286 = $__lhs_sz$i;
                $287 = $120;
                $107 = $287;
                $288 = $107;
                $106 = $288;
                $289 = $106;
                $105 = $289;
                $290 = $105;
                $104 = $290;
                $291 = $104;
                $292 = HEAP8[$291>>0]|0;
                $293 = $292&255;
                $294 = $293 & 1;
                $295 = ($294|0)!=(0);
                if ($295) {
                 $100 = $288;
                 $296 = $100;
                 $99 = $296;
                 $297 = $99;
                 $98 = $297;
                 $298 = $98;
                 $299 = ((($298)) + 4|0);
                 $300 = HEAP32[$299>>2]|0;
                 $308 = $300;
                } else {
                 $103 = $288;
                 $301 = $103;
                 $102 = $301;
                 $302 = $102;
                 $101 = $302;
                 $303 = $101;
                 $304 = HEAP8[$303>>0]|0;
                 $305 = $304&255;
                 $306 = $305 >> 1;
                 $308 = $306;
                }
                $307 = ($286|0)!=($308|0);
                do {
                 if ($307) {
                  $$expand_i1_val = 0;
                  HEAP8[$118>>0] = $$expand_i1_val;
                 } else {
                  $309 = $119;
                  $97 = $309;
                  $310 = $97;
                  $96 = $310;
                  $311 = $96;
                  $95 = $311;
                  $312 = $95;
                  $94 = $312;
                  $313 = $94;
                  $93 = $313;
                  $314 = $93;
                  $315 = HEAP8[$314>>0]|0;
                  $316 = $315&255;
                  $317 = $316 & 1;
                  $318 = ($317|0)!=(0);
                  if ($318) {
                   $87 = $311;
                   $319 = $87;
                   $86 = $319;
                   $320 = $86;
                   $85 = $320;
                   $321 = $85;
                   $322 = ((($321)) + 8|0);
                   $323 = HEAP32[$322>>2]|0;
                   $330 = $323;
                  } else {
                   $92 = $311;
                   $324 = $92;
                   $91 = $324;
                   $325 = $91;
                   $90 = $325;
                   $326 = $90;
                   $327 = ((($326)) + 1|0);
                   $89 = $327;
                   $328 = $89;
                   $88 = $328;
                   $329 = $88;
                   $330 = $329;
                  }
                  $84 = $330;
                  $331 = $84;
                  $__lp$i = $331;
                  $332 = $120;
                  $80 = $332;
                  $333 = $80;
                  $79 = $333;
                  $334 = $79;
                  $78 = $334;
                  $335 = $78;
                  $77 = $335;
                  $336 = $77;
                  $76 = $336;
                  $337 = $76;
                  $338 = HEAP8[$337>>0]|0;
                  $339 = $338&255;
                  $340 = $339 & 1;
                  $341 = ($340|0)!=(0);
                  if ($341) {
                   $70 = $334;
                   $342 = $70;
                   $69 = $342;
                   $343 = $69;
                   $68 = $343;
                   $344 = $68;
                   $345 = ((($344)) + 8|0);
                   $346 = HEAP32[$345>>2]|0;
                   $353 = $346;
                  } else {
                   $75 = $334;
                   $347 = $75;
                   $74 = $347;
                   $348 = $74;
                   $73 = $348;
                   $349 = $73;
                   $350 = ((($349)) + 1|0);
                   $72 = $350;
                   $351 = $72;
                   $71 = $351;
                   $352 = $71;
                   $353 = $352;
                  }
                  $67 = $353;
                  $354 = $67;
                  $__rp$i = $354;
                  $355 = $119;
                  $83 = $355;
                  $356 = $83;
                  $82 = $356;
                  $357 = $82;
                  $81 = $357;
                  $358 = $81;
                  $359 = HEAP8[$358>>0]|0;
                  $360 = $359&255;
                  $361 = $360 & 1;
                  $362 = ($361|0)!=(0);
                  if ($362) {
                   $363 = $__lp$i;
                   $364 = $__rp$i;
                   $365 = $__lhs_sz$i;
                   __THREW__ = 0;
                   $366 = (invoke_iiii(51,($363|0),($364|0),($365|0))|0);
                   $367 = __THREW__; __THREW__ = 0;
                   $368 = $367&1;
                   if ($368) {
                    label = 44;
                    break L30;
                   }
                   $369 = ($366|0)==(0);
                   $$expand_i1_val2 = $369&1;
                   HEAP8[$118>>0] = $$expand_i1_val2;
                   break;
                  }
                  while(1) {
                   $370 = $__lhs_sz$i;
                   $371 = ($370|0)!=(0);
                   if (!($371)) {
                    label = 43;
                    break;
                   }
                   $372 = $__lp$i;
                   $373 = HEAP8[$372>>0]|0;
                   $374 = $373 << 24 >> 24;
                   $375 = $__rp$i;
                   $376 = HEAP8[$375>>0]|0;
                   $377 = $376 << 24 >> 24;
                   $378 = ($374|0)!=($377|0);
                   if ($378) {
                    label = 41;
                    break;
                   }
                   $379 = $__lhs_sz$i;
                   $380 = (($379) + -1)|0;
                   $__lhs_sz$i = $380;
                   $381 = $__lp$i;
                   $382 = ((($381)) + 1|0);
                   $__lp$i = $382;
                   $383 = $__rp$i;
                   $384 = ((($383)) + 1|0);
                   $__rp$i = $384;
                  }
                  if ((label|0) == 41) {
                   label = 0;
                   $$expand_i1_val4 = 0;
                   HEAP8[$118>>0] = $$expand_i1_val4;
                   break;
                  }
                  else if ((label|0) == 43) {
                   label = 0;
                   $$expand_i1_val6 = 1;
                   HEAP8[$118>>0] = $$expand_i1_val6;
                   break;
                  }
                 }
                } while(0);
                $$pre_trunc = HEAP8[$118>>0]|0;
                $387 = $$pre_trunc&1;
                if (!($387)) {
                 label = 52;
                }
               } else {
                label = 52;
               }
               if ((label|0) == 52) {
                label = 0;
                $403 = $i;
                $65 = $candidates;
                $66 = $403;
                $404 = $65;
                $405 = $66;
                $406 = (($404) + (($405*12)|0)|0);
                __THREW__ = 0;
                invoke_viii(52,($170|0),($full|0),($406|0));
                $407 = __THREW__; __THREW__ = 0;
                $408 = $407&1;
                if ($408) {
                 break L28;
                }
                $62 = $full;
                $63 = $170;
                $409 = $62;
                $410 = $63;
                ;HEAP8[$61>>0]=HEAP8[$64>>0]|0;
                $59 = $409;
                $60 = $410;
                $411 = $59;
                $56 = $411;
                $412 = $56;
                $55 = $412;
                $54 = $412;
                $413 = $54;
                $53 = $413;
                $414 = $53;
                $52 = $414;
                $415 = $52;
                $416 = HEAP8[$415>>0]|0;
                $417 = $416&255;
                $418 = $417 & 1;
                $419 = ($418|0)!=(0);
                if ($419) {
                 $47 = $412;
                 $420 = $47;
                 $46 = $420;
                 $421 = $46;
                 $45 = $421;
                 $422 = $45;
                 $423 = ((($422)) + 8|0);
                 $424 = HEAP32[$423>>2]|0;
                 HEAP8[$57>>0] = 0;
                 __ZNSt3__111char_traitsIcE6assignERcRKc($424,$57);
                 $38 = $412;
                 $39 = 0;
                 $425 = $38;
                 $426 = $39;
                 $37 = $425;
                 $427 = $37;
                 $36 = $427;
                 $428 = $36;
                 $429 = ((($428)) + 4|0);
                 HEAP32[$429>>2] = $426;
                } else {
                 $44 = $412;
                 $430 = $44;
                 $43 = $430;
                 $431 = $43;
                 $42 = $431;
                 $432 = $42;
                 $433 = ((($432)) + 1|0);
                 $41 = $433;
                 $434 = $41;
                 $40 = $434;
                 $435 = $40;
                 HEAP8[$58>>0] = 0;
                 __ZNSt3__111char_traitsIcE6assignERcRKc($435,$58);
                 $50 = $412;
                 $51 = 0;
                 $436 = $50;
                 $437 = $51;
                 $438 = $437 << 1;
                 $439 = $438&255;
                 $49 = $436;
                 $440 = $49;
                 $48 = $440;
                 $441 = $48;
                 HEAP8[$441>>0] = $439;
                }
                $35 = $411;
                $442 = $35;
                __THREW__ = 0;
                invoke_vii(53,($442|0),0);
                $443 = __THREW__; __THREW__ = 0;
                $444 = $443&1;
                if ($444) {
                 label = 57;
                 break;
                }
                $34 = $411;
                $447 = $34;
                $33 = $447;
                $448 = $33;
                $449 = $60;
                $32 = $449;
                $450 = $32;
                $31 = $450;
                $451 = $31;
                ;HEAP32[$448>>2]=HEAP32[$451>>2]|0;HEAP32[$448+4>>2]=HEAP32[$451+4>>2]|0;HEAP32[$448+8>>2]=HEAP32[$451+8>>2]|0;
                $452 = $60;
                $28 = $411;
                $29 = $452;
                $453 = $28;
                $454 = $29;
                ;HEAP8[$27>>0]=HEAP8[$30>>0]|0;
                $25 = $453;
                $26 = $454;
                $455 = $25;
                $24 = $455;
                $456 = $24;
                $23 = $456;
                $457 = $23;
                $22 = $457;
                $458 = $26;
                $20 = $458;
                $459 = $20;
                $19 = $459;
                $460 = $19;
                $18 = $460;
                $461 = $18;
                $21 = $461;
                $462 = $60;
                $17 = $462;
                $463 = $17;
                $16 = $463;
                $464 = $16;
                $15 = $464;
                $465 = $15;
                $__a$i$i$i = $465;
                $__i$i$i$i = 0;
                while(1) {
                 $466 = $__i$i$i$i;
                 $467 = ($466>>>0)<(3);
                 if (!($467)) {
                  break;
                 }
                 $468 = $__i$i$i$i;
                 $469 = $__a$i$i$i;
                 $470 = (($469) + ($468<<2)|0);
                 HEAP32[$470>>2] = 0;
                 $471 = $__i$i$i$i;
                 $472 = (($471) + 1)|0;
                 $__i$i$i$i = $472;
                }
                __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($170);
                $14 = 7564;
                $473 = $14;
                $13 = $473;
                $474 = $13;
                $12 = $474;
                $475 = $12;
                $476 = HEAP32[$475>>2]|0;
                __THREW__ = 0;
                invoke_vii(54,($476|0),($full|0));
                $477 = __THREW__; __THREW__ = 0;
                $478 = $477&1;
                if ($478) {
                 break L28;
                }
                $11 = 7564;
                $479 = $11;
                $10 = $479;
                $480 = $10;
                $9 = $480;
                $481 = $9;
                $482 = HEAP32[$481>>2]|0;
                __THREW__ = 0;
                $483 = (invoke_ii(48,($482|0))|0);
                $484 = __THREW__; __THREW__ = 0;
                $485 = $484&1;
                if ($485) {
                 break L28;
                }
                if ($483) {
                 label = 65;
                 break;
                }
               }
               $486 = $i;
               $487 = (($486) + 1)|0;
               $i = $487;
              }
              if ((label|0) == 44) {
               $385 = ___cxa_find_matching_catch_3(0|0)|0;
               $386 = tempRet0;
               ___clang_call_terminate($385);
               // unreachable;
              }
              else if ((label|0) == 57) {
               $445 = ___cxa_find_matching_catch_3(0|0)|0;
               $446 = tempRet0;
               ___clang_call_terminate($445);
               // unreachable;
              }
              else if ((label|0) == 65) {
               $8 = 7564;
               $488 = $8;
               $7 = $488;
               $489 = $7;
               $6 = $489;
               $490 = $6;
               $491 = HEAP32[$490>>2]|0;
               __THREW__ = 0;
               $492 = (invoke_ii(48,($491|0))|0);
               $493 = __THREW__; __THREW__ = 0;
               $494 = $493&1;
               if ($494) {
                break;
               }
               if ($492) {
                $171 = 0;
               } else {
                __THREW__ = 0;
                invoke_vi(37,($strPath|0));
                $495 = __THREW__; __THREW__ = 0;
                $496 = $495&1;
                if ($496) {
                 break;
                }
                $171 = 1;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($firstExt);
               __ZNSt3__15arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELj3EED2Ev($candidates);
               $cleanup$dest = $171;
               $cond = ($cleanup$dest|0)==(0);
               if ($cond) {
                break L15;
               }
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($full);
               __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($strPath);
               STACKTOP = sp;return;
              }
             }
            } while(0);
            $401 = ___cxa_find_matching_catch_2()|0;
            $402 = tempRet0;
            $167 = $401;
            $168 = $402;
            __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($firstExt);
            __ZNSt3__15arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELj3EED2Ev($candidates);
            break L5;
           }
          }
         }
        }
       }
      }
      $394 = ___cxa_find_matching_catch_2()|0;
      $395 = tempRet0;
      $167 = $394;
      $168 = $395;
      $396 = $169;
      $397 = ($candidates|0)==($396|0);
      if ($397) {
       break L5;
      } else {
       $399 = $396;
      }
      while(1) {
       $398 = ((($399)) + -12|0);
       __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($398);
       $400 = ($398|0)==($candidates|0);
       if ($400) {
        break L5;
       } else {
        $399 = $398;
       }
      }
     }
    } while(0);
    $5 = 7564;
    $497 = $5;
    $4 = $497;
    $498 = $4;
    $3 = $498;
    $499 = $3;
    $500 = HEAP32[$499>>2]|0;
    __THREW__ = 0;
    $501 = (invoke_ii(55,($500|0))|0);
    $502 = __THREW__; __THREW__ = 0;
    $503 = $502&1;
    if ($503) {
     label = 47;
    } else {
     if ($501) {
      $2 = 7564;
      $506 = $2;
      $1 = $506;
      $507 = $1;
      $0 = $507;
      $508 = $0;
      $509 = HEAP32[$508>>2]|0;
      __THREW__ = 0;
      invoke_vi(56,($509|0));
      $510 = __THREW__; __THREW__ = 0;
      $511 = $510&1;
      if ($511) {
       label = 47;
       break;
      }
      $171 = 0;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($full);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($strPath);
      STACKTOP = sp;return;
     } else {
      __THREW__ = 0;
      invoke_vi(37,($strPath|0));
      $504 = __THREW__; __THREW__ = 0;
      $505 = $504&1;
      if ($505) {
       label = 47;
       break;
      }
      $171 = 1;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($full);
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($strPath);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 47) {
  $390 = ___cxa_find_matching_catch_2()|0;
  $391 = tempRet0;
  $167 = $390;
  $168 = $391;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($full);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($strPath);
 $512 = $167;
 $513 = $168;
 ___resumeException($512|0);
 // unreachable;
}
function ___clang_call_terminate($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___cxa_begin_catch(($0|0))|0);
 __ZSt9terminatev();
 // unreachable;
}
function __ZN11asyncArgs_tC2EPFvPciES0_i($this,$proxy_,$data,$size) {
 $this = $this|0;
 $proxy_ = $proxy_|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $proxy_;
 $2 = $data;
 $3 = $size;
 $4 = $0;
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($4)) + 4|0);
 $7 = $2;
 $8 = $3;
 __ZN10charBuff_tC2EPKci($6,$7,$8);
 STACKTOP = sp;return;
}
function __ZL17InitSystem_OnLoadPvS_i($arg,$data,$size) {
 $arg = $arg|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $args = 0, $copyData = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $copyData = sp + 8|0;
 $7 = sp + 52|0;
 $4 = $arg;
 $5 = $data;
 $6 = $size;
 $10 = $4;
 $args = $10;
 $11 = $6;
 $12 = (($11) + 1)|0;
 HEAP8[$7>>0] = 0;
 __ZNSt3__16vectorIcNS_9allocatorIcEEEC2EjRKc($copyData,$12,$7);
 $2 = $copyData;
 $3 = 0;
 $13 = $2;
 $14 = $3;
 $15 = HEAP32[$13>>2]|0;
 $16 = (($15) + ($14)|0);
 $17 = $5;
 $18 = $6;
 _memcpy(($16|0),($17|0),($18|0))|0;
 $0 = $copyData;
 $1 = 0;
 $19 = $0;
 $20 = $1;
 $21 = HEAP32[$19>>2]|0;
 $22 = (($21) + ($20)|0);
 __THREW__ = 0;
 invoke_vi(57,($22|0));
 $23 = __THREW__; __THREW__ = 0;
 $24 = $23&1;
 if ($24) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $8 = $36;
  $9 = $37;
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($copyData);
  $38 = $8;
  $39 = $9;
  ___resumeException($38|0);
  // unreachable;
 }
 $25 = $args;
 $26 = HEAP32[$25>>2]|0;
 $27 = $args;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $args;
 $31 = ((($30)) + 4|0);
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 __THREW__ = 0;
 invoke_vii($26|0,($29|0),($33|0));
 $34 = __THREW__; __THREW__ = 0;
 $35 = $34&1;
 if ($35) {
  $36 = ___cxa_find_matching_catch_2()|0;
  $37 = tempRet0;
  $8 = $36;
  $9 = $37;
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($copyData);
  $38 = $8;
  $39 = $9;
  ___resumeException($38|0);
  // unreachable;
 } else {
  __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($copyData);
  STACKTOP = sp;return;
 }
}
function __ZL18InitSystem_OnErrorPv($arg) {
 $arg = $arg|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $arg;
 (_puts(1493)|0);
 STACKTOP = sp;return;
}
function __ZN11asyncArgs_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 4|0);
 __ZN10charBuff_tD2Ev($2);
 STACKTOP = sp;return;
}
function __ZN10charBuff_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[$1>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   __ZdaPv($4);
  }
 }
 STACKTOP = sp;return;
}
function __ZN10charBuff_tC2EPKci($this,$data_,$size_) {
 $this = $this|0;
 $data_ = $data_|0;
 $size_ = $size_|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $data_;
 $2 = $size_;
 $3 = $0;
 HEAP32[$3>>2] = 0;
 $4 = ((($3)) + 4|0);
 $5 = $2;
 HEAP32[$4>>2] = $5;
 $6 = $1;
 $7 = ($6|0)!=(0|0);
 if (!($7)) {
  STACKTOP = sp;return;
 }
 $8 = ((($3)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) + 1)|0;
 $11 = (__Znaj($10)|0);
 HEAP32[$3>>2] = $11;
 $12 = HEAP32[$3>>2]|0;
 $13 = ((($3)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + 1)|0;
 _memset(($12|0),0,($15|0))|0;
 $16 = HEAP32[$3>>2]|0;
 $17 = $1;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 _memcpy(($16|0),($17|0),($19|0))|0;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEEC2EjRKc($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $__a$i = 0, $__annotator$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $8 = sp;
 $13 = sp + 141|0;
 $__annotator$i = sp + 140|0;
 $24 = sp + 44|0;
 $27 = sp + 32|0;
 $30 = $this;
 $31 = $__n;
 $32 = $__x;
 $35 = $30;
 $29 = $35;
 $36 = $29;
 $28 = $36;
 HEAP32[$36>>2] = 0;
 $37 = ((($36)) + 4|0);
 HEAP32[$37>>2] = 0;
 $38 = ((($36)) + 8|0);
 $26 = $38;
 HEAP32[$27>>2] = 0;
 $39 = $26;
 $25 = $27;
 $40 = $25;
 $41 = HEAP32[$40>>2]|0;
 $23 = $39;
 HEAP32[$24>>2] = $41;
 $42 = $23;
 $22 = $42;
 $21 = $24;
 $43 = $21;
 $44 = HEAP32[$43>>2]|0;
 HEAP32[$42>>2] = $44;
 $45 = $31;
 $46 = ($45>>>0)>(0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = $31;
 __THREW__ = 0;
 invoke_vii(58,($35|0),($47|0));
 $48 = __THREW__; __THREW__ = 0;
 $49 = $48&1;
 if ($49) {
  $81 = ___cxa_find_matching_catch_2()|0;
  $82 = tempRet0;
  $33 = $81;
  $34 = $82;
  __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($35);
  $83 = $33;
  $84 = $34;
  ___resumeException($83|0);
  // unreachable;
 }
 $50 = $31;
 $51 = $32;
 $18 = $35;
 $19 = $50;
 $20 = $51;
 $52 = $18;
 $17 = $52;
 $53 = $17;
 $54 = ((($53)) + 8|0);
 $16 = $54;
 $55 = $16;
 $15 = $55;
 $56 = $15;
 $__a$i = $56;
 while(1) {
  __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$52,1);
  $57 = $__a$i;
  $58 = ((($52)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $14 = $59;
  $60 = $14;
  $61 = $20;
  $10 = $57;
  $11 = $60;
  $12 = $61;
  $62 = $10;
  $63 = $11;
  $64 = $12;
  $9 = $64;
  $65 = $9;
  ;HEAP8[$8>>0]=HEAP8[$13>>0]|0;
  $5 = $62;
  $6 = $63;
  $7 = $65;
  $66 = $5;
  $67 = $6;
  $68 = $7;
  $4 = $68;
  $69 = $4;
  $1 = $66;
  $2 = $67;
  $3 = $69;
  $70 = $2;
  $71 = $3;
  $0 = $71;
  $72 = $0;
  $73 = HEAP8[$72>>0]|0;
  HEAP8[$70>>0] = $73;
  $74 = ((($52)) + 4|0);
  $75 = HEAP32[$74>>2]|0;
  $76 = ((($75)) + 1|0);
  HEAP32[$74>>2] = $76;
  $77 = $19;
  $78 = (($77) + -1)|0;
  $19 = $78;
  __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
  $79 = $19;
  $80 = ($79>>>0)>(0);
  if (!($80)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj($this,$__n) {
 $this = $this|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $12 = $this;
 $13 = $__n;
 $14 = $12;
 $15 = $13;
 $16 = (__ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($14)|0);
 $17 = ($15>>>0)>($16>>>0);
 if ($17) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($14);
  // unreachable;
 } else {
  $11 = $14;
  $18 = $11;
  $19 = ((($18)) + 8|0);
  $10 = $19;
  $20 = $10;
  $9 = $20;
  $21 = $9;
  $22 = $13;
  $7 = $21;
  $8 = $22;
  $23 = $7;
  $24 = $8;
  $4 = $23;
  $5 = $24;
  $6 = 0;
  $25 = $5;
  $3 = $25;
  $26 = $3;
  $27 = (__Znwj($26)|0);
  $28 = ((($14)) + 4|0);
  HEAP32[$28>>2] = $27;
  HEAP32[$14>>2] = $27;
  $29 = HEAP32[$14>>2]|0;
  $30 = $13;
  $31 = (($29) + ($30)|0);
  $2 = $14;
  $32 = $2;
  $33 = ((($32)) + 8|0);
  $1 = $33;
  $34 = $1;
  $0 = $34;
  $35 = $0;
  HEAP32[$35>>2] = $31;
  __ZNKSt3__16vectorIcNS_9allocatorIcEEE14__annotate_newEj($14,0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__113__vector_baseIcNS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIcNS_9allocatorIcEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIcNS_9allocatorIcEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIcNS_9allocatorIcEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZL13GetBundleNameRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPci($bundleName,$data,$size) {
 $bundleName = $bundleName|0;
 $data = $data|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a$i$i$i = 0, $__i$i$i$i = 0, $i = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp + 16|0;
 $27 = sp + 8|0;
 $30 = sp + 320|0;
 $57 = sp + 319|0;
 $58 = sp + 318|0;
 $61 = sp;
 $64 = sp + 317|0;
 $71 = sp + 316|0;
 $75 = sp + 20|0;
 $72 = $bundleName;
 $73 = $data;
 $74 = $size;
 $i = 0;
 while(1) {
  $76 = $i;
  $77 = $74;
  $78 = ($76|0)<($77|0);
  if (!($78)) {
   label = 17;
   break;
  }
  $79 = $i;
  $80 = $73;
  $81 = (($80) + ($79)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)==(124);
  if ($84) {
   break;
  }
  $181 = $i;
  $182 = (($181) + 1)|0;
  $i = $182;
 }
 if ((label|0) == 17) {
  $$expand_i1_val2 = 0;
  HEAP8[$71>>0] = $$expand_i1_val2;
  $$pre_trunc = HEAP8[$71>>0]|0;
  $183 = $$pre_trunc&1;
  STACKTOP = sp;return ($183|0);
 }
 $85 = $72;
 $86 = $73;
 $87 = $i;
 $68 = $75;
 $69 = $86;
 $70 = $87;
 $88 = $68;
 $67 = $88;
 $89 = $67;
 $66 = $89;
 $90 = $66;
 $65 = $90;
 $91 = $69;
 $92 = $70;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($88,$91,$92);
 $62 = $85;
 $63 = $75;
 $93 = $62;
 $94 = $63;
 ;HEAP8[$61>>0]=HEAP8[$64>>0]|0;
 $59 = $93;
 $60 = $94;
 $95 = $59;
 $56 = $95;
 $96 = $56;
 $55 = $96;
 $54 = $96;
 $97 = $54;
 $53 = $97;
 $98 = $53;
 $52 = $98;
 $99 = $52;
 $100 = HEAP8[$99>>0]|0;
 $101 = $100&255;
 $102 = $101 & 1;
 $103 = ($102|0)!=(0);
 if ($103) {
  $47 = $96;
  $104 = $47;
  $46 = $104;
  $105 = $46;
  $45 = $105;
  $106 = $45;
  $107 = ((($106)) + 8|0);
  $108 = HEAP32[$107>>2]|0;
  HEAP8[$57>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($108,$57);
  $38 = $96;
  $39 = 0;
  $109 = $38;
  $110 = $39;
  $37 = $109;
  $111 = $37;
  $36 = $111;
  $112 = $36;
  $113 = ((($112)) + 4|0);
  HEAP32[$113>>2] = $110;
 } else {
  $44 = $96;
  $114 = $44;
  $43 = $114;
  $115 = $43;
  $42 = $115;
  $116 = $42;
  $117 = ((($116)) + 1|0);
  $41 = $117;
  $118 = $41;
  $40 = $118;
  $119 = $40;
  HEAP8[$58>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($119,$58);
  $50 = $96;
  $51 = 0;
  $120 = $50;
  $121 = $51;
  $122 = $121 << 1;
  $123 = $122&255;
  $49 = $120;
  $124 = $49;
  $48 = $124;
  $125 = $48;
  HEAP8[$125>>0] = $123;
 }
 $35 = $95;
 $126 = $35;
 __THREW__ = 0;
 invoke_vii(53,($126|0),0);
 $127 = __THREW__; __THREW__ = 0;
 $128 = $127&1;
 if ($128) {
  $129 = ___cxa_find_matching_catch_3(0|0)|0;
  $130 = tempRet0;
  ___clang_call_terminate($129);
  // unreachable;
 }
 $34 = $95;
 $131 = $34;
 $33 = $131;
 $132 = $33;
 $133 = $60;
 $32 = $133;
 $134 = $32;
 $31 = $134;
 $135 = $31;
 ;HEAP32[$132>>2]=HEAP32[$135>>2]|0;HEAP32[$132+4>>2]=HEAP32[$135+4>>2]|0;HEAP32[$132+8>>2]=HEAP32[$135+8>>2]|0;
 $136 = $60;
 $28 = $95;
 $29 = $136;
 $137 = $28;
 $138 = $29;
 ;HEAP8[$27>>0]=HEAP8[$30>>0]|0;
 $25 = $137;
 $26 = $138;
 $139 = $25;
 $24 = $139;
 $140 = $24;
 $23 = $140;
 $141 = $23;
 $22 = $141;
 $142 = $26;
 $20 = $142;
 $143 = $20;
 $19 = $143;
 $144 = $19;
 $18 = $144;
 $145 = $18;
 $21 = $145;
 $146 = $60;
 $17 = $146;
 $147 = $17;
 $16 = $147;
 $148 = $16;
 $15 = $148;
 $149 = $15;
 $__a$i$i$i = $149;
 $__i$i$i$i = 0;
 while(1) {
  $150 = $__i$i$i$i;
  $151 = ($150>>>0)<(3);
  if (!($151)) {
   break;
  }
  $152 = $__i$i$i$i;
  $153 = $__a$i$i$i;
  $154 = (($153) + ($152<<2)|0);
  HEAP32[$154>>2] = 0;
  $155 = $__i$i$i$i;
  $156 = (($155) + 1)|0;
  $__i$i$i$i = $156;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($75);
 $157 = $72;
 $14 = $157;
 $158 = $14;
 $13 = $158;
 $159 = $13;
 $12 = $159;
 $160 = $12;
 $11 = $160;
 $161 = $11;
 $10 = $161;
 $162 = $10;
 $9 = $162;
 $163 = $9;
 $164 = HEAP8[$163>>0]|0;
 $165 = $164&255;
 $166 = $165 & 1;
 $167 = ($166|0)!=(0);
 if ($167) {
  $3 = $160;
  $168 = $3;
  $2 = $168;
  $169 = $2;
  $1 = $169;
  $170 = $1;
  $171 = ((($170)) + 8|0);
  $172 = HEAP32[$171>>2]|0;
  $179 = $172;
 } else {
  $8 = $160;
  $173 = $8;
  $7 = $173;
  $174 = $7;
  $6 = $174;
  $175 = $6;
  $176 = ((($175)) + 1|0);
  $5 = $176;
  $177 = $5;
  $4 = $177;
  $178 = $4;
  $179 = $178;
 }
 $0 = $179;
 $180 = $0;
 HEAP32[$vararg_buffer>>2] = $180;
 (_printf(1587,$vararg_buffer)|0);
 $$expand_i1_val = 1;
 HEAP8[$71>>0] = $$expand_i1_val;
 $$pre_trunc = HEAP8[$71>>0]|0;
 $183 = $$pre_trunc&1;
 STACKTOP = sp;return ($183|0);
}
function __ZL8FailOpenRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($path) {
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $m = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $m = sp + 4|0;
 $15 = $path;
 HEAP32[$m>>2] = 0;
 $16 = $15;
 $14 = $16;
 $17 = $14;
 $13 = $17;
 $18 = $13;
 $12 = $18;
 $19 = $12;
 $11 = $19;
 $20 = $11;
 $10 = $20;
 $21 = $10;
 $9 = $21;
 $22 = $9;
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 & 1;
 $26 = ($25|0)!=(0);
 if ($26) {
  $3 = $19;
  $27 = $3;
  $2 = $27;
  $28 = $2;
  $1 = $28;
  $29 = $1;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $38 = $31;
 } else {
  $8 = $19;
  $32 = $8;
  $7 = $32;
  $33 = $7;
  $6 = $33;
  $34 = $6;
  $35 = ((($34)) + 1|0);
  $5 = $35;
  $36 = $5;
  $4 = $36;
  $37 = $4;
  $38 = $37;
 }
 $0 = $38;
 $39 = $0;
 HEAP32[$vararg_buffer>>2] = $39;
 (_printf(1610,$vararg_buffer)|0);
 _emscripten_worker_respond(($m|0),4);
 STACKTOP = sp;return;
}
function __ZL15SendFile_OnLoadPci($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $__tmp$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $24 = sp + 20|0;
 $27 = sp + 132|0;
 $28 = sp;
 $22 = $path;
 $23 = $size;
 (_puts(1633)|0);
 $29 = (__Znwj(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$27>>0] = $$expand_i1_val;
 $30 = $22;
 __THREW__ = 0;
 invoke_vii(45,($24|0),($30|0));
 $31 = __THREW__; __THREW__ = 0;
 $32 = $31&1;
 do {
  if ($32) {
   $58 = ___cxa_find_matching_catch_2()|0;
   $59 = tempRet0;
   $25 = $58;
   $26 = $59;
  } else {
   __THREW__ = 0;
   invoke_vii(47,($29|0),($24|0));
   $33 = __THREW__; __THREW__ = 0;
   $34 = $33&1;
   if ($34) {
    $60 = ___cxa_find_matching_catch_2()|0;
    $61 = tempRet0;
    $25 = $60;
    $26 = $61;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24);
    break;
   }
   $$expand_i1_val2 = 0;
   HEAP8[$27>>0] = $$expand_i1_val2;
   $20 = 7564;
   $21 = $29;
   $35 = $20;
   $19 = $35;
   $36 = $19;
   $18 = $36;
   $37 = $18;
   $38 = HEAP32[$37>>2]|0;
   $__tmp$i = $38;
   $39 = $21;
   $15 = $35;
   $40 = $15;
   $14 = $40;
   $41 = $14;
   HEAP32[$41>>2] = $39;
   $42 = $__tmp$i;
   $43 = ($42|0)!=(0|0);
   if ($43) {
    $13 = $35;
    $44 = $13;
    $12 = $44;
    $45 = $12;
    $46 = $__tmp$i;
    $16 = $45;
    $17 = $46;
    $47 = $17;
    $48 = ($47|0)==(0|0);
    if (!($48)) {
     __ZN6file_tD2Ev($47);
     __ZdlPv($47);
    }
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($24);
   $11 = 7564;
   $49 = $11;
   $10 = $49;
   $50 = $10;
   $9 = $50;
   $51 = $9;
   $52 = HEAP32[$51>>2]|0;
   $53 = (__ZNK6file_tcvbEv($52)|0);
   if ($53) {
    $8 = 7564;
    $54 = $8;
    $7 = $54;
    $55 = $7;
    $6 = $55;
    $56 = $6;
    $57 = HEAP32[$56>>2]|0;
    __ZNK6file_t4SendEv($57);
    STACKTOP = sp;return;
   }
   $63 = $22;
   $64 = $23;
   $3 = $28;
   $4 = $63;
   $5 = $64;
   $65 = $3;
   $2 = $65;
   $66 = $2;
   $1 = $66;
   $67 = $1;
   $0 = $67;
   $68 = $4;
   $69 = $5;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($65,$68,$69);
   __THREW__ = 0;
   invoke_vi(37,($28|0));
   $70 = __THREW__; __THREW__ = 0;
   $71 = $70&1;
   if ($71) {
    $72 = ___cxa_find_matching_catch_2()|0;
    $73 = tempRet0;
    $25 = $72;
    $26 = $73;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
    $74 = $25;
    $75 = $26;
    ___resumeException($74|0);
    // unreachable;
   } else {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($28);
    STACKTOP = sp;return;
   }
  }
 } while(0);
 $$pre_trunc = HEAP8[$27>>0]|0;
 $62 = $$pre_trunc&1;
 if (!($62)) {
  $74 = $25;
  $75 = $26;
  ___resumeException($74|0);
  // unreachable;
 }
 __ZdlPv($29);
 $74 = $25;
 $75 = $26;
 ___resumeException($74|0);
 // unreachable;
}
function __ZNSt3__111char_traitsIcE6assignERcRKc($__c1,$__c2) {
 $__c1 = $__c1|0;
 $__c2 = $__c2|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__c1;
 $1 = $__c2;
 $2 = $1;
 $3 = HEAP8[$2>>0]|0;
 $4 = $0;
 HEAP8[$4>>0] = $3;
 STACKTOP = sp;return;
}
function __ZL8FullPathPKc($agg$result,$path) {
 $agg$result = $agg$result|0;
 $path = $path|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $root = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $root = sp + 12|0;
 $23 = sp + 108|0;
 $20 = $path;
 $18 = $root;
 $19 = 1658;
 $24 = $18;
 $17 = $24;
 $25 = $17;
 $16 = $25;
 $26 = $16;
 $15 = $26;
 $27 = $19;
 $28 = $19;
 $29 = (__ZNSt3__111char_traitsIcE6lengthEPKc($28)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($24,$27,$29);
 $30 = $20;
 $31 = HEAP8[$30>>0]|0;
 $32 = $31 << 24 >> 24;
 $33 = ($32|0)!=(47);
 if ($33) {
  __THREW__ = 0;
  (invoke_iiii(59,($root|0),1,47)|0);
  $34 = __THREW__; __THREW__ = 0;
  $35 = $34&1;
  if (!($35)) {
   label = 4;
  }
 } else {
  label = 4;
 }
 if ((label|0) == 4) {
  $$expand_i1_val = 0;
  HEAP8[$23>>0] = $$expand_i1_val;
  __THREW__ = 0;
  invoke_vii(60,($agg$result|0),($root|0));
  $38 = __THREW__; __THREW__ = 0;
  $39 = $38&1;
  if (!($39)) {
   $40 = $20;
   __THREW__ = 0;
   (invoke_iii(61,($agg$result|0),($40|0))|0);
   $41 = __THREW__; __THREW__ = 0;
   $42 = $41&1;
   if (!($42)) {
    $14 = $agg$result;
    $43 = $14;
    $13 = $43;
    $44 = $13;
    $12 = $44;
    $45 = $12;
    $11 = $45;
    $46 = $11;
    $10 = $46;
    $47 = $10;
    $9 = $47;
    $48 = $9;
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = $50 & 1;
    $52 = ($51|0)!=(0);
    if ($52) {
     $3 = $45;
     $53 = $3;
     $2 = $53;
     $54 = $2;
     $1 = $54;
     $55 = $1;
     $56 = ((($55)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $64 = $57;
    } else {
     $8 = $45;
     $58 = $8;
     $7 = $58;
     $59 = $7;
     $6 = $59;
     $60 = $6;
     $61 = ((($60)) + 1|0);
     $5 = $61;
     $62 = $5;
     $4 = $62;
     $63 = $4;
     $64 = $63;
    }
    $0 = $64;
    $65 = $0;
    __THREW__ = 0;
    HEAP32[$vararg_buffer>>2] = $65;
    (invoke_iii(43,(1667|0),($vararg_buffer|0))|0);
    $66 = __THREW__; __THREW__ = 0;
    $67 = $66&1;
    if (!($67)) {
     $$expand_i1_val2 = 1;
     HEAP8[$23>>0] = $$expand_i1_val2;
     $$pre_trunc = HEAP8[$23>>0]|0;
     $68 = $$pre_trunc&1;
     if ($68) {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($root);
      STACKTOP = sp;return;
     }
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($root);
     STACKTOP = sp;return;
    }
   }
   $69 = ___cxa_find_matching_catch_2()|0;
   $70 = tempRet0;
   $21 = $69;
   $22 = $70;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($root);
   $71 = $21;
   $72 = $22;
   ___resumeException($71|0);
   // unreachable;
  }
 }
 $36 = ___cxa_find_matching_catch_2()|0;
 $37 = tempRet0;
 $21 = $36;
 $22 = $37;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($root);
 $71 = $21;
 $72 = $22;
 ___resumeException($71|0);
 // unreachable;
}
function __ZN6file_tC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = sp + 40|0;
 $6 = sp + 28|0;
 $10 = $this;
 $11 = $path;
 $14 = $10;
 HEAP32[$14>>2] = 0;
 $15 = ((($14)) + 4|0);
 $9 = $15;
 $16 = $9;
 $8 = $16;
 $17 = $8;
 $7 = $17;
 HEAP32[$17>>2] = 0;
 $18 = ((($17)) + 4|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($17)) + 8|0);
 $5 = $19;
 HEAP32[$6>>2] = 0;
 $20 = $5;
 $4 = $6;
 $21 = $4;
 $22 = HEAP32[$21>>2]|0;
 $2 = $20;
 HEAP32[$3>>2] = $22;
 $23 = $2;
 $1 = $23;
 $0 = $3;
 $24 = $0;
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $25;
 $26 = $11;
 __THREW__ = 0;
 invoke_vii(54,($14|0),($26|0));
 $27 = __THREW__; __THREW__ = 0;
 $28 = $27&1;
 if ($28) {
  $29 = ___cxa_find_matching_catch_2()|0;
  $30 = tempRet0;
  $12 = $29;
  $13 = $30;
  __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($15);
  $31 = $12;
  $32 = $13;
  ___resumeException($31|0);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNK6file_t4SendEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $3 = $this;
 $4 = $3;
 $5 = ((($4)) + 4|0);
 $1 = $5;
 $2 = 0;
 $6 = $1;
 $7 = $2;
 $8 = HEAP32[$6>>2]|0;
 $9 = (($8) + ($7)|0);
 $10 = ((($4)) + 4|0);
 $0 = $10;
 $11 = $0;
 $12 = ((($11)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$11>>2]|0;
 $15 = $13;
 $16 = $14;
 $17 = (($15) - ($16))|0;
 _emscripten_worker_respond(($9|0),($17|0));
 STACKTOP = sp;return;
}
function __ZN6file_tD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if (!($5)) {
  $13 = ((($3)) + 4|0);
  __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($13);
  STACKTOP = sp;return;
 }
 $6 = HEAP32[$3>>2]|0;
 __THREW__ = 0;
 (invoke_ii(62,($6|0))|0);
 $7 = __THREW__; __THREW__ = 0;
 $8 = $7&1;
 if ($8) {
  $9 = ___cxa_find_matching_catch_3(0|0)|0;
  $10 = tempRet0;
  $1 = $9;
  $2 = $10;
  $11 = ((($3)) + 4|0);
  __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($11);
  $12 = $1;
  ___clang_call_terminate($12);
  // unreachable;
 } else {
  $13 = ((($3)) + 4|0);
  __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($13);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($1);
 STACKTOP = sp;return;
}
function __ZNSt3__113__vector_baseIhNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp;
 $21 = sp + 116|0;
 $29 = $this;
 $30 = $29;
 $31 = HEAP32[$30>>2]|0;
 $32 = ($31|0)!=(0|0);
 if (!($32)) {
  STACKTOP = sp;return;
 }
 $28 = $30;
 $33 = $28;
 $34 = HEAP32[$33>>2]|0;
 $26 = $33;
 $27 = $34;
 $35 = $26;
 while(1) {
  $36 = $27;
  $37 = ((($35)) + 4|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($36|0)!=($38|0);
  if (!($39)) {
   break;
  }
  $25 = $35;
  $40 = $25;
  $41 = ((($40)) + 8|0);
  $24 = $41;
  $42 = $24;
  $23 = $42;
  $43 = $23;
  $44 = ((($35)) + 4|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ((($45)) + -1|0);
  HEAP32[$44>>2] = $46;
  $22 = $46;
  $47 = $22;
  $19 = $43;
  $20 = $47;
  $48 = $19;
  $49 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $48;
  $17 = $49;
  $50 = $16;
  $51 = $17;
  $14 = $50;
  $15 = $51;
 }
 $6 = $30;
 $52 = $6;
 $53 = ((($52)) + 8|0);
 $5 = $53;
 $54 = $5;
 $4 = $54;
 $55 = $4;
 $56 = HEAP32[$30>>2]|0;
 $3 = $30;
 $57 = $3;
 $2 = $57;
 $58 = $2;
 $59 = ((($58)) + 8|0);
 $1 = $59;
 $60 = $1;
 $0 = $60;
 $61 = $0;
 $62 = HEAP32[$61>>2]|0;
 $63 = HEAP32[$57>>2]|0;
 $64 = $62;
 $65 = $63;
 $66 = (($64) - ($65))|0;
 $11 = $55;
 $12 = $56;
 $13 = $66;
 $67 = $11;
 $68 = $12;
 $69 = $13;
 $8 = $67;
 $9 = $68;
 $10 = $69;
 $70 = $9;
 $7 = $70;
 $71 = $7;
 __ZdlPv($71);
 STACKTOP = sp;return;
}
function __ZNSt3__111char_traitsIcE6lengthEPKc($__s) {
 $__s = $__s|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s;
 $1 = $0;
 $2 = (_strlen($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZN6file_t4OpenERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this,$path) {
 $this = $this|0;
 $path = $path|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $30 = $this;
 $31 = $path;
 $32 = $30;
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = HEAP32[$32>>2]|0;
  (_fclose($35)|0);
 }
 $36 = $31;
 $29 = $36;
 $37 = $29;
 $28 = $37;
 $38 = $28;
 $27 = $38;
 $39 = $27;
 $26 = $39;
 $40 = $26;
 $25 = $40;
 $41 = $25;
 $24 = $41;
 $42 = $24;
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 & 1;
 $46 = ($45|0)!=(0);
 if ($46) {
  $18 = $39;
  $47 = $18;
  $17 = $47;
  $48 = $17;
  $16 = $48;
  $49 = $16;
  $50 = ((($49)) + 8|0);
  $51 = HEAP32[$50>>2]|0;
  $58 = $51;
 } else {
  $23 = $39;
  $52 = $23;
  $22 = $52;
  $53 = $22;
  $21 = $53;
  $54 = $21;
  $55 = ((($54)) + 1|0);
  $20 = $55;
  $56 = $20;
  $19 = $56;
  $57 = $19;
  $58 = $57;
 }
 $15 = $58;
 $59 = $15;
 $60 = (_fopen($59,1983)|0);
 HEAP32[$32>>2] = $60;
 $61 = $31;
 $14 = $61;
 $62 = $14;
 $13 = $62;
 $63 = $13;
 $12 = $63;
 $64 = $12;
 $11 = $64;
 $65 = $11;
 $10 = $65;
 $66 = $10;
 $9 = $66;
 $67 = $9;
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $69 & 1;
 $71 = ($70|0)!=(0);
 if ($71) {
  $3 = $64;
  $72 = $3;
  $2 = $72;
  $73 = $2;
  $1 = $73;
  $74 = $1;
  $75 = ((($74)) + 8|0);
  $76 = HEAP32[$75>>2]|0;
  $83 = $76;
  $0 = $83;
  $84 = $0;
  HEAP32[$vararg_buffer>>2] = $84;
  (_printf(1686,$vararg_buffer)|0);
  STACKTOP = sp;return;
 } else {
  $8 = $64;
  $77 = $8;
  $7 = $77;
  $78 = $7;
  $6 = $78;
  $79 = $6;
  $80 = ((($79)) + 1|0);
  $5 = $80;
  $81 = $5;
  $4 = $81;
  $82 = $4;
  $83 = $82;
  $0 = $83;
  $84 = $0;
  HEAP32[$vararg_buffer>>2] = $84;
  (_printf(1686,$vararg_buffer)|0);
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEjRKh($this,$__sz,$__x) {
 $this = $this|0;
 $__sz = $__sz|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $__cs = 0, $__old_size$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $4 = sp;
 $7 = sp + 88|0;
 $18 = $this;
 $19 = $__sz;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = HEAP32[$22>>2]|0;
 $26 = $24;
 $27 = $25;
 $28 = (($26) - ($27))|0;
 $__cs = $28;
 $29 = $__cs;
 $30 = $19;
 $31 = ($29>>>0)<($30>>>0);
 if ($31) {
  $32 = $19;
  $33 = $__cs;
  $34 = (($32) - ($33))|0;
  $35 = $20;
  __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($21,$34,$35);
  STACKTOP = sp;return;
 }
 $36 = $__cs;
 $37 = $19;
 $38 = ($36>>>0)>($37>>>0);
 if (!($38)) {
  STACKTOP = sp;return;
 }
 $39 = HEAP32[$21>>2]|0;
 $40 = $19;
 $41 = (($39) + ($40)|0);
 $15 = $21;
 $16 = $41;
 $42 = $15;
 $14 = $42;
 $43 = $14;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $__old_size$i = $49;
 $50 = $16;
 $12 = $42;
 $13 = $50;
 $51 = $12;
 while(1) {
  $52 = $13;
  $53 = ((($51)) + 4|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = ($52|0)!=($54|0);
  if (!($55)) {
   break;
  }
  $11 = $51;
  $56 = $11;
  $57 = ((($56)) + 8|0);
  $10 = $57;
  $58 = $10;
  $9 = $58;
  $59 = $9;
  $60 = ((($51)) + 4|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ((($61)) + -1|0);
  HEAP32[$60>>2] = $62;
  $8 = $62;
  $63 = $8;
  $5 = $59;
  $6 = $63;
  $64 = $5;
  $65 = $6;
  ;HEAP8[$4>>0]=HEAP8[$7>>0]|0;
  $2 = $64;
  $3 = $65;
  $66 = $2;
  $67 = $3;
  $0 = $66;
  $1 = $67;
 }
 $68 = $__old_size$i;
 __THREW__ = 0;
 invoke_vii(40,($42|0),($68|0));
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 if ($70) {
  $71 = ___cxa_find_matching_catch_3(0|0)|0;
  $72 = tempRet0;
  ___clang_call_terminate($71);
  // unreachable;
 } else {
  STACKTOP = sp;return;
 }
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE8__appendEjRKh($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__a = 0, $__a$i = 0, $__annotator$i = 0, $__cap$i = 0, $__ms$i = 0, $__v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $6 = sp + 8|0;
 $9 = sp + 242|0;
 $17 = sp + 176|0;
 $18 = sp + 164|0;
 $31 = sp;
 $36 = sp + 241|0;
 $__annotator$i = sp + 240|0;
 $__v = sp + 20|0;
 $47 = $this;
 $48 = $__n;
 $49 = $__x;
 $52 = $47;
 $46 = $52;
 $53 = $46;
 $54 = ((($53)) + 8|0);
 $45 = $54;
 $55 = $45;
 $44 = $55;
 $56 = $44;
 $57 = HEAP32[$56>>2]|0;
 $58 = ((($52)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $57;
 $61 = $59;
 $62 = (($60) - ($61))|0;
 $63 = $48;
 $64 = ($62>>>0)>=($63>>>0);
 if ($64) {
  $65 = $48;
  $66 = $49;
  $41 = $52;
  $42 = $65;
  $43 = $66;
  $67 = $41;
  $40 = $67;
  $68 = $40;
  $69 = ((($68)) + 8|0);
  $39 = $69;
  $70 = $39;
  $38 = $70;
  $71 = $38;
  $__a$i = $71;
  while(1) {
   __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($__annotator$i,$67,1);
   $72 = $__a$i;
   $73 = ((($67)) + 4|0);
   $74 = HEAP32[$73>>2]|0;
   $37 = $74;
   $75 = $37;
   $76 = $43;
   $33 = $72;
   $34 = $75;
   $35 = $76;
   $77 = $33;
   $78 = $34;
   $79 = $35;
   $32 = $79;
   $80 = $32;
   ;HEAP8[$31>>0]=HEAP8[$36>>0]|0;
   $28 = $77;
   $29 = $78;
   $30 = $80;
   $81 = $28;
   $82 = $29;
   $83 = $30;
   $27 = $83;
   $84 = $27;
   $24 = $81;
   $25 = $82;
   $26 = $84;
   $85 = $25;
   $86 = $26;
   $23 = $86;
   $87 = $23;
   $88 = HEAP8[$87>>0]|0;
   HEAP8[$85>>0] = $88;
   $89 = ((($67)) + 4|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = ((($90)) + 1|0);
   HEAP32[$89>>2] = $91;
   $92 = $42;
   $93 = (($92) + -1)|0;
   $42 = $93;
   __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($__annotator$i);
   $94 = $42;
   $95 = ($94>>>0)>(0);
   if (!($95)) {
    break;
   }
  }
  STACKTOP = sp;return;
 }
 $22 = $52;
 $96 = $22;
 $97 = ((($96)) + 8|0);
 $21 = $97;
 $98 = $21;
 $20 = $98;
 $99 = $20;
 $__a = $99;
 $19 = $52;
 $100 = $19;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = HEAP32[$100>>2]|0;
 $104 = $102;
 $105 = $103;
 $106 = (($104) - ($105))|0;
 $107 = $48;
 $108 = (($106) + ($107))|0;
 $16 = $52;
 HEAP32[$17>>2] = $108;
 $109 = $16;
 $110 = (__ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($109)|0);
 $__ms$i = $110;
 $111 = HEAP32[$17>>2]|0;
 $112 = $__ms$i;
 $113 = ($111>>>0)>($112>>>0);
 if ($113) {
  __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($109);
  // unreachable;
 }
 $14 = $109;
 $114 = $14;
 $13 = $114;
 $115 = $13;
 $12 = $115;
 $116 = $12;
 $117 = ((($116)) + 8|0);
 $11 = $117;
 $118 = $11;
 $10 = $118;
 $119 = $10;
 $120 = HEAP32[$119>>2]|0;
 $121 = HEAP32[$115>>2]|0;
 $122 = $120;
 $123 = $121;
 $124 = (($122) - ($123))|0;
 $__cap$i = $124;
 $125 = $__cap$i;
 $126 = $__ms$i;
 $127 = (($126>>>0) / 2)&-1;
 $128 = ($125>>>0)>=($127>>>0);
 if ($128) {
  $129 = $__ms$i;
  $15 = $129;
 } else {
  $130 = $__cap$i;
  $131 = $130<<1;
  HEAP32[$18>>2] = $131;
  $7 = $18;
  $8 = $17;
  $132 = $7;
  $133 = $8;
  ;HEAP8[$6>>0]=HEAP8[$9>>0]|0;
  $4 = $132;
  $5 = $133;
  $134 = $4;
  $135 = $5;
  $1 = $6;
  $2 = $134;
  $3 = $135;
  $136 = $2;
  $137 = HEAP32[$136>>2]|0;
  $138 = $3;
  $139 = HEAP32[$138>>2]|0;
  $140 = ($137>>>0)<($139>>>0);
  $141 = $5;
  $142 = $4;
  $143 = $140 ? $141 : $142;
  $144 = HEAP32[$143>>2]|0;
  $15 = $144;
 }
 $145 = $15;
 $0 = $52;
 $146 = $0;
 $147 = ((($146)) + 4|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = HEAP32[$146>>2]|0;
 $150 = $148;
 $151 = $149;
 $152 = (($150) - ($151))|0;
 $153 = $__a;
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($__v,$145,$152,$153);
 $154 = $48;
 $155 = $49;
 __THREW__ = 0;
 invoke_viii(63,($__v|0),($154|0),($155|0));
 $156 = __THREW__; __THREW__ = 0;
 $157 = $156&1;
 if ($157) {
  $160 = ___cxa_find_matching_catch_2()|0;
  $161 = tempRet0;
  $50 = $160;
  $51 = $161;
  __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
  $162 = $50;
  $163 = $51;
  ___resumeException($162|0);
  // unreachable;
 }
 __THREW__ = 0;
 invoke_vii(64,($52|0),($__v|0));
 $158 = __THREW__; __THREW__ = 0;
 $159 = $158&1;
 if ($159) {
  $160 = ___cxa_find_matching_catch_2()|0;
  $161 = tempRet0;
  $50 = $160;
  $51 = $161;
  __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
  $162 = $50;
  $163 = $51;
  ___resumeException($162|0);
  // unreachable;
 }
 __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($__v);
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEEC2EjjS3_($this,$__cap,$__start,$__a) {
 $this = $this|0;
 $__cap = $__cap|0;
 $__start = $__start|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $16 = sp + 36|0;
 $20 = sp + 20|0;
 $22 = $this;
 $23 = $__cap;
 $24 = $__start;
 $25 = $__a;
 $26 = $22;
 $27 = ((($26)) + 12|0);
 $28 = $25;
 $19 = $27;
 HEAP32[$20>>2] = 0;
 $21 = $28;
 $29 = $19;
 $18 = $20;
 $30 = $18;
 $31 = HEAP32[$30>>2]|0;
 $32 = $21;
 $12 = $32;
 $33 = $12;
 $15 = $29;
 HEAP32[$16>>2] = $31;
 $17 = $33;
 $34 = $15;
 $14 = $16;
 $35 = $14;
 $36 = HEAP32[$35>>2]|0;
 HEAP32[$34>>2] = $36;
 $37 = ((($34)) + 4|0);
 $38 = $17;
 $13 = $38;
 $39 = $13;
 HEAP32[$37>>2] = $39;
 $40 = $23;
 $41 = ($40|0)!=(0);
 if ($41) {
  $2 = $26;
  $42 = $2;
  $43 = ((($42)) + 12|0);
  $1 = $43;
  $44 = $1;
  $0 = $44;
  $45 = $0;
  $46 = ((($45)) + 4|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = $23;
  $7 = $47;
  $8 = $48;
  $49 = $7;
  $50 = $8;
  $4 = $49;
  $5 = $50;
  $6 = 0;
  $51 = $5;
  $3 = $51;
  $52 = $3;
  $53 = (__Znwj($52)|0);
  $54 = $53;
 } else {
  $54 = 0;
 }
 HEAP32[$26>>2] = $54;
 $55 = HEAP32[$26>>2]|0;
 $56 = $24;
 $57 = (($55) + ($56)|0);
 $58 = ((($26)) + 8|0);
 HEAP32[$58>>2] = $57;
 $59 = ((($26)) + 4|0);
 HEAP32[$59>>2] = $57;
 $60 = HEAP32[$26>>2]|0;
 $61 = $23;
 $62 = (($60) + ($61)|0);
 $11 = $26;
 $63 = $11;
 $64 = ((($63)) + 12|0);
 $10 = $64;
 $65 = $10;
 $9 = $65;
 $66 = $9;
 HEAP32[$66>>2] = $62;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh($this,$__n,$__x) {
 $this = $this|0;
 $__n = $__n|0;
 $__x = $__x|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = sp;
 $14 = sp + 84|0;
 $18 = $this;
 $19 = $__n;
 $20 = $__x;
 $21 = $18;
 $17 = $21;
 $22 = $17;
 $23 = ((($22)) + 12|0);
 $16 = $23;
 $24 = $16;
 $15 = $24;
 $25 = $15;
 $26 = ((($25)) + 4|0);
 $27 = HEAP32[$26>>2]|0;
 $__a = $27;
 while(1) {
  $28 = $__a;
  $29 = ((($21)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $0 = $30;
  $31 = $0;
  $32 = $20;
  $11 = $28;
  $12 = $31;
  $13 = $32;
  $33 = $11;
  $34 = $12;
  $35 = $13;
  $10 = $35;
  $36 = $10;
  ;HEAP8[$9>>0]=HEAP8[$14>>0]|0;
  $6 = $33;
  $7 = $34;
  $8 = $36;
  $37 = $6;
  $38 = $7;
  $39 = $8;
  $5 = $39;
  $40 = $5;
  $2 = $37;
  $3 = $38;
  $4 = $40;
  $41 = $3;
  $42 = $4;
  $1 = $42;
  $43 = $1;
  $44 = HEAP8[$43>>0]|0;
  HEAP8[$41>>0] = $44;
  $45 = ((($21)) + 8|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ((($46)) + 1|0);
  HEAP32[$45>>2] = $47;
  $48 = $19;
  $49 = (($48) + -1)|0;
  $19 = $49;
  $50 = $19;
  $51 = ($50>>>0)>(0);
  if (!($51)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE($this,$__v) {
 $this = $this|0;
 $__v = $__v|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $_Np$i = 0, $__t$i = 0, $__t$i1 = 0, $__t$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $__t$i2 = sp + 120|0;
 $__t$i1 = sp + 96|0;
 $__t$i = sp + 48|0;
 $30 = $this;
 $31 = $__v;
 $32 = $30;
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($32);
 $29 = $32;
 $33 = $29;
 $34 = ((($33)) + 8|0);
 $28 = $34;
 $35 = $28;
 $27 = $35;
 $36 = $27;
 $37 = HEAP32[$32>>2]|0;
 $38 = ((($32)) + 4|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $31;
 $41 = ((($40)) + 4|0);
 $22 = $36;
 $23 = $37;
 $24 = $39;
 $25 = $41;
 $42 = $24;
 $43 = $23;
 $44 = $42;
 $45 = $43;
 $46 = (($44) - ($45))|0;
 $_Np$i = $46;
 $47 = $_Np$i;
 $48 = $25;
 $49 = HEAP32[$48>>2]|0;
 $50 = (0 - ($47))|0;
 $51 = (($49) + ($50)|0);
 HEAP32[$48>>2] = $51;
 $52 = $25;
 $53 = HEAP32[$52>>2]|0;
 $54 = $23;
 $55 = $_Np$i;
 _memcpy(($53|0),($54|0),($55|0))|0;
 $56 = $31;
 $57 = ((($56)) + 4|0);
 $3 = $32;
 $4 = $57;
 $58 = $3;
 $2 = $58;
 $59 = $2;
 $60 = HEAP32[$59>>2]|0;
 HEAP32[$__t$i2>>2] = $60;
 $61 = $4;
 $0 = $61;
 $62 = $0;
 $63 = HEAP32[$62>>2]|0;
 $64 = $3;
 HEAP32[$64>>2] = $63;
 $1 = $__t$i2;
 $65 = $1;
 $66 = HEAP32[$65>>2]|0;
 $67 = $4;
 HEAP32[$67>>2] = $66;
 $68 = ((($32)) + 4|0);
 $69 = $31;
 $70 = ((($69)) + 8|0);
 $8 = $68;
 $9 = $70;
 $71 = $8;
 $7 = $71;
 $72 = $7;
 $73 = HEAP32[$72>>2]|0;
 HEAP32[$__t$i1>>2] = $73;
 $74 = $9;
 $5 = $74;
 $75 = $5;
 $76 = HEAP32[$75>>2]|0;
 $77 = $8;
 HEAP32[$77>>2] = $76;
 $6 = $__t$i1;
 $78 = $6;
 $79 = HEAP32[$78>>2]|0;
 $80 = $9;
 HEAP32[$80>>2] = $79;
 $12 = $32;
 $81 = $12;
 $82 = ((($81)) + 8|0);
 $11 = $82;
 $83 = $11;
 $10 = $83;
 $84 = $10;
 $85 = $31;
 $15 = $85;
 $86 = $15;
 $87 = ((($86)) + 12|0);
 $14 = $87;
 $88 = $14;
 $13 = $88;
 $89 = $13;
 $19 = $84;
 $20 = $89;
 $90 = $19;
 $18 = $90;
 $91 = $18;
 $92 = HEAP32[$91>>2]|0;
 HEAP32[$__t$i>>2] = $92;
 $93 = $20;
 $16 = $93;
 $94 = $16;
 $95 = HEAP32[$94>>2]|0;
 $96 = $19;
 HEAP32[$96>>2] = $95;
 $17 = $__t$i;
 $97 = $17;
 $98 = HEAP32[$97>>2]|0;
 $99 = $20;
 HEAP32[$99>>2] = $98;
 $100 = $31;
 $101 = ((($100)) + 4|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $31;
 HEAP32[$103>>2] = $102;
 $21 = $32;
 $104 = $21;
 $105 = ((($104)) + 4|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = HEAP32[$104>>2]|0;
 $108 = $106;
 $109 = $107;
 $110 = (($108) - ($109))|0;
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($32,$110);
 $26 = $32;
 STACKTOP = sp;return;
}
function __ZNSt3__114__split_bufferIhRNS_9allocatorIhEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 133|0;
 $28 = sp;
 $31 = sp + 132|0;
 $33 = $this;
 $34 = $33;
 $32 = $34;
 $35 = $32;
 $36 = ((($35)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $29 = $35;
 $30 = $37;
 $38 = $29;
 $39 = $30;
 ;HEAP8[$28>>0]=HEAP8[$31>>0]|0;
 $26 = $38;
 $27 = $39;
 $40 = $26;
 while(1) {
  $41 = $27;
  $42 = ((($40)) + 8|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = ($41|0)!=($43|0);
  if (!($44)) {
   break;
  }
  $25 = $40;
  $45 = $25;
  $46 = ((($45)) + 12|0);
  $24 = $46;
  $47 = $24;
  $23 = $47;
  $48 = $23;
  $49 = ((($48)) + 4|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = ((($40)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ((($52)) + -1|0);
  HEAP32[$51>>2] = $53;
  $22 = $53;
  $54 = $22;
  $19 = $50;
  $20 = $54;
  $55 = $19;
  $56 = $20;
  ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
  $16 = $55;
  $17 = $56;
  $57 = $16;
  $58 = $17;
  $14 = $57;
  $15 = $58;
 }
 $59 = HEAP32[$34>>2]|0;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  STACKTOP = sp;return;
 }
 $13 = $34;
 $61 = $13;
 $62 = ((($61)) + 12|0);
 $12 = $62;
 $63 = $12;
 $11 = $63;
 $64 = $11;
 $65 = ((($64)) + 4|0);
 $66 = HEAP32[$65>>2]|0;
 $67 = HEAP32[$34>>2]|0;
 $3 = $34;
 $68 = $3;
 $2 = $68;
 $69 = $2;
 $70 = ((($69)) + 12|0);
 $1 = $70;
 $71 = $1;
 $0 = $71;
 $72 = $0;
 $73 = HEAP32[$72>>2]|0;
 $74 = HEAP32[$68>>2]|0;
 $75 = $73;
 $76 = $74;
 $77 = (($75) - ($76))|0;
 $8 = $66;
 $9 = $67;
 $10 = $77;
 $78 = $8;
 $79 = $9;
 $80 = $10;
 $5 = $78;
 $6 = $79;
 $7 = $80;
 $81 = $6;
 $4 = $81;
 $82 = $4;
 __ZdlPv($82);
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotatorC2ERKS3_j($this,$0,$__n) {
 $this = $this|0;
 $0 = $0|0;
 $__n = $__n|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $this;
 $2 = $0;
 $3 = $__n;
 STACKTOP = sp;return;
}
function __ZNSt3__16vectorIhNS_9allocatorIhEEE24__RAII_IncreaseAnnotator6__doneEv($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE8max_sizeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $5 = sp + 8|0;
 $8 = sp + 77|0;
 $11 = sp;
 $13 = sp + 76|0;
 $18 = sp + 16|0;
 $19 = sp + 12|0;
 $17 = $this;
 $20 = $17;
 $16 = $20;
 $21 = $16;
 $22 = ((($21)) + 8|0);
 $15 = $22;
 $23 = $15;
 $14 = $23;
 $24 = $14;
 $12 = $24;
 $25 = $12;
 ;HEAP8[$11>>0]=HEAP8[$13>>0]|0;
 $10 = $25;
 $26 = $10;
 $9 = $26;
 HEAP32[$18>>2] = -1;
 $27 = (4294967295 / 2)&-1;
 HEAP32[$19>>2] = $27;
 $6 = $18;
 $7 = $19;
 $28 = $6;
 $29 = $7;
 ;HEAP8[$5>>0]=HEAP8[$8>>0]|0;
 $3 = $28;
 $4 = $29;
 $30 = $4;
 $31 = $3;
 $0 = $5;
 $1 = $30;
 $2 = $31;
 $32 = $1;
 $33 = HEAP32[$32>>2]|0;
 $34 = $2;
 $35 = HEAP32[$34>>2]|0;
 $36 = ($33>>>0)<($35>>>0);
 $37 = $4;
 $38 = $3;
 $39 = $36 ? $37 : $38;
 $40 = HEAP32[$39>>2]|0;
 STACKTOP = sp;return ($40|0);
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_deleteEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $19 = $this;
 $20 = $19;
 $18 = $20;
 $21 = $18;
 $22 = HEAP32[$21>>2]|0;
 $17 = $22;
 $23 = $17;
 $16 = $20;
 $24 = $16;
 $25 = HEAP32[$24>>2]|0;
 $15 = $25;
 $26 = $15;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $7 = $20;
 $42 = $7;
 $43 = ((($42)) + 4|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = HEAP32[$42>>2]|0;
 $46 = $44;
 $47 = $45;
 $48 = (($46) - ($47))|0;
 $49 = (($41) + ($48)|0);
 $9 = $20;
 $50 = $9;
 $51 = HEAP32[$50>>2]|0;
 $8 = $51;
 $52 = $8;
 $14 = $20;
 $53 = $14;
 $13 = $53;
 $54 = $13;
 $12 = $54;
 $55 = $12;
 $56 = ((($55)) + 8|0);
 $11 = $56;
 $57 = $11;
 $10 = $57;
 $58 = $10;
 $59 = HEAP32[$58>>2]|0;
 $60 = HEAP32[$54>>2]|0;
 $61 = $59;
 $62 = $60;
 $63 = (($61) - ($62))|0;
 $64 = (($52) + ($63)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$49,$64);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE14__annotate_newEj($this,$__current_size) {
 $this = $this|0;
 $__current_size = $__current_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = $this;
 $19 = $__current_size;
 $20 = $18;
 $17 = $20;
 $21 = $17;
 $22 = HEAP32[$21>>2]|0;
 $16 = $22;
 $23 = $16;
 $15 = $20;
 $24 = $15;
 $25 = HEAP32[$24>>2]|0;
 $14 = $25;
 $26 = $14;
 $4 = $20;
 $27 = $4;
 $3 = $27;
 $28 = $3;
 $2 = $28;
 $29 = $2;
 $30 = ((($29)) + 8|0);
 $1 = $30;
 $31 = $1;
 $0 = $31;
 $32 = $0;
 $33 = HEAP32[$32>>2]|0;
 $34 = HEAP32[$28>>2]|0;
 $35 = $33;
 $36 = $34;
 $37 = (($35) - ($36))|0;
 $38 = (($26) + ($37)|0);
 $6 = $20;
 $39 = $6;
 $40 = HEAP32[$39>>2]|0;
 $5 = $40;
 $41 = $5;
 $11 = $20;
 $42 = $11;
 $10 = $42;
 $43 = $10;
 $9 = $43;
 $44 = $9;
 $45 = ((($44)) + 8|0);
 $8 = $45;
 $46 = $8;
 $7 = $46;
 $47 = $7;
 $48 = HEAP32[$47>>2]|0;
 $49 = HEAP32[$43>>2]|0;
 $50 = $48;
 $51 = $49;
 $52 = (($50) - ($51))|0;
 $53 = (($41) + ($52)|0);
 $13 = $20;
 $54 = $13;
 $55 = HEAP32[$54>>2]|0;
 $12 = $55;
 $56 = $12;
 $57 = $19;
 $58 = (($56) + ($57)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($20,$23,$38,$53,$58);
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($this,$__beg,$__end,$__old_mid,$__new_mid) {
 $this = $this|0;
 $__beg = $__beg|0;
 $__end = $__end|0;
 $__old_mid = $__old_mid|0;
 $__new_mid = $__new_mid|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $__beg;
 $2 = $__end;
 $3 = $__old_mid;
 $4 = $__new_mid;
 STACKTOP = sp;return;
}
function __ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj($this,$__old_size) {
 $this = $this|0;
 $__old_size = $__old_size|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $14 = $this;
 $15 = $__old_size;
 $16 = $14;
 $13 = $16;
 $17 = $13;
 $18 = HEAP32[$17>>2]|0;
 $12 = $18;
 $19 = $12;
 $11 = $16;
 $20 = $11;
 $21 = HEAP32[$20>>2]|0;
 $10 = $21;
 $22 = $10;
 $4 = $16;
 $23 = $4;
 $3 = $23;
 $24 = $3;
 $2 = $24;
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $1 = $26;
 $27 = $1;
 $0 = $27;
 $28 = $0;
 $29 = HEAP32[$28>>2]|0;
 $30 = HEAP32[$24>>2]|0;
 $31 = $29;
 $32 = $30;
 $33 = (($31) - ($32))|0;
 $34 = (($22) + ($33)|0);
 $6 = $16;
 $35 = $6;
 $36 = HEAP32[$35>>2]|0;
 $5 = $36;
 $37 = $5;
 $38 = $15;
 $39 = (($37) + ($38)|0);
 $8 = $16;
 $40 = $8;
 $41 = HEAP32[$40>>2]|0;
 $7 = $41;
 $42 = $7;
 $9 = $16;
 $43 = $9;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = HEAP32[$43>>2]|0;
 $47 = $45;
 $48 = $46;
 $49 = (($47) - ($48))|0;
 $50 = (($42) + ($49)|0);
 __ZNKSt3__16vectorIhNS_9allocatorIhEEE31__annotate_contiguous_containerEPKvS5_S5_S5_($16,$19,$34,$39,$50);
 STACKTOP = sp;return;
}
function __ZL22TraverseDirectory_ReadPci($path,$size) {
 $path = $path|0;
 $size = $size|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $__t$i = 0, $__tmp$i = 0, $buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $53 = sp + 32|0;
 $56 = sp + 265|0;
 $57 = sp + 12|0;
 $buffer = sp;
 $58 = sp + 264|0;
 $51 = $path;
 $52 = $size;
 $59 = $51;
 $60 = ($59|0)!=(0|0);
 if (!($60)) {
  _emscripten_worker_respond((0|0),0);
  STACKTOP = sp;return;
 }
 $61 = (__Znwj(16)|0);
 $$expand_i1_val = 1;
 HEAP8[$56>>0] = $$expand_i1_val;
 $62 = $51;
 $49 = $53;
 $50 = $62;
 $63 = $49;
 $48 = $63;
 $64 = $48;
 $47 = $64;
 $65 = $47;
 $46 = $65;
 $66 = $50;
 $67 = $50;
 __THREW__ = 0;
 $68 = (invoke_ii(49,($67|0))|0);
 $69 = __THREW__; __THREW__ = 0;
 $70 = $69&1;
 do {
  if ($70) {
   label = 12;
  } else {
   __THREW__ = 0;
   invoke_viii(36,($63|0),($66|0),($68|0));
   $71 = __THREW__; __THREW__ = 0;
   $72 = $71&1;
   if ($72) {
    label = 12;
   } else {
    __THREW__ = 0;
    invoke_vii(47,($61|0),($53|0));
    $73 = __THREW__; __THREW__ = 0;
    $74 = $73&1;
    if ($74) {
     $105 = ___cxa_find_matching_catch_2()|0;
     $106 = tempRet0;
     $54 = $105;
     $55 = $106;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
     break;
    }
    $$expand_i1_val2 = 0;
    HEAP8[$56>>0] = $$expand_i1_val2;
    $44 = 7564;
    $45 = $61;
    $75 = $44;
    $43 = $75;
    $76 = $43;
    $42 = $76;
    $77 = $42;
    $78 = HEAP32[$77>>2]|0;
    $__tmp$i = $78;
    $79 = $45;
    $39 = $75;
    $80 = $39;
    $38 = $80;
    $81 = $38;
    HEAP32[$81>>2] = $79;
    $82 = $__tmp$i;
    $83 = ($82|0)!=(0|0);
    if ($83) {
     $37 = $75;
     $84 = $37;
     $36 = $84;
     $85 = $36;
     $86 = $__tmp$i;
     $40 = $85;
     $41 = $86;
     $87 = $41;
     $88 = ($87|0)==(0|0);
     if (!($88)) {
      __ZN6file_tD2Ev($87);
      __ZdlPv($87);
     }
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($53);
    $35 = 7564;
    $89 = $35;
    $34 = $89;
    $90 = $34;
    $33 = $90;
    $91 = $33;
    $92 = HEAP32[$91>>2]|0;
    $93 = (__ZN6file_t4ReadEv($92)|0);
    if ($93) {
     $26 = 7564;
     $110 = $26;
     $25 = $110;
     $111 = $25;
     $24 = $111;
     $112 = $24;
     $113 = HEAP32[$112>>2]|0;
     $114 = ((($113)) + 4|0);
     $23 = $114;
     $115 = $23;
     $116 = ((($115)) + 4|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = HEAP32[$115>>2]|0;
     $119 = $117;
     $120 = $118;
     $121 = (($119) - ($120))|0;
     $122 = $52;
     $123 = (($121) + ($122))|0;
     HEAP8[$58>>0] = 0;
     __ZNSt3__16vectorIcNS_9allocatorIcEEEC2EjRKc($buffer,$123,$58);
     $21 = $buffer;
     $22 = 0;
     $124 = $21;
     $125 = $22;
     $126 = HEAP32[$124>>2]|0;
     $127 = (($126) + ($125)|0);
     $128 = $51;
     $129 = $52;
     _memcpy(($127|0),($128|0),($129|0))|0;
     $130 = $52;
     $19 = $buffer;
     $20 = $130;
     $131 = $19;
     $132 = $20;
     $133 = HEAP32[$131>>2]|0;
     $134 = (($133) + ($132)|0);
     $2 = 7564;
     $135 = $2;
     $1 = $135;
     $136 = $1;
     $0 = $136;
     $137 = $0;
     $138 = HEAP32[$137>>2]|0;
     $139 = ((($138)) + 4|0);
     $3 = $139;
     $4 = 0;
     $140 = $3;
     $141 = $4;
     $142 = HEAP32[$140>>2]|0;
     $143 = (($142) + ($141)|0);
     $7 = 7564;
     $144 = $7;
     $6 = $144;
     $145 = $6;
     $5 = $145;
     $146 = $5;
     $147 = HEAP32[$146>>2]|0;
     $148 = ((($147)) + 4|0);
     $8 = $148;
     $149 = $8;
     $150 = ((($149)) + 4|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = HEAP32[$149>>2]|0;
     $153 = $151;
     $154 = $152;
     $155 = (($153) - ($154))|0;
     _memcpy(($134|0),($143|0),($155|0))|0;
     $156 = $52;
     $9 = $buffer;
     $10 = $156;
     $157 = $9;
     $158 = $10;
     $159 = HEAP32[$157>>2]|0;
     $160 = (($159) + ($158)|0);
     HEAP8[$160>>0] = 124;
     $15 = 7564;
     $161 = $15;
     $14 = $161;
     $162 = $14;
     $13 = $162;
     $163 = $13;
     $164 = HEAP32[$163>>2]|0;
     $__t$i = $164;
     $12 = $161;
     $165 = $12;
     $11 = $165;
     $166 = $11;
     HEAP32[$166>>2] = 0;
     $16 = $buffer;
     $17 = 0;
     $167 = $16;
     $168 = $17;
     $169 = HEAP32[$167>>2]|0;
     $170 = (($169) + ($168)|0);
     $18 = $buffer;
     $171 = $18;
     $172 = ((($171)) + 4|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = HEAP32[$171>>2]|0;
     $175 = $173;
     $176 = $174;
     $177 = (($175) - ($176))|0;
     __THREW__ = 0;
     invoke_vii(65,($170|0),($177|0));
     $178 = __THREW__; __THREW__ = 0;
     $179 = $178&1;
     if ($179) {
      $180 = ___cxa_find_matching_catch_2()|0;
      $181 = tempRet0;
      $54 = $180;
      $55 = $181;
      __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($buffer);
      $182 = $54;
      $183 = $55;
      ___resumeException($182|0);
      // unreachable;
     } else {
      __ZNSt3__16vectorIcNS_9allocatorIcEEED2Ev($buffer);
      STACKTOP = sp;return;
     }
    } else {
     $94 = $51;
     $95 = $52;
     $30 = $57;
     $31 = $94;
     $32 = $95;
     $96 = $30;
     $29 = $96;
     $97 = $29;
     $28 = $97;
     $98 = $28;
     $27 = $98;
     $99 = $31;
     $100 = $32;
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($96,$99,$100);
     __THREW__ = 0;
     invoke_vi(37,($57|0));
     $101 = __THREW__; __THREW__ = 0;
     $102 = $101&1;
     if ($102) {
      $108 = ___cxa_find_matching_catch_2()|0;
      $109 = tempRet0;
      $54 = $108;
      $55 = $109;
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($57);
      $182 = $54;
      $183 = $55;
      ___resumeException($182|0);
      // unreachable;
     } else {
      __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($57);
      STACKTOP = sp;return;
     }
    }
   }
  }
 } while(0);
 if ((label|0) == 12) {
  $103 = ___cxa_find_matching_catch_2()|0;
  $104 = tempRet0;
  $54 = $103;
  $55 = $104;
 }
 $$pre_trunc = HEAP8[$56>>0]|0;
 $107 = $$pre_trunc&1;
 if (!($107)) {
  $182 = $54;
  $183 = $55;
  ___resumeException($182|0);
  // unreachable;
 }
 __ZdlPv($61);
 $182 = $54;
 $183 = $55;
 ___resumeException($182|0);
 // unreachable;
}
function __ZN6file_t4ReadEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = sp + 4|0;
 $1 = $this;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[$2>>2]|0;
  (_fseek($5,0,2)|0);
  $6 = HEAP32[$2>>2]|0;
  $7 = (_ftell($6)|0);
  $8 = (__ZN6file_t4ReadEjj($2,0,$7)|0);
  $$expand_i1_val2 = $8&1;
  HEAP8[$0>>0] = $$expand_i1_val2;
 } else {
  $$expand_i1_val = 0;
  HEAP8[$0>>0] = $$expand_i1_val;
 }
 $$pre_trunc = HEAP8[$0>>0]|0;
 $9 = $$pre_trunc&1;
 STACKTOP = sp;return ($9|0);
}
function __ZL6GetExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERS5_($name,$outExt) {
 $name = $name|0;
 $outExt = $outExt|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $__a$i$i$i = 0, $__i$i$i$i = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $18 = sp + 8|0;
 $21 = sp + 297|0;
 $48 = sp + 296|0;
 $49 = sp + 295|0;
 $52 = sp;
 $55 = sp + 294|0;
 $69 = sp + 292|0;
 $72 = sp + 12|0;
 $70 = $name;
 $71 = $outExt;
 $73 = $70;
 $66 = $73;
 $67 = 46;
 $68 = -1;
 $74 = $66;
 $75 = $67;
 $76 = $68;
 $77 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj($74,$75,$76)|0);
 $index = $77;
 $78 = $index;
 $79 = ($78|0)==(-1);
 if ($79) {
  $$expand_i1_val = 0;
  HEAP8[$69>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$69>>0]|0;
  $176 = $$pre_trunc&1;
  STACKTOP = sp;return ($176|0);
 }
 $80 = $71;
 $81 = $70;
 $82 = $index;
 $83 = $70;
 $65 = $83;
 $84 = $65;
 $64 = $84;
 $85 = $64;
 $63 = $85;
 $86 = $63;
 $62 = $86;
 $87 = $62;
 $88 = HEAP8[$87>>0]|0;
 $89 = $88&255;
 $90 = $89 & 1;
 $91 = ($90|0)!=(0);
 if ($91) {
  $58 = $84;
  $92 = $58;
  $57 = $92;
  $93 = $57;
  $56 = $93;
  $94 = $56;
  $95 = ((($94)) + 4|0);
  $96 = HEAP32[$95>>2]|0;
  $105 = $96;
 } else {
  $61 = $84;
  $97 = $61;
  $60 = $97;
  $98 = $60;
  $59 = $98;
  $99 = $59;
  $100 = HEAP8[$99>>0]|0;
  $101 = $100&255;
  $102 = $101 >> 1;
  $105 = $102;
 }
 $103 = $index;
 $104 = (($105) - ($103))|0;
 $3 = $81;
 $4 = $82;
 $5 = $104;
 $106 = $3;
 $107 = $4;
 $108 = $5;
 $2 = $106;
 $109 = $2;
 $1 = $109;
 $110 = $1;
 $0 = $110;
 $111 = $0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($72,$106,$107,$108,$111);
 $53 = $80;
 $54 = $72;
 $112 = $53;
 $113 = $54;
 ;HEAP8[$52>>0]=HEAP8[$55>>0]|0;
 $50 = $112;
 $51 = $113;
 $114 = $50;
 $47 = $114;
 $115 = $47;
 $46 = $115;
 $45 = $115;
 $116 = $45;
 $44 = $116;
 $117 = $44;
 $43 = $117;
 $118 = $43;
 $119 = HEAP8[$118>>0]|0;
 $120 = $119&255;
 $121 = $120 & 1;
 $122 = ($121|0)!=(0);
 if ($122) {
  $38 = $115;
  $123 = $38;
  $37 = $123;
  $124 = $37;
  $36 = $124;
  $125 = $36;
  $126 = ((($125)) + 8|0);
  $127 = HEAP32[$126>>2]|0;
  HEAP8[$48>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($127,$48);
  $29 = $115;
  $30 = 0;
  $128 = $29;
  $129 = $30;
  $28 = $128;
  $130 = $28;
  $27 = $130;
  $131 = $27;
  $132 = ((($131)) + 4|0);
  HEAP32[$132>>2] = $129;
 } else {
  $35 = $115;
  $133 = $35;
  $34 = $133;
  $134 = $34;
  $33 = $134;
  $135 = $33;
  $136 = ((($135)) + 1|0);
  $32 = $136;
  $137 = $32;
  $31 = $137;
  $138 = $31;
  HEAP8[$49>>0] = 0;
  __ZNSt3__111char_traitsIcE6assignERcRKc($138,$49);
  $41 = $115;
  $42 = 0;
  $139 = $41;
  $140 = $42;
  $141 = $140 << 1;
  $142 = $141&255;
  $40 = $139;
  $143 = $40;
  $39 = $143;
  $144 = $39;
  HEAP8[$144>>0] = $142;
 }
 $26 = $114;
 $145 = $26;
 __THREW__ = 0;
 invoke_vii(53,($145|0),0);
 $146 = __THREW__; __THREW__ = 0;
 $147 = $146&1;
 if ($147) {
  $148 = ___cxa_find_matching_catch_3(0|0)|0;
  $149 = tempRet0;
  ___clang_call_terminate($148);
  // unreachable;
 }
 $25 = $114;
 $150 = $25;
 $24 = $150;
 $151 = $24;
 $152 = $51;
 $23 = $152;
 $153 = $23;
 $22 = $153;
 $154 = $22;
 ;HEAP32[$151>>2]=HEAP32[$154>>2]|0;HEAP32[$151+4>>2]=HEAP32[$154+4>>2]|0;HEAP32[$151+8>>2]=HEAP32[$154+8>>2]|0;
 $155 = $51;
 $19 = $114;
 $20 = $155;
 $156 = $19;
 $157 = $20;
 ;HEAP8[$18>>0]=HEAP8[$21>>0]|0;
 $16 = $156;
 $17 = $157;
 $158 = $16;
 $15 = $158;
 $159 = $15;
 $14 = $159;
 $160 = $14;
 $13 = $160;
 $161 = $17;
 $11 = $161;
 $162 = $11;
 $10 = $162;
 $163 = $10;
 $9 = $163;
 $164 = $9;
 $12 = $164;
 $165 = $51;
 $8 = $165;
 $166 = $8;
 $7 = $166;
 $167 = $7;
 $6 = $167;
 $168 = $6;
 $__a$i$i$i = $168;
 $__i$i$i$i = 0;
 while(1) {
  $169 = $__i$i$i$i;
  $170 = ($169>>>0)<(3);
  if (!($170)) {
   break;
  }
  $171 = $__i$i$i$i;
  $172 = $__a$i$i$i;
  $173 = (($172) + ($171<<2)|0);
  HEAP32[$173>>2] = 0;
  $174 = $__i$i$i$i;
  $175 = (($174) + 1)|0;
  $__i$i$i$i = $175;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($72);
 $$expand_i1_val2 = 1;
 HEAP8[$69>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$69>>0]|0;
 $176 = $$pre_trunc&1;
 STACKTOP = sp;return ($176|0);
}
function __ZL10ReplaceExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_($agg$result,$path,$ext) {
 $agg$result = $agg$result|0;
 $path = $path|0;
 $ext = $ext|0;
 var $$expand_i1_val = 0, $$expand_i1_val2 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $30 = sp + 128|0;
 $28 = $path;
 $29 = $ext;
 $$expand_i1_val = 0;
 HEAP8[$30>>0] = $$expand_i1_val;
 $33 = $28;
 __ZL8StripExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$33);
 $34 = $29;
 $26 = $agg$result;
 $27 = $34;
 $35 = $26;
 $36 = $27;
 $24 = $35;
 $25 = $36;
 $37 = $24;
 $38 = $25;
 $23 = $38;
 $39 = $23;
 $22 = $39;
 $40 = $22;
 $21 = $40;
 $41 = $21;
 $20 = $41;
 $42 = $20;
 $19 = $42;
 $43 = $19;
 $44 = HEAP8[$43>>0]|0;
 $45 = $44&255;
 $46 = $45 & 1;
 $47 = ($46|0)!=(0);
 if ($47) {
  $13 = $40;
  $48 = $13;
  $12 = $48;
  $49 = $12;
  $11 = $49;
  $50 = $11;
  $51 = ((($50)) + 8|0);
  $52 = HEAP32[$51>>2]|0;
  $59 = $52;
 } else {
  $18 = $40;
  $53 = $18;
  $17 = $53;
  $54 = $17;
  $16 = $54;
  $55 = $16;
  $56 = ((($55)) + 1|0);
  $15 = $56;
  $57 = $15;
  $14 = $57;
  $58 = $14;
  $59 = $58;
 }
 $10 = $59;
 $60 = $10;
 $61 = $25;
 $9 = $61;
 $62 = $9;
 $8 = $62;
 $63 = $8;
 $7 = $63;
 $64 = $7;
 $6 = $64;
 $65 = $6;
 $66 = HEAP8[$65>>0]|0;
 $67 = $66&255;
 $68 = $67 & 1;
 $69 = ($68|0)!=(0);
 if ($69) {
  $2 = $62;
  $70 = $2;
  $1 = $70;
  $71 = $1;
  $0 = $71;
  $72 = $0;
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $81 = $74;
 } else {
  $5 = $62;
  $75 = $5;
  $4 = $75;
  $76 = $4;
  $3 = $76;
  $77 = $3;
  $78 = HEAP8[$77>>0]|0;
  $79 = $78&255;
  $80 = $79 >> 1;
  $81 = $80;
 }
 __THREW__ = 0;
 (invoke_iiii(66,($37|0),($60|0),($81|0))|0);
 $82 = __THREW__; __THREW__ = 0;
 $83 = $82&1;
 if ($83) {
  $85 = ___cxa_find_matching_catch_2()|0;
  $86 = tempRet0;
  $31 = $85;
  $32 = $86;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
  $87 = $31;
  $88 = $32;
  ___resumeException($87|0);
  // unreachable;
 }
 $$expand_i1_val2 = 1;
 HEAP8[$30>>0] = $$expand_i1_val2;
 $$pre_trunc = HEAP8[$30>>0]|0;
 $84 = $$pre_trunc&1;
 if ($84) {
  STACKTOP = sp;return;
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($agg$result);
 STACKTOP = sp;return;
}
function __ZNSt3__15arrayINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEELj3EED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $this;
 $1 = $0;
 $2 = ((($1)) + 36|0);
 $4 = $2;
 while(1) {
  $3 = ((($4)) + -12|0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($3);
  $5 = ($3|0)==($1|0);
  if ($5) {
   break;
  } else {
   $4 = $3;
  }
 }
 STACKTOP = sp;return;
}
function __ZN6file_t9ReadImageEv($this) {
 $this = $this|0;
 var $$expand_i1_val = 0, $$expand_i1_val4 = 0, $$expand_i1_val6 = 0, $$pre_trunc = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $bpp = 0, $buf = 0;
 var $height = 0, $next = 0, $original = 0, $target = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $12 = sp + 93|0;
 $width = sp + 36|0;
 $height = sp + 32|0;
 $bpp = sp + 28|0;
 $14 = sp + 92|0;
 $13 = $this;
 $15 = $13;
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  (_puts(1860)|0);
  $$expand_i1_val = 0;
  HEAP8[$12>>0] = $$expand_i1_val;
  $$pre_trunc = HEAP8[$12>>0]|0;
  $93 = $$pre_trunc&1;
  STACKTOP = sp;return ($93|0);
 }
 $18 = HEAP32[$15>>2]|0;
 $19 = (_stbi_load_from_file($18,$width,$height,$bpp,0)|0);
 $buf = $19;
 $20 = $buf;
 $21 = ($20|0)!=(0|0);
 if (!($21)) {
  (_puts(1892)|0);
  $$expand_i1_val4 = 0;
  HEAP8[$12>>0] = $$expand_i1_val4;
  $$pre_trunc = HEAP8[$12>>0]|0;
  $93 = $$pre_trunc&1;
  STACKTOP = sp;return ($93|0);
 }
 $22 = HEAP32[$width>>2]|0;
 $23 = HEAP32[$height>>2]|0;
 $24 = HEAP32[$bpp>>2]|0;
 HEAP32[$vararg_buffer>>2] = $22;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $23;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $24;
 (_printf(1928,$vararg_buffer)|0);
 $25 = HEAP32[$width>>2]|0;
 $26 = HEAP32[$height>>2]|0;
 $27 = Math_imul($25, $26)|0;
 $28 = HEAP32[$bpp>>2]|0;
 $29 = Math_imul($27, $28)|0;
 $target = $29;
 $30 = $target;
 $original = $30;
 $31 = $target;
 $32 = $31 >> 2;
 $33 = $32 << 2;
 $34 = $target;
 $35 = ($33|0)!=($34|0);
 if ($35) {
  $36 = $target;
  $37 = $36 & -4;
  $next = $37;
  $38 = $next;
  $39 = (($38) + 4)|0;
  $next = $39;
  $40 = $next;
  $target = $40;
 }
 $41 = ((($15)) + 4|0);
 $42 = $target;
 $43 = (($42) + 8)|0;
 HEAP8[$14>>0] = 0;
 __ZNSt3__16vectorIhNS_9allocatorIhEEE6resizeEjRKh($41,$43,$14);
 $44 = ((($15)) + 4|0);
 $10 = $44;
 $11 = 8;
 $45 = $10;
 $46 = $11;
 $47 = HEAP32[$45>>2]|0;
 $48 = (($47) + ($46)|0);
 $49 = $buf;
 $50 = $original;
 _memcpy(($48|0),($49|0),($50|0))|0;
 $51 = HEAP32[$width>>2]|0;
 $52 = $51 & 255;
 $53 = $52&255;
 $54 = ((($15)) + 4|0);
 $0 = $54;
 $1 = 0;
 $55 = $0;
 $56 = $1;
 $57 = HEAP32[$55>>2]|0;
 $58 = (($57) + ($56)|0);
 HEAP8[$58>>0] = $53;
 $59 = HEAP32[$width>>2]|0;
 $60 = $59 >> 8;
 $61 = $60 & 255;
 $62 = $61&255;
 $63 = ((($15)) + 4|0);
 $2 = $63;
 $3 = 1;
 $64 = $2;
 $65 = $3;
 $66 = HEAP32[$64>>2]|0;
 $67 = (($66) + ($65)|0);
 HEAP8[$67>>0] = $62;
 $68 = HEAP32[$height>>2]|0;
 $69 = $68 & 255;
 $70 = $69&255;
 $71 = ((($15)) + 4|0);
 $4 = $71;
 $5 = 2;
 $72 = $4;
 $73 = $5;
 $74 = HEAP32[$72>>2]|0;
 $75 = (($74) + ($73)|0);
 HEAP8[$75>>0] = $70;
 $76 = HEAP32[$height>>2]|0;
 $77 = $76 >> 8;
 $78 = $77 & 255;
 $79 = $78&255;
 $80 = ((($15)) + 4|0);
 $6 = $80;
 $7 = 3;
 $81 = $6;
 $82 = $7;
 $83 = HEAP32[$81>>2]|0;
 $84 = (($83) + ($82)|0);
 HEAP8[$84>>0] = $79;
 $85 = HEAP32[$bpp>>2]|0;
 $86 = $85&255;
 $87 = ((($15)) + 4|0);
 $8 = $87;
 $9 = 4;
 $88 = $8;
 $89 = $9;
 $90 = HEAP32[$88>>2]|0;
 $91 = (($90) + ($89)|0);
 HEAP8[$91>>0] = $86;
 $92 = $buf;
 _stbi_image_free($92);
 $$expand_i1_val6 = 1;
 HEAP8[$12>>0] = $$expand_i1_val6;
 $$pre_trunc = HEAP8[$12>>0]|0;
 $93 = $$pre_trunc&1;
 STACKTOP = sp;return ($93|0);
}
function __ZNSt3__111char_traitsIcE7compareEPKcS3_j($__s1,$__s2,$__n) {
 $__s1 = $__s1|0;
 $__s2 = $__s2|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $__s1;
 $1 = $__s2;
 $2 = $__n;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = (_memcmp($3,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL8StripExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result,$name) {
 $agg$result = $agg$result|0;
 $name = $name|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $9 = $name;
 $10 = $9;
 $6 = $10;
 $7 = 46;
 $8 = -1;
 $11 = $6;
 $12 = $7;
 $13 = $8;
 $14 = (__ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj($11,$12,$13)|0);
 $index = $14;
 $15 = $index;
 $16 = ($15|0)==(-1);
 $17 = $9;
 if ($16) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($agg$result,$17);
  STACKTOP = sp;return;
 } else {
  $18 = $index;
  $3 = $17;
  $4 = 0;
  $5 = $18;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $2 = $19;
  $22 = $2;
  $1 = $22;
  $23 = $1;
  $0 = $23;
  $24 = $0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($agg$result,$19,$20,$21,$24);
  STACKTOP = sp;return;
 }
}
function __GLOBAL__sub_I_file_traverse_cxx() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___cxx_global_var_init();
 ___cxx_global_var_init_1();
 return;
}
function _stbi_image_free($retval_from_stbi_load) {
 $retval_from_stbi_load = $retval_from_stbi_load|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $retval_from_stbi_load;
 $1 = $0;
 _free($1);
 STACKTOP = sp;return;
}
function _stbi_load($filename,$x,$y,$comp,$req_comp) {
 $filename = $filename|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $f = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $filename;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL11stbi__fopenPKcS0_($6,1983)|0);
 $f = $7;
 $8 = $f;
 $9 = ($8|0)!=(0|0);
 if ($9) {
  $14 = $f;
  $15 = $2;
  $16 = $3;
  $17 = $4;
  $18 = $5;
  $19 = (_stbi_load_from_file($14,$15,$16,$17,$18)|0);
  $result = $19;
  $20 = $f;
  (_fclose($20)|0);
  $21 = $result;
  $0 = $21;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 } else {
  $10 = (__ZL9stbi__errPKc(1986)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $22 = $0;
  STACKTOP = sp;return ($22|0);
 }
 return (0)|0;
}
function __ZL11stbi__fopenPKcS0_($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $filename;
 $1 = $mode;
 $2 = $0;
 $3 = $1;
 $4 = (_fopen($2,$3)|0);
 $f = $4;
 $5 = $f;
 STACKTOP = sp;return ($5|0);
}
function __ZL9stbi__errPKc($str) {
 $str = $str|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $str;
 $1 = $0;
 HEAP32[1892] = $1;
 STACKTOP = sp;return 0;
}
function _stbi_load_from_file($f,$x,$y,$comp,$req_comp) {
 $f = $f|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $result = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 $0 = $f;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$5);
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15stbi__load_flipP13stbi__contextPiS1_S1_i($s,$6,$7,$8,$9)|0);
 $result = $10;
 $11 = $result;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  $22 = $result;
  STACKTOP = sp;return ($22|0);
 }
 $13 = $0;
 $14 = ((($s)) + 172|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($s)) + 168|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $15;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $21 = (0 - ($20))|0;
 (_fseek($13,$21,1)|0);
 $22 = $result;
 STACKTOP = sp;return ($22|0);
}
function __ZL16stbi__start_fileP13stbi__contextP8_IO_FILE($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $f;
 $2 = $0;
 $3 = $1;
 __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($2,168,$3);
 STACKTOP = sp;return;
}
function __ZL16stbi__stdio_readPvPci($user,$data,$size) {
 $user = $user|0;
 $data = $data|0;
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $data;
 $2 = $size;
 $3 = $1;
 $4 = $2;
 $5 = $0;
 $6 = (_fread($3,1,$4,$5)|0);
 STACKTOP = sp;return ($6|0);
}
function __ZL16stbi__stdio_skipPvi($user,$n) {
 $user = $user|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $n;
 $2 = $0;
 $3 = $1;
 (_fseek($2,$3,1)|0);
 STACKTOP = sp;return;
}
function __ZL15stbi__stdio_eofPv($user) {
 $user = $user|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $user;
 $1 = $0;
 $2 = (_feof($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZL21stbi__start_callbacksP13stbi__contextP17stbi_io_callbacksPv($s,$c,$user) {
 $s = $s|0;
 $c = $c|0;
 $user = $user|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 $2 = $user;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 $5 = $1;
 ;HEAP32[$4>>2]=HEAP32[$5>>2]|0;HEAP32[$4+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$5+8>>2]|0;
 $6 = $2;
 $7 = $0;
 $8 = ((($7)) + 28|0);
 HEAP32[$8>>2] = $6;
 $9 = $0;
 $10 = ((($9)) + 36|0);
 HEAP32[$10>>2] = 128;
 $11 = $0;
 $12 = ((($11)) + 32|0);
 HEAP32[$12>>2] = 1;
 $13 = $0;
 $14 = ((($13)) + 40|0);
 $15 = $0;
 $16 = ((($15)) + 176|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 __ZL19stbi__refill_bufferP13stbi__context($17);
 $18 = $0;
 $19 = ((($18)) + 172|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $0;
 $22 = ((($21)) + 180|0);
 HEAP32[$22>>2] = $20;
 STACKTOP = sp;return;
}
function __ZL19stbi__refill_bufferP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 28|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $0;
 $8 = ((($7)) + 40|0);
 $9 = $0;
 $10 = ((($9)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (FUNCTION_TABLE_iiii[$3 & 127]($6,$8,$11)|0);
 $n = $12;
 $13 = $n;
 $14 = ($13|0)==(0);
 $15 = $0;
 if ($14) {
  $16 = ((($15)) + 32|0);
  HEAP32[$16>>2] = 0;
  $17 = $0;
  $18 = ((($17)) + 40|0);
  $19 = $0;
  $20 = ((($19)) + 168|0);
  HEAP32[$20>>2] = $18;
  $21 = $0;
  $22 = ((($21)) + 40|0);
  $23 = ((($22)) + 1|0);
  $24 = $0;
  $25 = ((($24)) + 172|0);
  HEAP32[$25>>2] = $23;
  $26 = $0;
  $27 = ((($26)) + 168|0);
  $28 = HEAP32[$27>>2]|0;
  HEAP8[$28>>0] = 0;
  STACKTOP = sp;return;
 } else {
  $29 = ((($15)) + 40|0);
  $30 = $0;
  $31 = ((($30)) + 168|0);
  HEAP32[$31>>2] = $29;
  $32 = $0;
  $33 = ((($32)) + 40|0);
  $34 = $n;
  $35 = (($33) + ($34)|0);
  $36 = $0;
  $37 = ((($36)) + 172|0);
  HEAP32[$37>>2] = $35;
  STACKTOP = sp;return;
 }
}
function __ZL15stbi__load_flipP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $col = 0, $depth = 0, $h = 0, $or$cond = 0, $result = 0;
 var $row = 0, $temp = 0, $w = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15stbi__load_mainP13stbi__contextPiS1_S1_i($5,$6,$7,$8,$9)|0);
 $result = $10;
 $11 = HEAP32[1893]|0;
 $12 = ($11|0)!=(0);
 $13 = $result;
 $14 = ($13|0)!=(0|0);
 $or$cond = $12 & $14;
 if (!($or$cond)) {
  $94 = $result;
  STACKTOP = sp;return ($94|0);
 }
 $15 = $1;
 $16 = HEAP32[$15>>2]|0;
 $w = $16;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $h = $18;
 $19 = $4;
 $20 = ($19|0)!=(0);
 if ($20) {
  $21 = $4;
  $24 = $21;
 } else {
  $22 = $3;
  $23 = HEAP32[$22>>2]|0;
  $24 = $23;
 }
 $depth = $24;
 $row = 0;
 while(1) {
  $25 = $row;
  $26 = $h;
  $27 = $26 >> 1;
  $28 = ($25|0)<($27|0);
  if (!($28)) {
   break;
  }
  $col = 0;
  while(1) {
   $29 = $col;
   $30 = $w;
   $31 = ($29|0)<($30|0);
   if (!($31)) {
    break;
   }
   $z = 0;
   while(1) {
    $32 = $z;
    $33 = $depth;
    $34 = ($32|0)<($33|0);
    if (!($34)) {
     break;
    }
    $35 = $row;
    $36 = $w;
    $37 = Math_imul($35, $36)|0;
    $38 = $col;
    $39 = (($37) + ($38))|0;
    $40 = $depth;
    $41 = Math_imul($39, $40)|0;
    $42 = $z;
    $43 = (($41) + ($42))|0;
    $44 = $result;
    $45 = (($44) + ($43)|0);
    $46 = HEAP8[$45>>0]|0;
    $temp = $46;
    $47 = $h;
    $48 = $row;
    $49 = (($47) - ($48))|0;
    $50 = (($49) - 1)|0;
    $51 = $w;
    $52 = Math_imul($50, $51)|0;
    $53 = $col;
    $54 = (($52) + ($53))|0;
    $55 = $depth;
    $56 = Math_imul($54, $55)|0;
    $57 = $z;
    $58 = (($56) + ($57))|0;
    $59 = $result;
    $60 = (($59) + ($58)|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $row;
    $63 = $w;
    $64 = Math_imul($62, $63)|0;
    $65 = $col;
    $66 = (($64) + ($65))|0;
    $67 = $depth;
    $68 = Math_imul($66, $67)|0;
    $69 = $z;
    $70 = (($68) + ($69))|0;
    $71 = $result;
    $72 = (($71) + ($70)|0);
    HEAP8[$72>>0] = $61;
    $73 = $temp;
    $74 = $h;
    $75 = $row;
    $76 = (($74) - ($75))|0;
    $77 = (($76) - 1)|0;
    $78 = $w;
    $79 = Math_imul($77, $78)|0;
    $80 = $col;
    $81 = (($79) + ($80))|0;
    $82 = $depth;
    $83 = Math_imul($81, $82)|0;
    $84 = $z;
    $85 = (($83) + ($84))|0;
    $86 = $result;
    $87 = (($86) + ($85)|0);
    HEAP8[$87>>0] = $73;
    $88 = $z;
    $89 = (($88) + 1)|0;
    $z = $89;
   }
   $90 = $col;
   $91 = (($90) + 1)|0;
   $col = $91;
  }
  $92 = $row;
  $93 = (($92) + 1)|0;
  $row = $93;
 }
 $94 = $result;
 STACKTOP = sp;return ($94|0);
}
function __ZL15stbi__load_mainP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $hdr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL15stbi__jpeg_testP13stbi__context($6)|0);
 $8 = ($7|0)!=(0);
 $9 = $1;
 if ($8) {
  $10 = $2;
  $11 = $3;
  $12 = $4;
  $13 = $5;
  $14 = (__ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_i($9,$10,$11,$12,$13)|0);
  $0 = $14;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $15 = (__ZL14stbi__png_testP13stbi__context($9)|0);
 $16 = ($15|0)!=(0);
 $17 = $1;
 if ($16) {
  $18 = $2;
  $19 = $3;
  $20 = $4;
  $21 = $5;
  $22 = (__ZL14stbi__png_loadP13stbi__contextPiS1_S1_i($17,$18,$19,$20,$21)|0);
  $0 = $22;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $23 = (__ZL14stbi__bmp_testP13stbi__context($17)|0);
 $24 = ($23|0)!=(0);
 $25 = $1;
 if ($24) {
  $26 = $2;
  $27 = $3;
  $28 = $4;
  $29 = $5;
  $30 = (__ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_i($25,$26,$27,$28,$29)|0);
  $0 = $30;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $31 = (__ZL14stbi__gif_testP13stbi__context($25)|0);
 $32 = ($31|0)!=(0);
 $33 = $1;
 if ($32) {
  $34 = $2;
  $35 = $3;
  $36 = $4;
  $37 = $5;
  $38 = (__ZL14stbi__gif_loadP13stbi__contextPiS1_S1_i($33,$34,$35,$36,$37)|0);
  $0 = $38;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $39 = (__ZL14stbi__psd_testP13stbi__context($33)|0);
 $40 = ($39|0)!=(0);
 $41 = $1;
 if ($40) {
  $42 = $2;
  $43 = $3;
  $44 = $4;
  $45 = $5;
  $46 = (__ZL14stbi__psd_loadP13stbi__contextPiS1_S1_i($41,$42,$43,$44,$45)|0);
  $0 = $46;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $47 = (__ZL14stbi__pic_testP13stbi__context($41)|0);
 $48 = ($47|0)!=(0);
 $49 = $1;
 if ($48) {
  $50 = $2;
  $51 = $3;
  $52 = $4;
  $53 = $5;
  $54 = (__ZL14stbi__pic_loadP13stbi__contextPiS1_S1_i($49,$50,$51,$52,$53)|0);
  $0 = $54;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $55 = (__ZL14stbi__pnm_testP13stbi__context($49)|0);
 $56 = ($55|0)!=(0);
 $57 = $1;
 if ($56) {
  $58 = $2;
  $59 = $3;
  $60 = $4;
  $61 = $5;
  $62 = (__ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_i($57,$58,$59,$60,$61)|0);
  $0 = $62;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $63 = (__ZL14stbi__hdr_testP13stbi__context($57)|0);
 $64 = ($63|0)!=(0);
 $65 = $1;
 if ($64) {
  $66 = $2;
  $67 = $3;
  $68 = $4;
  $69 = $5;
  $70 = (__ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_i($65,$66,$67,$68,$69)|0);
  $hdr = $70;
  $71 = $hdr;
  $72 = $2;
  $73 = HEAP32[$72>>2]|0;
  $74 = $3;
  $75 = HEAP32[$74>>2]|0;
  $76 = $5;
  $77 = ($76|0)!=(0);
  if ($77) {
   $78 = $5;
   $81 = $78;
  } else {
   $79 = $4;
   $80 = HEAP32[$79>>2]|0;
   $81 = $80;
  }
  $82 = (__ZL16stbi__hdr_to_ldrPfiii($71,$73,$75,$81)|0);
  $0 = $82;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 } else {
  $83 = (__ZL14stbi__tga_testP13stbi__context($65)|0);
  $84 = ($83|0)!=(0);
  if ($84) {
   $85 = $1;
   $86 = $2;
   $87 = $3;
   $88 = $4;
   $89 = $5;
   $90 = (__ZL14stbi__tga_loadP13stbi__contextPiS1_S1_i($85,$86,$87,$88,$89)|0);
   $0 = $90;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  } else {
   $91 = (__ZL9stbi__errPKc(4159)|0);
   $92 = ($91|0)!=(0);
   $93 = $92 ? 0 : 0;
   $94 = $93;
   $0 = $94;
   $95 = $0;
   STACKTOP = sp;return ($95|0);
  }
 }
 return (0)|0;
}
function __ZL15stbi__jpeg_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $j = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp;
 $0 = $s;
 $1 = $0;
 HEAP32[$j>>2] = $1;
 __ZL16stbi__setup_jpegP10stbi__jpeg($j);
 $2 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($j,1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL16stbi__setup_jpegP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18176|0);
 HEAP32[$2>>2] = 67;
 $3 = $0;
 $4 = ((($3)) + 18180|0);
 HEAP32[$4>>2] = 68;
 $5 = $0;
 $6 = ((($5)) + 18184|0);
 HEAP32[$6>>2] = 69;
 STACKTOP = sp;return;
}
function __ZL16stbi__idct_blockPhiPs($out,$out_stride,$data) {
 $out = $out|0;
 $out_stride = $out_stride|0;
 $data = $data|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $d = 0, $dcterm = 0, $i = 0, $o = 0, $p1 = 0, $p15 = 0, $p2 = 0, $p26 = 0, $p3 = 0, $p37 = 0, $p4 = 0, $p48 = 0, $p5 = 0, $p59 = 0, $t0 = 0;
 var $t01 = 0, $t1 = 0, $t12 = 0, $t2 = 0, $t23 = 0, $t3 = 0, $t34 = 0, $v = 0, $val = 0, $x0 = 0, $x010 = 0, $x1 = 0, $x111 = 0, $x2 = 0, $x212 = 0, $x3 = 0, $x313 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $val = sp + 120|0;
 $0 = $out;
 $1 = $out_stride;
 $2 = $data;
 $v = $val;
 $3 = $2;
 $d = $3;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(8);
  if (!($5)) {
   break;
  }
  $6 = $d;
  $7 = ((($6)) + 16|0);
  $8 = HEAP16[$7>>1]|0;
  $9 = $8 << 16 >> 16;
  $10 = ($9|0)==(0);
  if ($10) {
   $11 = $d;
   $12 = ((($11)) + 32|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = $13 << 16 >> 16;
   $15 = ($14|0)==(0);
   if ($15) {
    $16 = $d;
    $17 = ((($16)) + 48|0);
    $18 = HEAP16[$17>>1]|0;
    $19 = $18 << 16 >> 16;
    $20 = ($19|0)==(0);
    if ($20) {
     $21 = $d;
     $22 = ((($21)) + 64|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23 << 16 >> 16;
     $25 = ($24|0)==(0);
     if ($25) {
      $26 = $d;
      $27 = ((($26)) + 80|0);
      $28 = HEAP16[$27>>1]|0;
      $29 = $28 << 16 >> 16;
      $30 = ($29|0)==(0);
      if ($30) {
       $31 = $d;
       $32 = ((($31)) + 96|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = $33 << 16 >> 16;
       $35 = ($34|0)==(0);
       if ($35) {
        $36 = $d;
        $37 = ((($36)) + 112|0);
        $38 = HEAP16[$37>>1]|0;
        $39 = $38 << 16 >> 16;
        $40 = ($39|0)==(0);
        if ($40) {
         $41 = $d;
         $42 = HEAP16[$41>>1]|0;
         $43 = $42 << 16 >> 16;
         $44 = $43 << 2;
         $dcterm = $44;
         $45 = $dcterm;
         $46 = $v;
         $47 = ((($46)) + 224|0);
         HEAP32[$47>>2] = $45;
         $48 = $v;
         $49 = ((($48)) + 192|0);
         HEAP32[$49>>2] = $45;
         $50 = $v;
         $51 = ((($50)) + 160|0);
         HEAP32[$51>>2] = $45;
         $52 = $v;
         $53 = ((($52)) + 128|0);
         HEAP32[$53>>2] = $45;
         $54 = $v;
         $55 = ((($54)) + 96|0);
         HEAP32[$55>>2] = $45;
         $56 = $v;
         $57 = ((($56)) + 64|0);
         HEAP32[$57>>2] = $45;
         $58 = $v;
         $59 = ((($58)) + 32|0);
         HEAP32[$59>>2] = $45;
         $60 = $v;
         HEAP32[$60>>2] = $45;
        } else {
         label = 11;
        }
       } else {
        label = 11;
       }
      } else {
       label = 11;
      }
     } else {
      label = 11;
     }
    } else {
     label = 11;
    }
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
  if ((label|0) == 11) {
   label = 0;
   $61 = $d;
   $62 = ((($61)) + 32|0);
   $63 = HEAP16[$62>>1]|0;
   $64 = $63 << 16 >> 16;
   $p2 = $64;
   $65 = $d;
   $66 = ((($65)) + 96|0);
   $67 = HEAP16[$66>>1]|0;
   $68 = $67 << 16 >> 16;
   $p3 = $68;
   $69 = $p2;
   $70 = $p3;
   $71 = (($69) + ($70))|0;
   $72 = ($71*2217)|0;
   $p1 = $72;
   $73 = $p1;
   $74 = $p3;
   $75 = Math_imul($74, -7567)|0;
   $76 = (($73) + ($75))|0;
   $t2 = $76;
   $77 = $p1;
   $78 = $p2;
   $79 = ($78*3135)|0;
   $80 = (($77) + ($79))|0;
   $t3 = $80;
   $81 = $d;
   $82 = HEAP16[$81>>1]|0;
   $83 = $82 << 16 >> 16;
   $p2 = $83;
   $84 = $d;
   $85 = ((($84)) + 64|0);
   $86 = HEAP16[$85>>1]|0;
   $87 = $86 << 16 >> 16;
   $p3 = $87;
   $88 = $p2;
   $89 = $p3;
   $90 = (($88) + ($89))|0;
   $91 = $90 << 12;
   $t0 = $91;
   $92 = $p2;
   $93 = $p3;
   $94 = (($92) - ($93))|0;
   $95 = $94 << 12;
   $t1 = $95;
   $96 = $t0;
   $97 = $t3;
   $98 = (($96) + ($97))|0;
   $x0 = $98;
   $99 = $t0;
   $100 = $t3;
   $101 = (($99) - ($100))|0;
   $x3 = $101;
   $102 = $t1;
   $103 = $t2;
   $104 = (($102) + ($103))|0;
   $x1 = $104;
   $105 = $t1;
   $106 = $t2;
   $107 = (($105) - ($106))|0;
   $x2 = $107;
   $108 = $d;
   $109 = ((($108)) + 112|0);
   $110 = HEAP16[$109>>1]|0;
   $111 = $110 << 16 >> 16;
   $t0 = $111;
   $112 = $d;
   $113 = ((($112)) + 80|0);
   $114 = HEAP16[$113>>1]|0;
   $115 = $114 << 16 >> 16;
   $t1 = $115;
   $116 = $d;
   $117 = ((($116)) + 48|0);
   $118 = HEAP16[$117>>1]|0;
   $119 = $118 << 16 >> 16;
   $t2 = $119;
   $120 = $d;
   $121 = ((($120)) + 16|0);
   $122 = HEAP16[$121>>1]|0;
   $123 = $122 << 16 >> 16;
   $t3 = $123;
   $124 = $t0;
   $125 = $t2;
   $126 = (($124) + ($125))|0;
   $p3 = $126;
   $127 = $t1;
   $128 = $t3;
   $129 = (($127) + ($128))|0;
   $p4 = $129;
   $130 = $t0;
   $131 = $t3;
   $132 = (($130) + ($131))|0;
   $p1 = $132;
   $133 = $t1;
   $134 = $t2;
   $135 = (($133) + ($134))|0;
   $p2 = $135;
   $136 = $p3;
   $137 = $p4;
   $138 = (($136) + ($137))|0;
   $139 = ($138*4816)|0;
   $p5 = $139;
   $140 = $t0;
   $141 = ($140*1223)|0;
   $t0 = $141;
   $142 = $t1;
   $143 = ($142*8410)|0;
   $t1 = $143;
   $144 = $t2;
   $145 = ($144*12586)|0;
   $t2 = $145;
   $146 = $t3;
   $147 = ($146*6149)|0;
   $t3 = $147;
   $148 = $p5;
   $149 = $p1;
   $150 = Math_imul($149, -3685)|0;
   $151 = (($148) + ($150))|0;
   $p1 = $151;
   $152 = $p5;
   $153 = $p2;
   $154 = Math_imul($153, -10497)|0;
   $155 = (($152) + ($154))|0;
   $p2 = $155;
   $156 = $p3;
   $157 = Math_imul($156, -8034)|0;
   $p3 = $157;
   $158 = $p4;
   $159 = Math_imul($158, -1597)|0;
   $p4 = $159;
   $160 = $p1;
   $161 = $p4;
   $162 = (($160) + ($161))|0;
   $163 = $t3;
   $164 = (($163) + ($162))|0;
   $t3 = $164;
   $165 = $p2;
   $166 = $p3;
   $167 = (($165) + ($166))|0;
   $168 = $t2;
   $169 = (($168) + ($167))|0;
   $t2 = $169;
   $170 = $p2;
   $171 = $p4;
   $172 = (($170) + ($171))|0;
   $173 = $t1;
   $174 = (($173) + ($172))|0;
   $t1 = $174;
   $175 = $p1;
   $176 = $p3;
   $177 = (($175) + ($176))|0;
   $178 = $t0;
   $179 = (($178) + ($177))|0;
   $t0 = $179;
   $180 = $x0;
   $181 = (($180) + 512)|0;
   $x0 = $181;
   $182 = $x1;
   $183 = (($182) + 512)|0;
   $x1 = $183;
   $184 = $x2;
   $185 = (($184) + 512)|0;
   $x2 = $185;
   $186 = $x3;
   $187 = (($186) + 512)|0;
   $x3 = $187;
   $188 = $x0;
   $189 = $t3;
   $190 = (($188) + ($189))|0;
   $191 = $190 >> 10;
   $192 = $v;
   HEAP32[$192>>2] = $191;
   $193 = $x0;
   $194 = $t3;
   $195 = (($193) - ($194))|0;
   $196 = $195 >> 10;
   $197 = $v;
   $198 = ((($197)) + 224|0);
   HEAP32[$198>>2] = $196;
   $199 = $x1;
   $200 = $t2;
   $201 = (($199) + ($200))|0;
   $202 = $201 >> 10;
   $203 = $v;
   $204 = ((($203)) + 32|0);
   HEAP32[$204>>2] = $202;
   $205 = $x1;
   $206 = $t2;
   $207 = (($205) - ($206))|0;
   $208 = $207 >> 10;
   $209 = $v;
   $210 = ((($209)) + 192|0);
   HEAP32[$210>>2] = $208;
   $211 = $x2;
   $212 = $t1;
   $213 = (($211) + ($212))|0;
   $214 = $213 >> 10;
   $215 = $v;
   $216 = ((($215)) + 64|0);
   HEAP32[$216>>2] = $214;
   $217 = $x2;
   $218 = $t1;
   $219 = (($217) - ($218))|0;
   $220 = $219 >> 10;
   $221 = $v;
   $222 = ((($221)) + 160|0);
   HEAP32[$222>>2] = $220;
   $223 = $x3;
   $224 = $t0;
   $225 = (($223) + ($224))|0;
   $226 = $225 >> 10;
   $227 = $v;
   $228 = ((($227)) + 96|0);
   HEAP32[$228>>2] = $226;
   $229 = $x3;
   $230 = $t0;
   $231 = (($229) - ($230))|0;
   $232 = $231 >> 10;
   $233 = $v;
   $234 = ((($233)) + 128|0);
   HEAP32[$234>>2] = $232;
  }
  $235 = $i;
  $236 = (($235) + 1)|0;
  $i = $236;
  $237 = $d;
  $238 = ((($237)) + 2|0);
  $d = $238;
  $239 = $v;
  $240 = ((($239)) + 4|0);
  $v = $240;
 }
 $i = 0;
 $v = $val;
 $241 = $0;
 $o = $241;
 while(1) {
  $242 = $i;
  $243 = ($242|0)<(8);
  if (!($243)) {
   break;
  }
  $244 = $v;
  $245 = ((($244)) + 8|0);
  $246 = HEAP32[$245>>2]|0;
  $p26 = $246;
  $247 = $v;
  $248 = ((($247)) + 24|0);
  $249 = HEAP32[$248>>2]|0;
  $p37 = $249;
  $250 = $p26;
  $251 = $p37;
  $252 = (($250) + ($251))|0;
  $253 = ($252*2217)|0;
  $p15 = $253;
  $254 = $p15;
  $255 = $p37;
  $256 = Math_imul($255, -7567)|0;
  $257 = (($254) + ($256))|0;
  $t23 = $257;
  $258 = $p15;
  $259 = $p26;
  $260 = ($259*3135)|0;
  $261 = (($258) + ($260))|0;
  $t34 = $261;
  $262 = $v;
  $263 = HEAP32[$262>>2]|0;
  $p26 = $263;
  $264 = $v;
  $265 = ((($264)) + 16|0);
  $266 = HEAP32[$265>>2]|0;
  $p37 = $266;
  $267 = $p26;
  $268 = $p37;
  $269 = (($267) + ($268))|0;
  $270 = $269 << 12;
  $t01 = $270;
  $271 = $p26;
  $272 = $p37;
  $273 = (($271) - ($272))|0;
  $274 = $273 << 12;
  $t12 = $274;
  $275 = $t01;
  $276 = $t34;
  $277 = (($275) + ($276))|0;
  $x010 = $277;
  $278 = $t01;
  $279 = $t34;
  $280 = (($278) - ($279))|0;
  $x313 = $280;
  $281 = $t12;
  $282 = $t23;
  $283 = (($281) + ($282))|0;
  $x111 = $283;
  $284 = $t12;
  $285 = $t23;
  $286 = (($284) - ($285))|0;
  $x212 = $286;
  $287 = $v;
  $288 = ((($287)) + 28|0);
  $289 = HEAP32[$288>>2]|0;
  $t01 = $289;
  $290 = $v;
  $291 = ((($290)) + 20|0);
  $292 = HEAP32[$291>>2]|0;
  $t12 = $292;
  $293 = $v;
  $294 = ((($293)) + 12|0);
  $295 = HEAP32[$294>>2]|0;
  $t23 = $295;
  $296 = $v;
  $297 = ((($296)) + 4|0);
  $298 = HEAP32[$297>>2]|0;
  $t34 = $298;
  $299 = $t01;
  $300 = $t23;
  $301 = (($299) + ($300))|0;
  $p37 = $301;
  $302 = $t12;
  $303 = $t34;
  $304 = (($302) + ($303))|0;
  $p48 = $304;
  $305 = $t01;
  $306 = $t34;
  $307 = (($305) + ($306))|0;
  $p15 = $307;
  $308 = $t12;
  $309 = $t23;
  $310 = (($308) + ($309))|0;
  $p26 = $310;
  $311 = $p37;
  $312 = $p48;
  $313 = (($311) + ($312))|0;
  $314 = ($313*4816)|0;
  $p59 = $314;
  $315 = $t01;
  $316 = ($315*1223)|0;
  $t01 = $316;
  $317 = $t12;
  $318 = ($317*8410)|0;
  $t12 = $318;
  $319 = $t23;
  $320 = ($319*12586)|0;
  $t23 = $320;
  $321 = $t34;
  $322 = ($321*6149)|0;
  $t34 = $322;
  $323 = $p59;
  $324 = $p15;
  $325 = Math_imul($324, -3685)|0;
  $326 = (($323) + ($325))|0;
  $p15 = $326;
  $327 = $p59;
  $328 = $p26;
  $329 = Math_imul($328, -10497)|0;
  $330 = (($327) + ($329))|0;
  $p26 = $330;
  $331 = $p37;
  $332 = Math_imul($331, -8034)|0;
  $p37 = $332;
  $333 = $p48;
  $334 = Math_imul($333, -1597)|0;
  $p48 = $334;
  $335 = $p15;
  $336 = $p48;
  $337 = (($335) + ($336))|0;
  $338 = $t34;
  $339 = (($338) + ($337))|0;
  $t34 = $339;
  $340 = $p26;
  $341 = $p37;
  $342 = (($340) + ($341))|0;
  $343 = $t23;
  $344 = (($343) + ($342))|0;
  $t23 = $344;
  $345 = $p26;
  $346 = $p48;
  $347 = (($345) + ($346))|0;
  $348 = $t12;
  $349 = (($348) + ($347))|0;
  $t12 = $349;
  $350 = $p15;
  $351 = $p37;
  $352 = (($350) + ($351))|0;
  $353 = $t01;
  $354 = (($353) + ($352))|0;
  $t01 = $354;
  $355 = $x010;
  $356 = (($355) + 16842752)|0;
  $x010 = $356;
  $357 = $x111;
  $358 = (($357) + 16842752)|0;
  $x111 = $358;
  $359 = $x212;
  $360 = (($359) + 16842752)|0;
  $x212 = $360;
  $361 = $x313;
  $362 = (($361) + 16842752)|0;
  $x313 = $362;
  $363 = $x010;
  $364 = $t34;
  $365 = (($363) + ($364))|0;
  $366 = $365 >> 17;
  $367 = (__ZL11stbi__clampi($366)|0);
  $368 = $o;
  HEAP8[$368>>0] = $367;
  $369 = $x010;
  $370 = $t34;
  $371 = (($369) - ($370))|0;
  $372 = $371 >> 17;
  $373 = (__ZL11stbi__clampi($372)|0);
  $374 = $o;
  $375 = ((($374)) + 7|0);
  HEAP8[$375>>0] = $373;
  $376 = $x111;
  $377 = $t23;
  $378 = (($376) + ($377))|0;
  $379 = $378 >> 17;
  $380 = (__ZL11stbi__clampi($379)|0);
  $381 = $o;
  $382 = ((($381)) + 1|0);
  HEAP8[$382>>0] = $380;
  $383 = $x111;
  $384 = $t23;
  $385 = (($383) - ($384))|0;
  $386 = $385 >> 17;
  $387 = (__ZL11stbi__clampi($386)|0);
  $388 = $o;
  $389 = ((($388)) + 6|0);
  HEAP8[$389>>0] = $387;
  $390 = $x212;
  $391 = $t12;
  $392 = (($390) + ($391))|0;
  $393 = $392 >> 17;
  $394 = (__ZL11stbi__clampi($393)|0);
  $395 = $o;
  $396 = ((($395)) + 2|0);
  HEAP8[$396>>0] = $394;
  $397 = $x212;
  $398 = $t12;
  $399 = (($397) - ($398))|0;
  $400 = $399 >> 17;
  $401 = (__ZL11stbi__clampi($400)|0);
  $402 = $o;
  $403 = ((($402)) + 5|0);
  HEAP8[$403>>0] = $401;
  $404 = $x313;
  $405 = $t01;
  $406 = (($404) + ($405))|0;
  $407 = $406 >> 17;
  $408 = (__ZL11stbi__clampi($407)|0);
  $409 = $o;
  $410 = ((($409)) + 3|0);
  HEAP8[$410>>0] = $408;
  $411 = $x313;
  $412 = $t01;
  $413 = (($411) - ($412))|0;
  $414 = $413 >> 17;
  $415 = (__ZL11stbi__clampi($414)|0);
  $416 = $o;
  $417 = ((($416)) + 4|0);
  HEAP8[$417>>0] = $415;
  $418 = $i;
  $419 = (($418) + 1)|0;
  $i = $419;
  $420 = $v;
  $421 = ((($420)) + 32|0);
  $v = $421;
  $422 = $1;
  $423 = $o;
  $424 = (($423) + ($422)|0);
  $o = $424;
 }
 STACKTOP = sp;return;
}
function __ZL11stbi__clampi($x) {
 $x = $x|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $x;
 $2 = $1;
 $3 = ($2>>>0)>(255);
 do {
  if ($3) {
   $4 = $1;
   $5 = ($4|0)<(0);
   if ($5) {
    $0 = 0;
    break;
   }
   $6 = $1;
   $7 = ($6|0)>(255);
   if ($7) {
    $0 = -1;
   } else {
    label = 6;
   }
  } else {
   label = 6;
  }
 } while(0);
 if ((label|0) == 6) {
  $8 = $1;
  $9 = $8&255;
  $0 = $9;
 }
 $10 = $0;
 STACKTOP = sp;return ($10|0);
}
function __ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii($out,$y,$pcb,$pcr,$count,$step) {
 $out = $out|0;
 $y = $y|0;
 $pcb = $pcb|0;
 $pcr = $pcr|0;
 $count = $count|0;
 $step = $step|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $b = 0, $cb = 0, $cr = 0, $g = 0, $i = 0, $r = 0, $y_fixed = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $y;
 $2 = $pcb;
 $3 = $pcr;
 $4 = $count;
 $5 = $step;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = $4;
  $8 = ($6|0)<($7|0);
  if (!($8)) {
   break;
  }
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12&255;
  $14 = $13 << 20;
  $15 = (($14) + 524288)|0;
  $y_fixed = $15;
  $16 = $i;
  $17 = $3;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (($20) - 128)|0;
  $cr = $21;
  $22 = $i;
  $23 = $2;
  $24 = (($23) + ($22)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($26) - 128)|0;
  $cb = $27;
  $28 = $y_fixed;
  $29 = $cr;
  $30 = Math_imul($29, 1470208)|0;
  $31 = (($28) + ($30))|0;
  $r = $31;
  $32 = $y_fixed;
  $33 = $cr;
  $34 = Math_imul($33, -748800)|0;
  $35 = (($32) + ($34))|0;
  $36 = $cb;
  $37 = Math_imul($36, -360960)|0;
  $38 = $37 & -65536;
  $39 = (($35) + ($38))|0;
  $g = $39;
  $40 = $y_fixed;
  $41 = $cb;
  $42 = Math_imul($41, 1858048)|0;
  $43 = (($40) + ($42))|0;
  $b = $43;
  $44 = $r;
  $45 = $44 >> 20;
  $r = $45;
  $46 = $g;
  $47 = $46 >> 20;
  $g = $47;
  $48 = $b;
  $49 = $48 >> 20;
  $b = $49;
  $50 = $r;
  $51 = ($50>>>0)>(255);
  do {
   if ($51) {
    $52 = $r;
    $53 = ($52|0)<(0);
    if ($53) {
     $r = 0;
     break;
    } else {
     $r = 255;
     break;
    }
   }
  } while(0);
  $54 = $g;
  $55 = ($54>>>0)>(255);
  do {
   if ($55) {
    $56 = $g;
    $57 = ($56|0)<(0);
    if ($57) {
     $g = 0;
     break;
    } else {
     $g = 255;
     break;
    }
   }
  } while(0);
  $58 = $b;
  $59 = ($58>>>0)>(255);
  do {
   if ($59) {
    $60 = $b;
    $61 = ($60|0)<(0);
    if ($61) {
     $b = 0;
     break;
    } else {
     $b = 255;
     break;
    }
   }
  } while(0);
  $62 = $r;
  $63 = $62&255;
  $64 = $0;
  HEAP8[$64>>0] = $63;
  $65 = $g;
  $66 = $65&255;
  $67 = $0;
  $68 = ((($67)) + 1|0);
  HEAP8[$68>>0] = $66;
  $69 = $b;
  $70 = $69&255;
  $71 = $0;
  $72 = ((($71)) + 2|0);
  HEAP8[$72>>0] = $70;
  $73 = $0;
  $74 = ((($73)) + 3|0);
  HEAP8[$74>>0] = -1;
  $75 = $5;
  $76 = $0;
  $77 = (($76) + ($75)|0);
  $0 = $77;
  $78 = $i;
  $79 = (($78) + 1)|0;
  $i = $79;
 }
 STACKTOP = sp;return;
}
function __ZL23stbi__resample_row_hv_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $i = 0;
 var $t0 = 0, $t1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $4;
 $7 = ($6|0)==(1);
 $8 = $2;
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = ($10*3)|0;
 $12 = $3;
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = (($11) + ($14))|0;
 if ($7) {
  $16 = (($15) + 2)|0;
  $17 = $16 >> 2;
  $18 = $17&255;
  $19 = $1;
  $20 = ((($19)) + 1|0);
  HEAP8[$20>>0] = $18;
  $21 = $1;
  HEAP8[$21>>0] = $18;
  $22 = $1;
  $0 = $22;
  $78 = $0;
  STACKTOP = sp;return ($78|0);
 }
 $t1 = $15;
 $23 = $t1;
 $24 = (($23) + 2)|0;
 $25 = $24 >> 2;
 $26 = $25&255;
 $27 = $1;
 HEAP8[$27>>0] = $26;
 $i = 1;
 while(1) {
  $28 = $i;
  $29 = $4;
  $30 = ($28|0)<($29|0);
  $31 = $t1;
  if (!($30)) {
   break;
  }
  $t0 = $31;
  $32 = $i;
  $33 = $2;
  $34 = (($33) + ($32)|0);
  $35 = HEAP8[$34>>0]|0;
  $36 = $35&255;
  $37 = ($36*3)|0;
  $38 = $i;
  $39 = $3;
  $40 = (($39) + ($38)|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (($37) + ($42))|0;
  $t1 = $43;
  $44 = $t0;
  $45 = ($44*3)|0;
  $46 = $t1;
  $47 = (($45) + ($46))|0;
  $48 = (($47) + 8)|0;
  $49 = $48 >> 4;
  $50 = $49&255;
  $51 = $i;
  $52 = $51<<1;
  $53 = (($52) - 1)|0;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  HEAP8[$55>>0] = $50;
  $56 = $t1;
  $57 = ($56*3)|0;
  $58 = $t0;
  $59 = (($57) + ($58))|0;
  $60 = (($59) + 8)|0;
  $61 = $60 >> 4;
  $62 = $61&255;
  $63 = $i;
  $64 = $63<<1;
  $65 = $1;
  $66 = (($65) + ($64)|0);
  HEAP8[$66>>0] = $62;
  $67 = $i;
  $68 = (($67) + 1)|0;
  $i = $68;
 }
 $69 = (($31) + 2)|0;
 $70 = $69 >> 2;
 $71 = $70&255;
 $72 = $4;
 $73 = $72<<1;
 $74 = (($73) - 1)|0;
 $75 = $1;
 $76 = (($75) + ($74)|0);
 HEAP8[$76>>0] = $71;
 $77 = $1;
 $0 = $77;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZL24stbi__decode_jpeg_headerP10stbi__jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $m = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $scan;
 $3 = $1;
 $4 = ((($3)) + 18116|0);
 HEAP8[$4>>0] = -1;
 $5 = $1;
 $6 = (__ZL16stbi__get_markerP10stbi__jpeg($5)|0);
 $7 = $6&255;
 $m = $7;
 $8 = $m;
 $9 = ($8|0)==(216);
 if (!($9)) {
  $10 = (__ZL9stbi__errPKc(1998)|0);
  $0 = $10;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $11 = $2;
 $12 = ($11|0)==(1);
 if ($12) {
  $0 = 1;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 $13 = $1;
 $14 = (__ZL16stbi__get_markerP10stbi__jpeg($13)|0);
 $15 = $14&255;
 $m = $15;
 L9: while(1) {
  $16 = $m;
  $17 = ($16|0)==(192);
  $18 = $m;
  $19 = ($18|0)==(193);
  $or$cond = $17 | $19;
  if ($or$cond) {
   $23 = 1;
  } else {
   $20 = $m;
   $21 = ($20|0)==(194);
   $23 = $21;
  }
  $22 = $23 ^ 1;
  if (!($22)) {
   label = 16;
   break;
  }
  $24 = $1;
  $25 = $m;
  $26 = (__ZL20stbi__process_markerP10stbi__jpegi($24,$25)|0);
  $27 = ($26|0)!=(0);
  if (!($27)) {
   label = 10;
   break;
  }
  $28 = $1;
  $29 = (__ZL16stbi__get_markerP10stbi__jpeg($28)|0);
  $30 = $29&255;
  $m = $30;
  while(1) {
   $31 = $m;
   $32 = ($31|0)==(255);
   if (!($32)) {
    continue L9;
   }
   $33 = $1;
   $34 = HEAP32[$33>>2]|0;
   $35 = (__ZL12stbi__at_eofP13stbi__context($34)|0);
   $36 = ($35|0)!=(0);
   if ($36) {
    label = 14;
    break L9;
   }
   $38 = $1;
   $39 = (__ZL16stbi__get_markerP10stbi__jpeg($38)|0);
   $40 = $39&255;
   $m = $40;
  }
 }
 if ((label|0) == 10) {
  $0 = 0;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 14) {
  $37 = (__ZL9stbi__errPKc(2171)|0);
  $0 = $37;
  $50 = $0;
  STACKTOP = sp;return ($50|0);
 }
 else if ((label|0) == 16) {
  $41 = $m;
  $42 = ($41|0)==(194);
  $43 = $42&1;
  $44 = $1;
  $45 = ((($44)) + 18124|0);
  HEAP32[$45>>2] = $43;
  $46 = $1;
  $47 = $2;
  $48 = (__ZL26stbi__process_frame_headerP10stbi__jpegi($46,$47)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   $0 = 1;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  } else {
   $0 = 0;
   $50 = $0;
   STACKTOP = sp;return ($50|0);
  }
 }
 return (0)|0;
}
function __ZL16stbi__get_markerP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $1;
 $3 = ((($2)) + 18116|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ($5|0)!=(255);
 $7 = $1;
 if ($6) {
  $8 = ((($7)) + 18116|0);
  $9 = HEAP8[$8>>0]|0;
  $x = $9;
  $10 = $1;
  $11 = ((($10)) + 18116|0);
  HEAP8[$11>>0] = -1;
  $12 = $x;
  $0 = $12;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 $13 = HEAP32[$7>>2]|0;
 $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
 $x = $14;
 $15 = $x;
 $16 = $15&255;
 $17 = ($16|0)!=(255);
 if ($17) {
  $0 = -1;
  $25 = $0;
  STACKTOP = sp;return ($25|0);
 }
 while(1) {
  $18 = $x;
  $19 = $18&255;
  $20 = ($19|0)==(255);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = HEAP32[$21>>2]|0;
  $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
  $x = $23;
 }
 $24 = $x;
 $0 = $24;
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function __ZL10stbi__get8P13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 168|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ((($5)) + 172|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($4>>>0)<($7>>>0);
 $9 = $1;
 if ($8) {
  $10 = ((($9)) + 168|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($11)) + 1|0);
  HEAP32[$10>>2] = $12;
  $13 = HEAP8[$11>>0]|0;
  $0 = $13;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 $14 = ((($9)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = $1;
  __ZL19stbi__refill_bufferP13stbi__context($17);
  $18 = $1;
  $19 = ((($18)) + 168|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($20)) + 1|0);
  HEAP32[$19>>2] = $21;
  $22 = HEAP8[$20>>0]|0;
  $0 = $22;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 } else {
  $0 = 0;
  $23 = $0;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function __ZL20stbi__process_markerP10stbi__jpegi($z,$m) {
 $z = $z|0;
 $m = $m|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $L = 0, $i = 0, $i1 = 0, $n = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, $p = 0, $q = 0, $q2 = 0, $sizes = 0, $t = 0, $tc = 0, $th = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $sizes = sp + 24|0;
 $1 = $z;
 $2 = $m;
 $3 = $2;
 switch ($3|0) {
 case 255:  {
  $4 = (__ZL9stbi__errPKc(2005)|0);
  $0 = $4;
  $154 = $0;
  STACKTOP = sp;return ($154|0);
  break;
 }
 case 221:  {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  $7 = (__ZL13stbi__get16beP13stbi__context($6)|0);
  $8 = ($7|0)!=(4);
  if ($8) {
   $9 = (__ZL9stbi__errPKc(2021)|0);
   $0 = $9;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  } else {
   $10 = $1;
   $11 = HEAP32[$10>>2]|0;
   $12 = (__ZL13stbi__get16beP13stbi__context($11)|0);
   $13 = $1;
   $14 = ((($13)) + 18168|0);
   HEAP32[$14>>2] = $12;
   $0 = 1;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  break;
 }
 case 219:  {
  $15 = $1;
  $16 = HEAP32[$15>>2]|0;
  $17 = (__ZL13stbi__get16beP13stbi__context($16)|0);
  $18 = (($17) - 2)|0;
  $L = $18;
  while(1) {
   $19 = $L;
   $20 = ($19|0)>(0);
   if (!($20)) {
    label = 16;
    break;
   }
   $21 = $1;
   $22 = HEAP32[$21>>2]|0;
   $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
   $24 = $23&255;
   $q = $24;
   $25 = $q;
   $26 = $25 >> 4;
   $p = $26;
   $27 = $q;
   $28 = $27 & 15;
   $t = $28;
   $29 = $p;
   $30 = ($29|0)!=(0);
   if ($30) {
    label = 9;
    break;
   }
   $32 = $t;
   $33 = ($32|0)>(3);
   if ($33) {
    label = 11;
    break;
   }
   $i = 0;
   while(1) {
    $35 = $i;
    $36 = ($35|0)<(64);
    if (!($36)) {
     break;
    }
    $37 = $1;
    $38 = HEAP32[$37>>2]|0;
    $39 = (__ZL10stbi__get8P13stbi__context($38)|0);
    $40 = $i;
    $41 = (2060 + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $t;
    $45 = $1;
    $46 = ((($45)) + 13444|0);
    $47 = (($46) + ($44<<6)|0);
    $48 = (($47) + ($43)|0);
    HEAP8[$48>>0] = $39;
    $49 = $i;
    $50 = (($49) + 1)|0;
    $i = $50;
   }
   $51 = $L;
   $52 = (($51) - 65)|0;
   $L = $52;
  }
  if ((label|0) == 9) {
   $31 = (__ZL9stbi__errPKc(2033)|0);
   $0 = $31;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 11) {
   $34 = (__ZL9stbi__errPKc(2046)|0);
   $0 = $34;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 16) {
   $53 = $L;
   $54 = ($53|0)==(0);
   $55 = $54&1;
   $0 = $55;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  break;
 }
 case 196:  {
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = (__ZL13stbi__get16beP13stbi__context($57)|0);
  $59 = (($58) - 2)|0;
  $L = $59;
  while(1) {
   $60 = $L;
   $61 = ($60|0)>(0);
   if (!($61)) {
    label = 37;
    break;
   }
   $n = 0;
   $62 = $1;
   $63 = HEAP32[$62>>2]|0;
   $64 = (__ZL10stbi__get8P13stbi__context($63)|0);
   $65 = $64&255;
   $q2 = $65;
   $66 = $q2;
   $67 = $66 >> 4;
   $tc = $67;
   $68 = $q2;
   $69 = $68 & 15;
   $th = $69;
   $70 = $tc;
   $71 = ($70|0)>(1);
   $72 = $th;
   $73 = ($72|0)>(3);
   $or$cond = $71 | $73;
   if ($or$cond) {
    label = 20;
    break;
   }
   $i1 = 0;
   while(1) {
    $75 = $i1;
    $76 = ($75|0)<(16);
    if (!($76)) {
     break;
    }
    $77 = $1;
    $78 = HEAP32[$77>>2]|0;
    $79 = (__ZL10stbi__get8P13stbi__context($78)|0);
    $80 = $79&255;
    $81 = $i1;
    $82 = (($sizes) + ($81<<2)|0);
    HEAP32[$82>>2] = $80;
    $83 = $i1;
    $84 = (($sizes) + ($83<<2)|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = $n;
    $87 = (($86) + ($85))|0;
    $n = $87;
    $88 = $i1;
    $89 = (($88) + 1)|0;
    $i1 = $89;
   }
   $90 = $L;
   $91 = (($90) - 17)|0;
   $L = $91;
   $92 = $tc;
   $93 = ($92|0)==(0);
   $94 = $1;
   if ($93) {
    $95 = ((($94)) + 4|0);
    $96 = $th;
    $97 = (($95) + (($96*1680)|0)|0);
    $98 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($97,$sizes)|0);
    $99 = ($98|0)!=(0);
    if (!($99)) {
     label = 26;
     break;
    }
    $100 = $th;
    $101 = $1;
    $102 = ((($101)) + 4|0);
    $103 = (($102) + (($100*1680)|0)|0);
    $104 = ((($103)) + 1024|0);
    $v = $104;
   } else {
    $105 = ((($94)) + 6724|0);
    $106 = $th;
    $107 = (($105) + (($106*1680)|0)|0);
    $108 = (__ZL19stbi__build_huffmanP13stbi__huffmanPi($107,$sizes)|0);
    $109 = ($108|0)!=(0);
    if (!($109)) {
     label = 29;
     break;
    }
    $110 = $th;
    $111 = $1;
    $112 = ((($111)) + 6724|0);
    $113 = (($112) + (($110*1680)|0)|0);
    $114 = ((($113)) + 1024|0);
    $v = $114;
   }
   $i1 = 0;
   while(1) {
    $115 = $i1;
    $116 = $n;
    $117 = ($115|0)<($116|0);
    if (!($117)) {
     break;
    }
    $118 = $1;
    $119 = HEAP32[$118>>2]|0;
    $120 = (__ZL10stbi__get8P13stbi__context($119)|0);
    $121 = $i1;
    $122 = $v;
    $123 = (($122) + ($121)|0);
    HEAP8[$123>>0] = $120;
    $124 = $i1;
    $125 = (($124) + 1)|0;
    $i1 = $125;
   }
   $126 = $tc;
   $127 = ($126|0)!=(0);
   if ($127) {
    $128 = $th;
    $129 = $1;
    $130 = ((($129)) + 13700|0);
    $131 = (($130) + ($128<<10)|0);
    $132 = $1;
    $133 = ((($132)) + 6724|0);
    $134 = $th;
    $135 = (($133) + (($134*1680)|0)|0);
    __ZL19stbi__build_fast_acPsP13stbi__huffman($131,$135);
   }
   $136 = $n;
   $137 = $L;
   $138 = (($137) - ($136))|0;
   $L = $138;
  }
  if ((label|0) == 20) {
   $74 = (__ZL9stbi__errPKc(2139)|0);
   $0 = $74;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 26) {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 29) {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  else if ((label|0) == 37) {
   $139 = $L;
   $140 = ($139|0)==(0);
   $141 = $140&1;
   $0 = $141;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
  break;
 }
 default: {
  $142 = $2;
  $143 = ($142|0)>=(224);
  $144 = $2;
  $145 = ($144|0)<=(239);
  $or$cond3 = $143 & $145;
  $146 = $2;
  $147 = ($146|0)==(254);
  $or$cond5 = $or$cond3 | $147;
  if ($or$cond5) {
   $148 = $1;
   $149 = HEAP32[$148>>2]|0;
   $150 = $1;
   $151 = HEAP32[$150>>2]|0;
   $152 = (__ZL13stbi__get16beP13stbi__context($151)|0);
   $153 = (($152) - 2)|0;
   __ZL10stbi__skipP13stbi__contexti($149,$153);
   $0 = 1;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  } else {
   $0 = 0;
   $154 = $0;
   STACKTOP = sp;return ($154|0);
  }
 }
 }
 return (0)|0;
}
function __ZL13stbi__get16beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL10stbi__get8P13stbi__context($1)|0);
 $3 = $2&255;
 $z = $3;
 $4 = $z;
 $5 = $4 << 8;
 $6 = $0;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = (($5) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL19stbi__build_huffmanP13stbi__huffmanPi($h,$count) {
 $h = $h|0;
 $count = $count|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0;
 var $i = 0, $j = 0, $k = 0, $m = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $h;
 $2 = $count;
 $k = 0;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(16);
  if (!($4)) {
   break;
  }
  $j = 0;
  while(1) {
   $5 = $j;
   $6 = $i;
   $7 = $2;
   $8 = (($7) + ($6<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($5|0)<($9|0);
   $11 = $i;
   $12 = (($11) + 1)|0;
   if (!($10)) {
    break;
   }
   $13 = $12&255;
   $14 = $k;
   $15 = (($14) + 1)|0;
   $k = $15;
   $16 = $1;
   $17 = ((($16)) + 1280|0);
   $18 = (($17) + ($14)|0);
   HEAP8[$18>>0] = $13;
   $19 = $j;
   $20 = (($19) + 1)|0;
   $j = $20;
  }
  $i = $12;
 }
 $21 = $k;
 $22 = $1;
 $23 = ((($22)) + 1280|0);
 $24 = (($23) + ($21)|0);
 HEAP8[$24>>0] = 0;
 $code = 0;
 $k = 0;
 $j = 1;
 while(1) {
  $25 = $j;
  $26 = ($25|0)<=(16);
  if (!($26)) {
   break;
  }
  $27 = $k;
  $28 = $code;
  $29 = (($27) - ($28))|0;
  $30 = $j;
  $31 = $1;
  $32 = ((($31)) + 1612|0);
  $33 = (($32) + ($30<<2)|0);
  HEAP32[$33>>2] = $29;
  $34 = $k;
  $35 = $1;
  $36 = ((($35)) + 1280|0);
  $37 = (($36) + ($34)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = $j;
  $41 = ($39|0)==($40|0);
  if ($41) {
   while(1) {
    $42 = $k;
    $43 = $1;
    $44 = ((($43)) + 1280|0);
    $45 = (($44) + ($42)|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $j;
    $49 = ($47|0)==($48|0);
    $50 = $code;
    if (!($49)) {
     break;
    }
    $51 = (($50) + 1)|0;
    $code = $51;
    $52 = $50&65535;
    $53 = $k;
    $54 = (($53) + 1)|0;
    $k = $54;
    $55 = $1;
    $56 = ((($55)) + 512|0);
    $57 = (($56) + ($53<<1)|0);
    HEAP16[$57>>1] = $52;
   }
   $58 = (($50) - 1)|0;
   $59 = $j;
   $60 = 1 << $59;
   $61 = ($58|0)>=($60|0);
   if ($61) {
    label = 13;
    break;
   }
  }
  $63 = $code;
  $64 = $j;
  $65 = (16 - ($64))|0;
  $66 = $63 << $65;
  $67 = $j;
  $68 = $1;
  $69 = ((($68)) + 1540|0);
  $70 = (($69) + ($67<<2)|0);
  HEAP32[$70>>2] = $66;
  $71 = $code;
  $72 = $71 << 1;
  $code = $72;
  $73 = $j;
  $74 = (($73) + 1)|0;
  $j = $74;
 }
 if ((label|0) == 13) {
  $62 = (__ZL9stbi__errPKc(2154)|0);
  $0 = $62;
  $117 = $0;
  STACKTOP = sp;return ($117|0);
 }
 $75 = $j;
 $76 = $1;
 $77 = ((($76)) + 1540|0);
 $78 = (($77) + ($75<<2)|0);
 HEAP32[$78>>2] = -1;
 $79 = $1;
 _memset(($79|0),-1,512)|0;
 $i = 0;
 while(1) {
  $80 = $i;
  $81 = $k;
  $82 = ($80|0)<($81|0);
  if (!($82)) {
   break;
  }
  $83 = $i;
  $84 = $1;
  $85 = ((($84)) + 1280|0);
  $86 = (($85) + ($83)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $s = $88;
  $89 = $s;
  $90 = ($89|0)<=(9);
  L25: do {
   if ($90) {
    $91 = $i;
    $92 = $1;
    $93 = ((($92)) + 512|0);
    $94 = (($93) + ($91<<1)|0);
    $95 = HEAP16[$94>>1]|0;
    $96 = $95&65535;
    $97 = $s;
    $98 = (9 - ($97))|0;
    $99 = $96 << $98;
    $c = $99;
    $100 = $s;
    $101 = (9 - ($100))|0;
    $102 = 1 << $101;
    $m = $102;
    $j = 0;
    while(1) {
     $103 = $j;
     $104 = $m;
     $105 = ($103|0)<($104|0);
     if (!($105)) {
      break L25;
     }
     $106 = $i;
     $107 = $106&255;
     $108 = $c;
     $109 = $j;
     $110 = (($108) + ($109))|0;
     $111 = $1;
     $112 = (($111) + ($110)|0);
     HEAP8[$112>>0] = $107;
     $113 = $j;
     $114 = (($113) + 1)|0;
     $j = $114;
    }
   }
  } while(0);
  $115 = $i;
  $116 = (($115) + 1)|0;
  $i = $116;
 }
 $0 = 1;
 $117 = $0;
 STACKTOP = sp;return ($117|0);
}
function __ZL19stbi__build_fast_acPsP13stbi__huffman($fast_ac,$h) {
 $fast_ac = $fast_ac|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $fast = 0, $i = 0, $k = 0, $len = 0;
 var $m = 0, $magbits = 0, $or$cond = 0, $rs = 0, $run = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $fast_ac;
 $1 = $h;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(512);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $fast = $7;
  $8 = $i;
  $9 = $0;
  $10 = (($9) + ($8<<1)|0);
  HEAP16[$10>>1] = 0;
  $11 = $fast;
  $12 = $11&255;
  $13 = ($12|0)<(255);
  if ($13) {
   $14 = $fast;
   $15 = $14&255;
   $16 = $1;
   $17 = ((($16)) + 1024|0);
   $18 = (($17) + ($15)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $rs = $20;
   $21 = $rs;
   $22 = $21 >> 4;
   $23 = $22 & 15;
   $run = $23;
   $24 = $rs;
   $25 = $24 & 15;
   $magbits = $25;
   $26 = $fast;
   $27 = $26&255;
   $28 = $1;
   $29 = ((($28)) + 1280|0);
   $30 = (($29) + ($27)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = $31&255;
   $len = $32;
   $33 = $magbits;
   $34 = ($33|0)!=(0);
   if ($34) {
    $35 = $len;
    $36 = $magbits;
    $37 = (($35) + ($36))|0;
    $38 = ($37|0)<=(9);
    if ($38) {
     $39 = $i;
     $40 = $len;
     $41 = $39 << $40;
     $42 = $41 & 511;
     $43 = $magbits;
     $44 = (9 - ($43))|0;
     $45 = $42 >> $44;
     $k = $45;
     $46 = $magbits;
     $47 = (($46) - 1)|0;
     $48 = 1 << $47;
     $m = $48;
     $49 = $k;
     $50 = $m;
     $51 = ($49|0)<($50|0);
     if ($51) {
      $52 = $magbits;
      $53 = -1 << $52;
      $54 = (($53) + 1)|0;
      $55 = $k;
      $56 = (($55) + ($54))|0;
      $k = $56;
     }
     $57 = $k;
     $58 = ($57|0)>=(-128);
     $59 = $k;
     $60 = ($59|0)<=(127);
     $or$cond = $58 & $60;
     if ($or$cond) {
      $61 = $k;
      $62 = $61 << 8;
      $63 = $run;
      $64 = $63 << 4;
      $65 = (($62) + ($64))|0;
      $66 = $len;
      $67 = $magbits;
      $68 = (($66) + ($67))|0;
      $69 = (($65) + ($68))|0;
      $70 = $69&65535;
      $71 = $i;
      $72 = $0;
      $73 = (($72) + ($71<<1)|0);
      HEAP16[$73>>1] = $70;
     }
    }
   }
  }
  $74 = $i;
  $75 = (($74) + 1)|0;
  $i = $75;
 }
 STACKTOP = sp;return;
}
function __ZL10stbi__skipP13stbi__contexti($s,$n) {
 $s = $s|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $n;
 $2 = $1;
 $3 = ($2|0)<(0);
 $4 = $0;
 if ($3) {
  $5 = ((($4)) + 172|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = $0;
  $8 = ((($7)) + 168|0);
  HEAP32[$8>>2] = $6;
  STACKTOP = sp;return;
 }
 $9 = ((($4)) + 16|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)!=(0|0);
 if ($11) {
  $12 = $0;
  $13 = ((($12)) + 172|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $0;
  $16 = ((($15)) + 168|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $14;
  $19 = $17;
  $20 = (($18) - ($19))|0;
  $blen = $20;
  $21 = $blen;
  $22 = $1;
  $23 = ($21|0)<($22|0);
  if ($23) {
   $24 = $0;
   $25 = ((($24)) + 172|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = $0;
   $28 = ((($27)) + 168|0);
   HEAP32[$28>>2] = $26;
   $29 = $0;
   $30 = ((($29)) + 16|0);
   $31 = ((($30)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $0;
   $34 = ((($33)) + 28|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = $1;
   $37 = $blen;
   $38 = (($36) - ($37))|0;
   FUNCTION_TABLE_vii[$32 & 127]($35,$38);
   STACKTOP = sp;return;
  }
 }
 $39 = $1;
 $40 = $0;
 $41 = ((($40)) + 168|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = (($42) + ($39)|0);
 HEAP32[$41>>2] = $43;
 STACKTOP = sp;return;
}
function __ZL12stbi__at_eofP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 16|0);
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $1;
  $11 = ((($10)) + 28|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = (FUNCTION_TABLE_ii[$9 & 63]($12)|0);
  $14 = ($13|0)!=(0);
  if (!($14)) {
   $0 = 0;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
  $15 = $1;
  $16 = ((($15)) + 32|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)==(0);
  if ($18) {
   $0 = 1;
   $27 = $0;
   STACKTOP = sp;return ($27|0);
  }
 }
 $19 = $1;
 $20 = ((($19)) + 168|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $1;
 $23 = ((($22)) + 172|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($21>>>0)>=($24>>>0);
 $26 = $25&1;
 $0 = $26;
 $27 = $0;
 STACKTOP = sp;return ($27|0);
}
function __ZL26stbi__process_frame_headerP10stbi__jpegi($z,$scan) {
 $z = $z|0;
 $scan = $scan|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Lf = 0, $c = 0, $h_max = 0, $i = 0, $or$cond = 0, $p = 0, $q = 0, $s = 0, $v_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $scan;
 $3 = $1;
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $h_max = 1;
 $v_max = 1;
 $5 = $s;
 $6 = (__ZL13stbi__get16beP13stbi__context($5)|0);
 $Lf = $6;
 $7 = $Lf;
 $8 = ($7|0)<(11);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(2178)|0);
  $0 = $9;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $10 = $s;
 $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
 $12 = $11&255;
 $p = $12;
 $13 = $p;
 $14 = ($13|0)!=(8);
 if ($14) {
  $15 = (__ZL9stbi__errPKc(2190)|0);
  $0 = $15;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $16 = $s;
 $17 = (__ZL13stbi__get16beP13stbi__context($16)|0);
 $18 = $s;
 $19 = ((($18)) + 4|0);
 HEAP32[$19>>2] = $17;
 $20 = $s;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = (__ZL9stbi__errPKc(2201)|0);
  $0 = $24;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $25 = $s;
 $26 = (__ZL13stbi__get16beP13stbi__context($25)|0);
 $27 = $s;
 HEAP32[$27>>2] = $26;
 $28 = $s;
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0);
 if ($30) {
  $31 = (__ZL9stbi__errPKc(2218)|0);
  $0 = $31;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $32 = $s;
 $33 = (__ZL10stbi__get8P13stbi__context($32)|0);
 $34 = $33&255;
 $c = $34;
 $35 = $c;
 $36 = ($35|0)!=(3);
 $37 = $c;
 $38 = ($37|0)!=(1);
 $or$cond = $36 & $38;
 if ($or$cond) {
  $39 = (__ZL9stbi__errPKc(2226)|0);
  $0 = $39;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $40 = $c;
 $41 = $s;
 $42 = ((($41)) + 8|0);
 HEAP32[$42>>2] = $40;
 $i = 0;
 while(1) {
  $43 = $i;
  $44 = $c;
  $45 = ($43|0)<($44|0);
  if (!($45)) {
   break;
  }
  $46 = $i;
  $47 = $1;
  $48 = ((($47)) + 17820|0);
  $49 = (($48) + (($46*72)|0)|0);
  $50 = ((($49)) + 44|0);
  HEAP32[$50>>2] = 0;
  $51 = $i;
  $52 = $1;
  $53 = ((($52)) + 17820|0);
  $54 = (($53) + (($51*72)|0)|0);
  $55 = ((($54)) + 56|0);
  HEAP32[$55>>2] = 0;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $i = $57;
 }
 $58 = $Lf;
 $59 = $s;
 $60 = ((($59)) + 8|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = ($61*3)|0;
 $63 = (8 + ($62))|0;
 $64 = ($58|0)!=($63|0);
 if ($64) {
  $65 = (__ZL9stbi__errPKc(2178)|0);
  $0 = $65;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 $i = 0;
 while(1) {
  $66 = $i;
  $67 = $s;
  $68 = ((($67)) + 8|0);
  $69 = HEAP32[$68>>2]|0;
  $70 = ($66|0)<($69|0);
  if (!($70)) {
   label = 30;
   break;
  }
  $71 = $s;
  $72 = (__ZL10stbi__get8P13stbi__context($71)|0);
  $73 = $72&255;
  $74 = $i;
  $75 = $1;
  $76 = ((($75)) + 17820|0);
  $77 = (($76) + (($74*72)|0)|0);
  HEAP32[$77>>2] = $73;
  $78 = $i;
  $79 = $1;
  $80 = ((($79)) + 17820|0);
  $81 = (($80) + (($78*72)|0)|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = $i;
  $84 = (($83) + 1)|0;
  $85 = ($82|0)!=($84|0);
  if ($85) {
   $86 = $i;
   $87 = $1;
   $88 = ((($87)) + 17820|0);
   $89 = (($88) + (($86*72)|0)|0);
   $90 = HEAP32[$89>>2]|0;
   $91 = $i;
   $92 = ($90|0)!=($91|0);
   if ($92) {
    label = 20;
    break;
   }
  }
  $94 = $s;
  $95 = (__ZL10stbi__get8P13stbi__context($94)|0);
  $96 = $95&255;
  $q = $96;
  $97 = $q;
  $98 = $97 >> 4;
  $99 = $i;
  $100 = $1;
  $101 = ((($100)) + 17820|0);
  $102 = (($101) + (($99*72)|0)|0);
  $103 = ((($102)) + 4|0);
  HEAP32[$103>>2] = $98;
  $104 = $i;
  $105 = $1;
  $106 = ((($105)) + 17820|0);
  $107 = (($106) + (($104*72)|0)|0);
  $108 = ((($107)) + 4|0);
  $109 = HEAP32[$108>>2]|0;
  $110 = ($109|0)!=(0);
  if (!($110)) {
   label = 23;
   break;
  }
  $111 = $i;
  $112 = $1;
  $113 = ((($112)) + 17820|0);
  $114 = (($113) + (($111*72)|0)|0);
  $115 = ((($114)) + 4|0);
  $116 = HEAP32[$115>>2]|0;
  $117 = ($116|0)>(4);
  if ($117) {
   label = 23;
   break;
  }
  $119 = $q;
  $120 = $119 & 15;
  $121 = $i;
  $122 = $1;
  $123 = ((($122)) + 17820|0);
  $124 = (($123) + (($121*72)|0)|0);
  $125 = ((($124)) + 8|0);
  HEAP32[$125>>2] = $120;
  $126 = $i;
  $127 = $1;
  $128 = ((($127)) + 17820|0);
  $129 = (($128) + (($126*72)|0)|0);
  $130 = ((($129)) + 8|0);
  $131 = HEAP32[$130>>2]|0;
  $132 = ($131|0)!=(0);
  if (!($132)) {
   label = 26;
   break;
  }
  $133 = $i;
  $134 = $1;
  $135 = ((($134)) + 17820|0);
  $136 = (($135) + (($133*72)|0)|0);
  $137 = ((($136)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  $139 = ($138|0)>(4);
  if ($139) {
   label = 26;
   break;
  }
  $141 = $s;
  $142 = (__ZL10stbi__get8P13stbi__context($141)|0);
  $143 = $142&255;
  $144 = $i;
  $145 = $1;
  $146 = ((($145)) + 17820|0);
  $147 = (($146) + (($144*72)|0)|0);
  $148 = ((($147)) + 12|0);
  HEAP32[$148>>2] = $143;
  $149 = $i;
  $150 = $1;
  $151 = ((($150)) + 17820|0);
  $152 = (($151) + (($149*72)|0)|0);
  $153 = ((($152)) + 12|0);
  $154 = HEAP32[$153>>2]|0;
  $155 = ($154|0)>(3);
  if ($155) {
   label = 28;
   break;
  }
  $157 = $i;
  $158 = (($157) + 1)|0;
  $i = $158;
 }
 if ((label|0) == 20) {
  $93 = (__ZL9stbi__errPKc(2246)|0);
  $0 = $93;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 23) {
  $118 = (__ZL9stbi__errPKc(2263)|0);
  $0 = $118;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 26) {
  $140 = (__ZL9stbi__errPKc(2269)|0);
  $0 = $140;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 28) {
  $156 = (__ZL9stbi__errPKc(2275)|0);
  $0 = $156;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 else if ((label|0) == 30) {
  $159 = $2;
  $160 = ($159|0)!=(0);
  if ($160) {
   $0 = 1;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $161 = $s;
  $162 = HEAP32[$161>>2]|0;
  $163 = (1073741824 / ($162>>>0))&-1;
  $164 = $s;
  $165 = ((($164)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = (($163>>>0) / ($166>>>0))&-1;
  $168 = $s;
  $169 = ((($168)) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  $171 = ($167>>>0)<($170>>>0);
  if ($171) {
   $172 = (__ZL9stbi__errPKc(2282)|0);
   $0 = $172;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $i = 0;
  while(1) {
   $173 = $i;
   $174 = $s;
   $175 = ((($174)) + 8|0);
   $176 = HEAP32[$175>>2]|0;
   $177 = ($173|0)<($176|0);
   if (!($177)) {
    break;
   }
   $178 = $i;
   $179 = $1;
   $180 = ((($179)) + 17820|0);
   $181 = (($180) + (($178*72)|0)|0);
   $182 = ((($181)) + 4|0);
   $183 = HEAP32[$182>>2]|0;
   $184 = $h_max;
   $185 = ($183|0)>($184|0);
   if ($185) {
    $186 = $i;
    $187 = $1;
    $188 = ((($187)) + 17820|0);
    $189 = (($188) + (($186*72)|0)|0);
    $190 = ((($189)) + 4|0);
    $191 = HEAP32[$190>>2]|0;
    $h_max = $191;
   }
   $192 = $i;
   $193 = $1;
   $194 = ((($193)) + 17820|0);
   $195 = (($194) + (($192*72)|0)|0);
   $196 = ((($195)) + 8|0);
   $197 = HEAP32[$196>>2]|0;
   $198 = $v_max;
   $199 = ($197|0)>($198|0);
   if ($199) {
    $200 = $i;
    $201 = $1;
    $202 = ((($201)) + 17820|0);
    $203 = (($202) + (($200*72)|0)|0);
    $204 = ((($203)) + 8|0);
    $205 = HEAP32[$204>>2]|0;
    $v_max = $205;
   }
   $206 = $i;
   $207 = (($206) + 1)|0;
   $i = $207;
  }
  $208 = $h_max;
  $209 = $1;
  $210 = ((($209)) + 17796|0);
  HEAP32[$210>>2] = $208;
  $211 = $v_max;
  $212 = $1;
  $213 = ((($212)) + 17800|0);
  HEAP32[$213>>2] = $211;
  $214 = $h_max;
  $215 = $214<<3;
  $216 = $1;
  $217 = ((($216)) + 17812|0);
  HEAP32[$217>>2] = $215;
  $218 = $v_max;
  $219 = $218<<3;
  $220 = $1;
  $221 = ((($220)) + 17816|0);
  HEAP32[$221>>2] = $219;
  $222 = $s;
  $223 = HEAP32[$222>>2]|0;
  $224 = $1;
  $225 = ((($224)) + 17812|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($223) + ($226))|0;
  $228 = (($227) - 1)|0;
  $229 = $1;
  $230 = ((($229)) + 17812|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($228>>>0) / ($231>>>0))&-1;
  $233 = $1;
  $234 = ((($233)) + 17804|0);
  HEAP32[$234>>2] = $232;
  $235 = $s;
  $236 = ((($235)) + 4|0);
  $237 = HEAP32[$236>>2]|0;
  $238 = $1;
  $239 = ((($238)) + 17816|0);
  $240 = HEAP32[$239>>2]|0;
  $241 = (($237) + ($240))|0;
  $242 = (($241) - 1)|0;
  $243 = $1;
  $244 = ((($243)) + 17816|0);
  $245 = HEAP32[$244>>2]|0;
  $246 = (($242>>>0) / ($245>>>0))&-1;
  $247 = $1;
  $248 = ((($247)) + 17808|0);
  HEAP32[$248>>2] = $246;
  $i = 0;
  while(1) {
   $249 = $i;
   $250 = $s;
   $251 = ((($250)) + 8|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ($249|0)<($252|0);
   if (!($253)) {
    label = 52;
    break;
   }
   $254 = $s;
   $255 = HEAP32[$254>>2]|0;
   $256 = $i;
   $257 = $1;
   $258 = ((($257)) + 17820|0);
   $259 = (($258) + (($256*72)|0)|0);
   $260 = ((($259)) + 4|0);
   $261 = HEAP32[$260>>2]|0;
   $262 = Math_imul($255, $261)|0;
   $263 = $h_max;
   $264 = (($262) + ($263))|0;
   $265 = (($264) - 1)|0;
   $266 = $h_max;
   $267 = (($265>>>0) / ($266>>>0))&-1;
   $268 = $i;
   $269 = $1;
   $270 = ((($269)) + 17820|0);
   $271 = (($270) + (($268*72)|0)|0);
   $272 = ((($271)) + 28|0);
   HEAP32[$272>>2] = $267;
   $273 = $s;
   $274 = ((($273)) + 4|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = $i;
   $277 = $1;
   $278 = ((($277)) + 17820|0);
   $279 = (($278) + (($276*72)|0)|0);
   $280 = ((($279)) + 8|0);
   $281 = HEAP32[$280>>2]|0;
   $282 = Math_imul($275, $281)|0;
   $283 = $v_max;
   $284 = (($282) + ($283))|0;
   $285 = (($284) - 1)|0;
   $286 = $v_max;
   $287 = (($285>>>0) / ($286>>>0))&-1;
   $288 = $i;
   $289 = $1;
   $290 = ((($289)) + 17820|0);
   $291 = (($290) + (($288*72)|0)|0);
   $292 = ((($291)) + 32|0);
   HEAP32[$292>>2] = $287;
   $293 = $1;
   $294 = ((($293)) + 17804|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = $i;
   $297 = $1;
   $298 = ((($297)) + 17820|0);
   $299 = (($298) + (($296*72)|0)|0);
   $300 = ((($299)) + 4|0);
   $301 = HEAP32[$300>>2]|0;
   $302 = Math_imul($295, $301)|0;
   $303 = $302<<3;
   $304 = $i;
   $305 = $1;
   $306 = ((($305)) + 17820|0);
   $307 = (($306) + (($304*72)|0)|0);
   $308 = ((($307)) + 36|0);
   HEAP32[$308>>2] = $303;
   $309 = $1;
   $310 = ((($309)) + 17808|0);
   $311 = HEAP32[$310>>2]|0;
   $312 = $i;
   $313 = $1;
   $314 = ((($313)) + 17820|0);
   $315 = (($314) + (($312*72)|0)|0);
   $316 = ((($315)) + 8|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = Math_imul($311, $317)|0;
   $319 = $318<<3;
   $320 = $i;
   $321 = $1;
   $322 = ((($321)) + 17820|0);
   $323 = (($322) + (($320*72)|0)|0);
   $324 = ((($323)) + 40|0);
   HEAP32[$324>>2] = $319;
   $325 = $i;
   $326 = $1;
   $327 = ((($326)) + 17820|0);
   $328 = (($327) + (($325*72)|0)|0);
   $329 = ((($328)) + 36|0);
   $330 = HEAP32[$329>>2]|0;
   $331 = $i;
   $332 = $1;
   $333 = ((($332)) + 17820|0);
   $334 = (($333) + (($331*72)|0)|0);
   $335 = ((($334)) + 40|0);
   $336 = HEAP32[$335>>2]|0;
   $337 = Math_imul($330, $336)|0;
   $338 = (($337) + 15)|0;
   $339 = (__ZL12stbi__mallocj($338)|0);
   $340 = $i;
   $341 = $1;
   $342 = ((($341)) + 17820|0);
   $343 = (($342) + (($340*72)|0)|0);
   $344 = ((($343)) + 48|0);
   HEAP32[$344>>2] = $339;
   $345 = $i;
   $346 = $1;
   $347 = ((($346)) + 17820|0);
   $348 = (($347) + (($345*72)|0)|0);
   $349 = ((($348)) + 48|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)==(0|0);
   $352 = $i;
   if ($351) {
    break;
   }
   $370 = $1;
   $371 = ((($370)) + 17820|0);
   $372 = (($371) + (($352*72)|0)|0);
   $373 = ((($372)) + 48|0);
   $374 = HEAP32[$373>>2]|0;
   $375 = $374;
   $376 = (($375) + 15)|0;
   $377 = $376 & -16;
   $378 = $377;
   $379 = $i;
   $380 = $1;
   $381 = ((($380)) + 17820|0);
   $382 = (($381) + (($379*72)|0)|0);
   $383 = ((($382)) + 44|0);
   HEAP32[$383>>2] = $378;
   $384 = $i;
   $385 = $1;
   $386 = ((($385)) + 17820|0);
   $387 = (($386) + (($384*72)|0)|0);
   $388 = ((($387)) + 56|0);
   HEAP32[$388>>2] = 0;
   $389 = $1;
   $390 = ((($389)) + 18124|0);
   $391 = HEAP32[$390>>2]|0;
   $392 = ($391|0)!=(0);
   $393 = $i;
   $394 = $1;
   $395 = ((($394)) + 17820|0);
   $396 = (($395) + (($393*72)|0)|0);
   if ($392) {
    $397 = ((($396)) + 36|0);
    $398 = HEAP32[$397>>2]|0;
    $399 = (($398) + 7)|0;
    $400 = $399 >> 3;
    $401 = $i;
    $402 = $1;
    $403 = ((($402)) + 17820|0);
    $404 = (($403) + (($401*72)|0)|0);
    $405 = ((($404)) + 64|0);
    HEAP32[$405>>2] = $400;
    $406 = $i;
    $407 = $1;
    $408 = ((($407)) + 17820|0);
    $409 = (($408) + (($406*72)|0)|0);
    $410 = ((($409)) + 40|0);
    $411 = HEAP32[$410>>2]|0;
    $412 = (($411) + 7)|0;
    $413 = $412 >> 3;
    $414 = $i;
    $415 = $1;
    $416 = ((($415)) + 17820|0);
    $417 = (($416) + (($414*72)|0)|0);
    $418 = ((($417)) + 68|0);
    HEAP32[$418>>2] = $413;
    $419 = $i;
    $420 = $1;
    $421 = ((($420)) + 17820|0);
    $422 = (($421) + (($419*72)|0)|0);
    $423 = ((($422)) + 64|0);
    $424 = HEAP32[$423>>2]|0;
    $425 = $i;
    $426 = $1;
    $427 = ((($426)) + 17820|0);
    $428 = (($427) + (($425*72)|0)|0);
    $429 = ((($428)) + 68|0);
    $430 = HEAP32[$429>>2]|0;
    $431 = Math_imul($424, $430)|0;
    $432 = $431<<6;
    $433 = $432<<1;
    $434 = (($433) + 15)|0;
    $435 = (_malloc($434)|0);
    $436 = $i;
    $437 = $1;
    $438 = ((($437)) + 17820|0);
    $439 = (($438) + (($436*72)|0)|0);
    $440 = ((($439)) + 52|0);
    HEAP32[$440>>2] = $435;
    $441 = $i;
    $442 = $1;
    $443 = ((($442)) + 17820|0);
    $444 = (($443) + (($441*72)|0)|0);
    $445 = ((($444)) + 52|0);
    $446 = HEAP32[$445>>2]|0;
    $447 = $446;
    $448 = (($447) + 15)|0;
    $449 = $448 & -16;
    $450 = $449;
    $451 = $i;
    $452 = $1;
    $453 = ((($452)) + 17820|0);
    $454 = (($453) + (($451*72)|0)|0);
    $455 = ((($454)) + 60|0);
    HEAP32[$455>>2] = $450;
   } else {
    $456 = ((($396)) + 60|0);
    HEAP32[$456>>2] = 0;
    $457 = $i;
    $458 = $1;
    $459 = ((($458)) + 17820|0);
    $460 = (($459) + (($457*72)|0)|0);
    $461 = ((($460)) + 52|0);
    HEAP32[$461>>2] = 0;
   }
   $462 = $i;
   $463 = (($462) + 1)|0;
   $i = $463;
  }
  if ((label|0) == 52) {
   $0 = 1;
   $464 = $0;
   STACKTOP = sp;return ($464|0);
  }
  $353 = (($352) + -1)|0;
  $i = $353;
  while(1) {
   $354 = $i;
   $355 = ($354|0)>=(0);
   if (!($355)) {
    break;
   }
   $356 = $i;
   $357 = $1;
   $358 = ((($357)) + 17820|0);
   $359 = (($358) + (($356*72)|0)|0);
   $360 = ((($359)) + 48|0);
   $361 = HEAP32[$360>>2]|0;
   _free($361);
   $362 = $i;
   $363 = $1;
   $364 = ((($363)) + 17820|0);
   $365 = (($364) + (($362*72)|0)|0);
   $366 = ((($365)) + 48|0);
   HEAP32[$366>>2] = 0;
   $367 = $i;
   $368 = (($367) + -1)|0;
   $i = $368;
  }
  $369 = (__ZL9stbi__errPKc(2292)|0);
  $0 = $369;
  $464 = $0;
  STACKTOP = sp;return ($464|0);
 }
 return (0)|0;
}
function __ZL12stbi__mallocj($size) {
 $size = $size|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $size;
 $1 = $0;
 $2 = (_malloc($1)|0);
 STACKTOP = sp;return ($2|0);
}
function __ZL12stbi__rewindP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = ((($1)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $0;
 $5 = ((($4)) + 168|0);
 HEAP32[$5>>2] = $3;
 $6 = $0;
 $7 = ((($6)) + 180|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $0;
 $10 = ((($9)) + 172|0);
 HEAP32[$10>>2] = $8;
 STACKTOP = sp;return;
}
function __ZL15stbi__jpeg_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $j = sp;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 HEAP32[$j>>2] = $5;
 __ZL16stbi__setup_jpegP10stbi__jpeg($j);
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($j,$6,$7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZL15load_jpeg_imageP10stbi__jpegPiS1_S1_i($z,$out_x,$out_y,$comp,$req_comp) {
 $z = $z|0;
 $out_x = $out_x|0;
 $out_y = $out_y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $coutput = 0, $decode_n = 0, $i = 0;
 var $j = 0, $k = 0, $n = 0, $or$cond = 0, $or$cond3 = 0, $out = 0, $output = 0, $r = 0, $r1 = 0, $res_comp = 0, $y = 0, $y2 = 0, $y_bot = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $coutput = sp + 152|0;
 $res_comp = sp + 24|0;
 $1 = $z;
 $2 = $out_x;
 $3 = $out_y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 8|0);
 HEAP32[$8>>2] = 0;
 $9 = $5;
 $10 = ($9|0)<(0);
 $11 = $5;
 $12 = ($11|0)>(4);
 $or$cond = $10 | $12;
 if ($or$cond) {
  $13 = (__ZL9stbi__errPKc(2301)|0);
  $14 = ($13|0)!=(0);
  $15 = $14 ? 0 : 0;
  $16 = $15;
  $0 = $16;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $17 = $1;
 $18 = (__ZL23stbi__decode_jpeg_imageP10stbi__jpeg($17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $20 = $1;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($20);
  $0 = 0;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $21 = $5;
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = $5;
  $28 = $23;
 } else {
  $24 = $1;
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($25)) + 8|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27;
 }
 $n = $28;
 $29 = $1;
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($30)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(3);
 $34 = $n;
 $35 = ($34|0)<(3);
 $or$cond3 = $33 & $35;
 if ($or$cond3) {
  $decode_n = 1;
 } else {
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = ((($37)) + 8|0);
  $39 = HEAP32[$38>>2]|0;
  $decode_n = $39;
 }
 $k = 0;
 while(1) {
  $40 = $k;
  $41 = $decode_n;
  $42 = ($40|0)<($41|0);
  if (!($42)) {
   break;
  }
  $43 = $k;
  $44 = (($res_comp) + ($43<<5)|0);
  $r = $44;
  $45 = $1;
  $46 = HEAP32[$45>>2]|0;
  $47 = HEAP32[$46>>2]|0;
  $48 = (($47) + 3)|0;
  $49 = (__ZL12stbi__mallocj($48)|0);
  $50 = $k;
  $51 = $1;
  $52 = ((($51)) + 17820|0);
  $53 = (($52) + (($50*72)|0)|0);
  $54 = ((($53)) + 56|0);
  HEAP32[$54>>2] = $49;
  $55 = $k;
  $56 = $1;
  $57 = ((($56)) + 17820|0);
  $58 = (($57) + (($55*72)|0)|0);
  $59 = ((($58)) + 56|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)!=(0|0);
  $62 = $1;
  if (!($61)) {
   label = 14;
   break;
  }
  $67 = ((($62)) + 17796|0);
  $68 = HEAP32[$67>>2]|0;
  $69 = $k;
  $70 = $1;
  $71 = ((($70)) + 17820|0);
  $72 = (($71) + (($69*72)|0)|0);
  $73 = ((($72)) + 4|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($68|0) / ($74|0))&-1;
  $76 = $r;
  $77 = ((($76)) + 12|0);
  HEAP32[$77>>2] = $75;
  $78 = $1;
  $79 = ((($78)) + 17800|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = $k;
  $82 = $1;
  $83 = ((($82)) + 17820|0);
  $84 = (($83) + (($81*72)|0)|0);
  $85 = ((($84)) + 8|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = (($80|0) / ($86|0))&-1;
  $88 = $r;
  $89 = ((($88)) + 16|0);
  HEAP32[$89>>2] = $87;
  $90 = $r;
  $91 = ((($90)) + 16|0);
  $92 = HEAP32[$91>>2]|0;
  $93 = $92 >> 1;
  $94 = $r;
  $95 = ((($94)) + 24|0);
  HEAP32[$95>>2] = $93;
  $96 = $1;
  $97 = HEAP32[$96>>2]|0;
  $98 = HEAP32[$97>>2]|0;
  $99 = $r;
  $100 = ((($99)) + 12|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (($98) + ($101))|0;
  $103 = (($102) - 1)|0;
  $104 = $r;
  $105 = ((($104)) + 12|0);
  $106 = HEAP32[$105>>2]|0;
  $107 = (($103>>>0) / ($106>>>0))&-1;
  $108 = $r;
  $109 = ((($108)) + 20|0);
  HEAP32[$109>>2] = $107;
  $110 = $r;
  $111 = ((($110)) + 28|0);
  HEAP32[$111>>2] = 0;
  $112 = $k;
  $113 = $1;
  $114 = ((($113)) + 17820|0);
  $115 = (($114) + (($112*72)|0)|0);
  $116 = ((($115)) + 44|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $r;
  $119 = ((($118)) + 8|0);
  HEAP32[$119>>2] = $117;
  $120 = $r;
  $121 = ((($120)) + 4|0);
  HEAP32[$121>>2] = $117;
  $122 = $r;
  $123 = ((($122)) + 12|0);
  $124 = HEAP32[$123>>2]|0;
  $125 = ($124|0)==(1);
  if ($125) {
   $126 = $r;
   $127 = ((($126)) + 16|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($128|0)==(1);
   if ($129) {
    $130 = $r;
    HEAP32[$130>>2] = 70;
   } else {
    label = 18;
   }
  } else {
   label = 18;
  }
  do {
   if ((label|0) == 18) {
    label = 0;
    $131 = $r;
    $132 = ((($131)) + 12|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(1);
    if ($134) {
     $135 = $r;
     $136 = ((($135)) + 16|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = ($137|0)==(2);
     if ($138) {
      $139 = $r;
      HEAP32[$139>>2] = 71;
      break;
     }
    }
    $140 = $r;
    $141 = ((($140)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = ($142|0)==(2);
    if ($143) {
     $144 = $r;
     $145 = ((($144)) + 16|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(1);
     if ($147) {
      $148 = $r;
      HEAP32[$148>>2] = 72;
      break;
     }
    }
    $149 = $r;
    $150 = ((($149)) + 12|0);
    $151 = HEAP32[$150>>2]|0;
    $152 = ($151|0)==(2);
    if ($152) {
     $153 = $r;
     $154 = ((($153)) + 16|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ($155|0)==(2);
     if ($156) {
      $157 = $1;
      $158 = ((($157)) + 18184|0);
      $159 = HEAP32[$158>>2]|0;
      $160 = $r;
      HEAP32[$160>>2] = $159;
      break;
     }
    }
    $161 = $r;
    HEAP32[$161>>2] = 73;
   }
  } while(0);
  $162 = $k;
  $163 = (($162) + 1)|0;
  $k = $163;
 }
 if ((label|0) == 14) {
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($62);
  $63 = (__ZL9stbi__errPKc(2292)|0);
  $64 = ($63|0)!=(0);
  $65 = $64 ? 0 : 0;
  $66 = $65;
  $0 = $66;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $164 = $n;
 $165 = $1;
 $166 = HEAP32[$165>>2]|0;
 $167 = HEAP32[$166>>2]|0;
 $168 = Math_imul($164, $167)|0;
 $169 = $1;
 $170 = HEAP32[$169>>2]|0;
 $171 = ((($170)) + 4|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = Math_imul($168, $172)|0;
 $174 = (($173) + 1)|0;
 $175 = (__ZL12stbi__mallocj($174)|0);
 $output = $175;
 $176 = $output;
 $177 = ($176|0)!=(0|0);
 if (!($177)) {
  $178 = $1;
  __ZL18stbi__cleanup_jpegP10stbi__jpeg($178);
  $179 = (__ZL9stbi__errPKc(2292)|0);
  $180 = ($179|0)!=(0);
  $181 = $180 ? 0 : 0;
  $182 = $181;
  $0 = $182;
  $376 = $0;
  STACKTOP = sp;return ($376|0);
 }
 $j = 0;
 while(1) {
  $183 = $j;
  $184 = $1;
  $185 = HEAP32[$184>>2]|0;
  $186 = ((($185)) + 4|0);
  $187 = HEAP32[$186>>2]|0;
  $188 = ($183>>>0)<($187>>>0);
  if (!($188)) {
   break;
  }
  $189 = $output;
  $190 = $n;
  $191 = $1;
  $192 = HEAP32[$191>>2]|0;
  $193 = HEAP32[$192>>2]|0;
  $194 = Math_imul($190, $193)|0;
  $195 = $j;
  $196 = Math_imul($194, $195)|0;
  $197 = (($189) + ($196)|0);
  $out = $197;
  $k = 0;
  while(1) {
   $198 = $k;
   $199 = $decode_n;
   $200 = ($198|0)<($199|0);
   if (!($200)) {
    break;
   }
   $201 = $k;
   $202 = (($res_comp) + ($201<<5)|0);
   $r1 = $202;
   $203 = $r1;
   $204 = ((($203)) + 24|0);
   $205 = HEAP32[$204>>2]|0;
   $206 = $r1;
   $207 = ((($206)) + 16|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = $208 >> 1;
   $210 = ($205|0)>=($209|0);
   $211 = $210&1;
   $y_bot = $211;
   $212 = $r1;
   $213 = HEAP32[$212>>2]|0;
   $214 = $k;
   $215 = $1;
   $216 = ((($215)) + 17820|0);
   $217 = (($216) + (($214*72)|0)|0);
   $218 = ((($217)) + 56|0);
   $219 = HEAP32[$218>>2]|0;
   $220 = $y_bot;
   $221 = ($220|0)!=(0);
   $222 = $r1;
   if ($221) {
    $223 = ((($222)) + 8|0);
    $224 = HEAP32[$223>>2]|0;
    $240 = $224;
   } else {
    $225 = ((($222)) + 4|0);
    $226 = HEAP32[$225>>2]|0;
    $240 = $226;
   }
   $227 = $y_bot;
   $228 = ($227|0)!=(0);
   $229 = $r1;
   if ($228) {
    $230 = ((($229)) + 4|0);
    $231 = HEAP32[$230>>2]|0;
    $241 = $231;
   } else {
    $232 = ((($229)) + 8|0);
    $233 = HEAP32[$232>>2]|0;
    $241 = $233;
   }
   $234 = $r1;
   $235 = ((($234)) + 20|0);
   $236 = HEAP32[$235>>2]|0;
   $237 = $r1;
   $238 = ((($237)) + 12|0);
   $239 = HEAP32[$238>>2]|0;
   $242 = (FUNCTION_TABLE_iiiiii[$213 & 127]($219,$240,$241,$236,$239)|0);
   $243 = $k;
   $244 = (($coutput) + ($243<<2)|0);
   HEAP32[$244>>2] = $242;
   $245 = $r1;
   $246 = ((($245)) + 24|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = (($247) + 1)|0;
   HEAP32[$246>>2] = $248;
   $249 = $r1;
   $250 = ((($249)) + 16|0);
   $251 = HEAP32[$250>>2]|0;
   $252 = ($248|0)>=($251|0);
   if ($252) {
    $253 = $r1;
    $254 = ((($253)) + 24|0);
    HEAP32[$254>>2] = 0;
    $255 = $r1;
    $256 = ((($255)) + 8|0);
    $257 = HEAP32[$256>>2]|0;
    $258 = $r1;
    $259 = ((($258)) + 4|0);
    HEAP32[$259>>2] = $257;
    $260 = $r1;
    $261 = ((($260)) + 28|0);
    $262 = HEAP32[$261>>2]|0;
    $263 = (($262) + 1)|0;
    HEAP32[$261>>2] = $263;
    $264 = $k;
    $265 = $1;
    $266 = ((($265)) + 17820|0);
    $267 = (($266) + (($264*72)|0)|0);
    $268 = ((($267)) + 32|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ($263|0)<($269|0);
    if ($270) {
     $271 = $k;
     $272 = $1;
     $273 = ((($272)) + 17820|0);
     $274 = (($273) + (($271*72)|0)|0);
     $275 = ((($274)) + 36|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $r1;
     $278 = ((($277)) + 8|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = (($279) + ($276)|0);
     HEAP32[$278>>2] = $280;
    }
   }
   $281 = $k;
   $282 = (($281) + 1)|0;
   $k = $282;
  }
  $283 = $n;
  $284 = ($283|0)>=(3);
  $285 = HEAP32[$coutput>>2]|0;
  L66: do {
   if ($284) {
    $y = $285;
    $286 = $1;
    $287 = HEAP32[$286>>2]|0;
    $288 = ((($287)) + 8|0);
    $289 = HEAP32[$288>>2]|0;
    $290 = ($289|0)==(3);
    if ($290) {
     $291 = $1;
     $292 = ((($291)) + 18180|0);
     $293 = HEAP32[$292>>2]|0;
     $294 = $out;
     $295 = $y;
     $296 = ((($coutput)) + 4|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ((($coutput)) + 8|0);
     $299 = HEAP32[$298>>2]|0;
     $300 = $1;
     $301 = HEAP32[$300>>2]|0;
     $302 = HEAP32[$301>>2]|0;
     $303 = $n;
     FUNCTION_TABLE_viiiiii[$293 & 127]($294,$295,$297,$299,$302,$303);
     break;
    }
    $i = 0;
    while(1) {
     $304 = $i;
     $305 = $1;
     $306 = HEAP32[$305>>2]|0;
     $307 = HEAP32[$306>>2]|0;
     $308 = ($304>>>0)<($307>>>0);
     if (!($308)) {
      break L66;
     }
     $309 = $i;
     $310 = $y;
     $311 = (($310) + ($309)|0);
     $312 = HEAP8[$311>>0]|0;
     $313 = $out;
     $314 = ((($313)) + 2|0);
     HEAP8[$314>>0] = $312;
     $315 = $out;
     $316 = ((($315)) + 1|0);
     HEAP8[$316>>0] = $312;
     $317 = $out;
     HEAP8[$317>>0] = $312;
     $318 = $out;
     $319 = ((($318)) + 3|0);
     HEAP8[$319>>0] = -1;
     $320 = $n;
     $321 = $out;
     $322 = (($321) + ($320)|0);
     $out = $322;
     $323 = $i;
     $324 = (($323) + 1)|0;
     $i = $324;
    }
   } else {
    $y2 = $285;
    $325 = $n;
    $326 = ($325|0)==(1);
    $i = 0;
    if ($326) {
     while(1) {
      $327 = $i;
      $328 = $1;
      $329 = HEAP32[$328>>2]|0;
      $330 = HEAP32[$329>>2]|0;
      $331 = ($327>>>0)<($330>>>0);
      if (!($331)) {
       break L66;
      }
      $332 = $i;
      $333 = $y2;
      $334 = (($333) + ($332)|0);
      $335 = HEAP8[$334>>0]|0;
      $336 = $i;
      $337 = $out;
      $338 = (($337) + ($336)|0);
      HEAP8[$338>>0] = $335;
      $339 = $i;
      $340 = (($339) + 1)|0;
      $i = $340;
     }
    } else {
     while(1) {
      $341 = $i;
      $342 = $1;
      $343 = HEAP32[$342>>2]|0;
      $344 = HEAP32[$343>>2]|0;
      $345 = ($341>>>0)<($344>>>0);
      if (!($345)) {
       break L66;
      }
      $346 = $i;
      $347 = $y2;
      $348 = (($347) + ($346)|0);
      $349 = HEAP8[$348>>0]|0;
      $350 = $out;
      $351 = ((($350)) + 1|0);
      $out = $351;
      HEAP8[$350>>0] = $349;
      $352 = $out;
      $353 = ((($352)) + 1|0);
      $out = $353;
      HEAP8[$352>>0] = -1;
      $354 = $i;
      $355 = (($354) + 1)|0;
      $i = $355;
     }
    }
   }
  } while(0);
  $356 = $j;
  $357 = (($356) + 1)|0;
  $j = $357;
 }
 $358 = $1;
 __ZL18stbi__cleanup_jpegP10stbi__jpeg($358);
 $359 = $1;
 $360 = HEAP32[$359>>2]|0;
 $361 = HEAP32[$360>>2]|0;
 $362 = $2;
 HEAP32[$362>>2] = $361;
 $363 = $1;
 $364 = HEAP32[$363>>2]|0;
 $365 = ((($364)) + 4|0);
 $366 = HEAP32[$365>>2]|0;
 $367 = $3;
 HEAP32[$367>>2] = $366;
 $368 = $4;
 $369 = ($368|0)!=(0|0);
 if ($369) {
  $370 = $1;
  $371 = HEAP32[$370>>2]|0;
  $372 = ((($371)) + 8|0);
  $373 = HEAP32[$372>>2]|0;
  $374 = $4;
  HEAP32[$374>>2] = $373;
 }
 $375 = $output;
 $0 = $375;
 $376 = $0;
 STACKTOP = sp;return ($376|0);
}
function __ZL23stbi__decode_jpeg_imageP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $m = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $m = 0;
 while(1) {
  $2 = $m;
  $3 = ($2|0)<(4);
  if (!($3)) {
   break;
  }
  $4 = $m;
  $5 = $1;
  $6 = ((($5)) + 17820|0);
  $7 = (($6) + (($4*72)|0)|0);
  $8 = ((($7)) + 48|0);
  HEAP32[$8>>2] = 0;
  $9 = $m;
  $10 = $1;
  $11 = ((($10)) + 17820|0);
  $12 = (($11) + (($9*72)|0)|0);
  $13 = ((($12)) + 52|0);
  HEAP32[$13>>2] = 0;
  $14 = $m;
  $15 = (($14) + 1)|0;
  $m = $15;
 }
 $16 = $1;
 $17 = ((($16)) + 18168|0);
 HEAP32[$17>>2] = 0;
 $18 = $1;
 $19 = (__ZL24stbi__decode_jpeg_headerP10stbi__jpegi($18,0)|0);
 $20 = ($19|0)!=(0);
 if (!($20)) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 $21 = $1;
 $22 = (__ZL16stbi__get_markerP10stbi__jpeg($21)|0);
 $23 = $22&255;
 $m = $23;
 L9: while(1) {
  $24 = $m;
  $25 = ($24|0)==(217);
  $26 = $25 ^ 1;
  if (!($26)) {
   label = 22;
   break;
  }
  $27 = $m;
  $28 = ($27|0)==(218);
  $29 = $1;
  L12: do {
   if ($28) {
    $30 = (__ZL25stbi__process_scan_headerP10stbi__jpeg($29)|0);
    $31 = ($30|0)!=(0);
    if (!($31)) {
     label = 10;
     break L9;
    }
    $32 = $1;
    $33 = (__ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($32)|0);
    $34 = ($33|0)!=(0);
    if (!($34)) {
     label = 12;
     break L9;
    }
    $35 = $1;
    $36 = ((($35)) + 18116|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = $37&255;
    $39 = ($38|0)==(255);
    if ($39) {
     while(1) {
      $40 = $1;
      $41 = HEAP32[$40>>2]|0;
      $42 = (__ZL12stbi__at_eofP13stbi__context($41)|0);
      $43 = ($42|0)!=(0);
      $44 = $43 ^ 1;
      if (!($44)) {
       break L12;
      }
      $45 = $1;
      $46 = HEAP32[$45>>2]|0;
      $47 = (__ZL10stbi__get8P13stbi__context($46)|0);
      $48 = $47&255;
      $x = $48;
      $49 = $x;
      $50 = ($49|0)==(255);
      if ($50) {
       break;
      }
      $56 = $x;
      $57 = ($56|0)!=(0);
      if ($57) {
       label = 18;
       break L9;
      }
     }
     $51 = $1;
     $52 = HEAP32[$51>>2]|0;
     $53 = (__ZL10stbi__get8P13stbi__context($52)|0);
     $54 = $1;
     $55 = ((($54)) + 18116|0);
     HEAP8[$55>>0] = $53;
    }
   } else {
    $59 = $m;
    $60 = (__ZL20stbi__process_markerP10stbi__jpegi($29,$59)|0);
    $61 = ($60|0)!=(0);
    if (!($61)) {
     label = 20;
     break L9;
    }
   }
  } while(0);
  $62 = $1;
  $63 = (__ZL16stbi__get_markerP10stbi__jpeg($62)|0);
  $64 = $63&255;
  $m = $64;
 }
 if ((label|0) == 10) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 12) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 18) {
  $58 = (__ZL9stbi__errPKc(2683)|0);
  $0 = $58;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 20) {
  $0 = 0;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 else if ((label|0) == 22) {
  $65 = $1;
  $66 = ((($65)) + 18124|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = ($67|0)!=(0);
  if ($68) {
   $69 = $1;
   __ZL17stbi__jpeg_finishP10stbi__jpeg($69);
  }
  $0 = 1;
  $70 = $0;
  STACKTOP = sp;return ($70|0);
 }
 return (0)|0;
}
function __ZL25stbi__process_scan_headerP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $Ls = 0, $aa = 0, $i = 0, $id = 0, $q = 0, $which = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = (__ZL13stbi__get16beP13stbi__context($3)|0);
 $Ls = $4;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = $1;
 $10 = ((($9)) + 18148|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = ((($11)) + 18148|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)<(1);
 if (!($14)) {
  $15 = $1;
  $16 = ((($15)) + 18148|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)>(4);
  if (!($18)) {
   $19 = $1;
   $20 = ((($19)) + 18148|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $1;
   $23 = HEAP32[$22>>2]|0;
   $24 = ((($23)) + 8|0);
   $25 = HEAP32[$24>>2]|0;
   $26 = ($21|0)>($25|0);
   if (!($26)) {
    $28 = $Ls;
    $29 = $1;
    $30 = ((($29)) + 18148|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31<<1;
    $33 = (6 + ($32))|0;
    $34 = ($28|0)!=($33|0);
    if ($34) {
     $35 = (__ZL9stbi__errPKc(2338)|0);
     $0 = $35;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    $i = 0;
    while(1) {
     $36 = $i;
     $37 = $1;
     $38 = ((($37)) + 18148|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($36|0)<($39|0);
     $41 = $1;
     $42 = HEAP32[$41>>2]|0;
     $43 = (__ZL10stbi__get8P13stbi__context($42)|0);
     $44 = $43&255;
     if (!($40)) {
      label = 20;
      break;
     }
     $id = $44;
     $45 = $1;
     $46 = HEAP32[$45>>2]|0;
     $47 = (__ZL10stbi__get8P13stbi__context($46)|0);
     $48 = $47&255;
     $q = $48;
     $which = 0;
     while(1) {
      $49 = $which;
      $50 = $1;
      $51 = HEAP32[$50>>2]|0;
      $52 = ((($51)) + 8|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($49|0)<($53|0);
      if (!($54)) {
       break;
      }
      $55 = $which;
      $56 = $1;
      $57 = ((($56)) + 17820|0);
      $58 = (($57) + (($55*72)|0)|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = $id;
      $61 = ($59|0)==($60|0);
      if ($61) {
       break;
      }
      $62 = $which;
      $63 = (($62) + 1)|0;
      $which = $63;
     }
     $64 = $which;
     $65 = $1;
     $66 = HEAP32[$65>>2]|0;
     $67 = ((($66)) + 8|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($64|0)==($68|0);
     if ($69) {
      label = 14;
      break;
     }
     $70 = $q;
     $71 = $70 >> 4;
     $72 = $which;
     $73 = $1;
     $74 = ((($73)) + 17820|0);
     $75 = (($74) + (($72*72)|0)|0);
     $76 = ((($75)) + 16|0);
     HEAP32[$76>>2] = $71;
     $77 = $which;
     $78 = $1;
     $79 = ((($78)) + 17820|0);
     $80 = (($79) + (($77*72)|0)|0);
     $81 = ((($80)) + 16|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = ($82|0)>(3);
     if ($83) {
      label = 16;
      break;
     }
     $85 = $q;
     $86 = $85 & 15;
     $87 = $which;
     $88 = $1;
     $89 = ((($88)) + 17820|0);
     $90 = (($89) + (($87*72)|0)|0);
     $91 = ((($90)) + 20|0);
     HEAP32[$91>>2] = $86;
     $92 = $which;
     $93 = $1;
     $94 = ((($93)) + 17820|0);
     $95 = (($94) + (($92*72)|0)|0);
     $96 = ((($95)) + 20|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)>(3);
     if ($98) {
      label = 18;
      break;
     }
     $100 = $which;
     $101 = $i;
     $102 = $1;
     $103 = ((($102)) + 18152|0);
     $104 = (($103) + ($101<<2)|0);
     HEAP32[$104>>2] = $100;
     $105 = $i;
     $106 = (($105) + 1)|0;
     $i = $106;
    }
    if ((label|0) == 14) {
     $0 = 0;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 16) {
     $84 = (__ZL9stbi__errPKc(2350)|0);
     $0 = $84;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 18) {
     $99 = (__ZL9stbi__errPKc(2362)|0);
     $0 = $99;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
    else if ((label|0) == 20) {
     $107 = $1;
     $108 = ((($107)) + 18128|0);
     HEAP32[$108>>2] = $44;
     $109 = $1;
     $110 = HEAP32[$109>>2]|0;
     $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
     $112 = $111&255;
     $113 = $1;
     $114 = ((($113)) + 18132|0);
     HEAP32[$114>>2] = $112;
     $115 = $1;
     $116 = HEAP32[$115>>2]|0;
     $117 = (__ZL10stbi__get8P13stbi__context($116)|0);
     $118 = $117&255;
     $aa = $118;
     $119 = $aa;
     $120 = $119 >> 4;
     $121 = $1;
     $122 = ((($121)) + 18136|0);
     HEAP32[$122>>2] = $120;
     $123 = $aa;
     $124 = $123 & 15;
     $125 = $1;
     $126 = ((($125)) + 18140|0);
     HEAP32[$126>>2] = $124;
     $127 = $1;
     $128 = ((($127)) + 18124|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)!=(0);
     $131 = $1;
     $132 = ((($131)) + 18128|0);
     $133 = HEAP32[$132>>2]|0;
     do {
      if ($130) {
       $134 = ($133|0)>(63);
       if (!($134)) {
        $135 = $1;
        $136 = ((($135)) + 18132|0);
        $137 = HEAP32[$136>>2]|0;
        $138 = ($137|0)>(63);
        if (!($138)) {
         $139 = $1;
         $140 = ((($139)) + 18128|0);
         $141 = HEAP32[$140>>2]|0;
         $142 = $1;
         $143 = ((($142)) + 18132|0);
         $144 = HEAP32[$143>>2]|0;
         $145 = ($141|0)>($144|0);
         if (!($145)) {
          $146 = $1;
          $147 = ((($146)) + 18136|0);
          $148 = HEAP32[$147>>2]|0;
          $149 = ($148|0)>(13);
          if (!($149)) {
           $150 = $1;
           $151 = ((($150)) + 18140|0);
           $152 = HEAP32[$151>>2]|0;
           $153 = ($152|0)>(13);
           if (!($153)) {
            break;
           }
          }
         }
        }
       }
       $154 = (__ZL9stbi__errPKc(2374)|0);
       $0 = $154;
       $168 = $0;
       STACKTOP = sp;return ($168|0);
      } else {
       $155 = ($133|0)!=(0);
       if ($155) {
        $156 = (__ZL9stbi__errPKc(2374)|0);
        $0 = $156;
        $168 = $0;
        STACKTOP = sp;return ($168|0);
       }
       $157 = $1;
       $158 = ((($157)) + 18136|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($159|0)!=(0);
       if (!($160)) {
        $161 = $1;
        $162 = ((($161)) + 18140|0);
        $163 = HEAP32[$162>>2]|0;
        $164 = ($163|0)!=(0);
        if (!($164)) {
         $166 = $1;
         $167 = ((($166)) + 18132|0);
         HEAP32[$167>>2] = 63;
         break;
        }
       }
       $165 = (__ZL9stbi__errPKc(2374)|0);
       $0 = $165;
       $168 = $0;
       STACKTOP = sp;return ($168|0);
      }
     } while(0);
     $0 = 1;
     $168 = $0;
     STACKTOP = sp;return ($168|0);
    }
   }
  }
 }
 $27 = (__ZL9stbi__errPKc(2314)|0);
 $0 = $27;
 $168 = $0;
 STACKTOP = sp;return ($168|0);
}
function __ZL30stbi__parse_entropy_coded_dataP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $data = 0, $data11 = 0, $data21 = 0, $data3 = 0, $h = 0, $h10 = 0, $ha = 0, $ha12 = 0, $ha5 = 0, $i = 0, $i1 = 0, $i13 = 0, $i6 = 0, $j = 0, $j14 = 0, $j2 = 0, $j7 = 0, $k = 0, $k15 = 0, $n = 0;
 var $n18 = 0, $n4 = 0, $n8 = 0, $w = 0, $w9 = 0, $x = 0, $x16 = 0, $x2 = 0, $x219 = 0, $y = 0, $y17 = 0, $y2 = 0, $y220 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 400|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $data = sp + 264|0;
 $data3 = sp + 136|0;
 $1 = $z;
 $2 = $1;
 __ZL16stbi__jpeg_resetP10stbi__jpeg($2);
 $3 = $1;
 $4 = ((($3)) + 18124|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = $1;
 $8 = ((($7)) + 18148|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1);
 if (!($6)) {
  if ($10) {
   $11 = $1;
   $12 = ((($11)) + 18152|0);
   $13 = HEAP32[$12>>2]|0;
   $n = $13;
   $14 = $n;
   $15 = $1;
   $16 = ((($15)) + 17820|0);
   $17 = (($16) + (($14*72)|0)|0);
   $18 = ((($17)) + 28|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (($19) + 7)|0;
   $21 = $20 >> 3;
   $w = $21;
   $22 = $n;
   $23 = $1;
   $24 = ((($23)) + 17820|0);
   $25 = (($24) + (($22*72)|0)|0);
   $26 = ((($25)) + 32|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (($27) + 7)|0;
   $29 = $28 >> 3;
   $h = $29;
   $j = 0;
   L5: while(1) {
    $30 = $j;
    $31 = $h;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     label = 18;
     break;
    }
    $i = 0;
    while(1) {
     $33 = $i;
     $34 = $w;
     $35 = ($33|0)<($34|0);
     if (!($35)) {
      break;
     }
     $36 = $n;
     $37 = $1;
     $38 = ((($37)) + 17820|0);
     $39 = (($38) + (($36*72)|0)|0);
     $40 = ((($39)) + 20|0);
     $41 = HEAP32[$40>>2]|0;
     $ha = $41;
     $42 = $1;
     $43 = $1;
     $44 = ((($43)) + 4|0);
     $45 = $n;
     $46 = $1;
     $47 = ((($46)) + 17820|0);
     $48 = (($47) + (($45*72)|0)|0);
     $49 = ((($48)) + 16|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (($44) + (($50*1680)|0)|0);
     $52 = $1;
     $53 = ((($52)) + 6724|0);
     $54 = $ha;
     $55 = (($53) + (($54*1680)|0)|0);
     $56 = $ha;
     $57 = $1;
     $58 = ((($57)) + 13700|0);
     $59 = (($58) + ($56<<10)|0);
     $60 = $n;
     $61 = $n;
     $62 = $1;
     $63 = ((($62)) + 17820|0);
     $64 = (($63) + (($61*72)|0)|0);
     $65 = ((($64)) + 12|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = $1;
     $68 = ((($67)) + 13444|0);
     $69 = (($68) + ($66<<6)|0);
     $70 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($42,$data,$51,$55,$59,$60,$69)|0);
     $71 = ($70|0)!=(0);
     if (!($71)) {
      label = 8;
      break L5;
     }
     $72 = $1;
     $73 = ((($72)) + 18176|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = $n;
     $76 = $1;
     $77 = ((($76)) + 17820|0);
     $78 = (($77) + (($75*72)|0)|0);
     $79 = ((($78)) + 44|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = $n;
     $82 = $1;
     $83 = ((($82)) + 17820|0);
     $84 = (($83) + (($81*72)|0)|0);
     $85 = ((($84)) + 36|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = $j;
     $88 = Math_imul($86, $87)|0;
     $89 = $88<<3;
     $90 = (($80) + ($89)|0);
     $91 = $i;
     $92 = $91<<3;
     $93 = (($90) + ($92)|0);
     $94 = $n;
     $95 = $1;
     $96 = ((($95)) + 17820|0);
     $97 = (($96) + (($94*72)|0)|0);
     $98 = ((($97)) + 36|0);
     $99 = HEAP32[$98>>2]|0;
     FUNCTION_TABLE_viii[$74 & 127]($93,$99,$data);
     $100 = $1;
     $101 = ((($100)) + 18172|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + -1)|0;
     HEAP32[$101>>2] = $103;
     $104 = ($103|0)<=(0);
     if ($104) {
      $105 = $1;
      $106 = ((($105)) + 18112|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)<(24);
      if ($108) {
       $109 = $1;
       __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($109);
      }
      $110 = $1;
      $111 = ((($110)) + 18116|0);
      $112 = HEAP8[$111>>0]|0;
      $113 = $112&255;
      $114 = ($113|0)>=(208);
      if (!($114)) {
       label = 14;
       break L5;
      }
      $115 = $1;
      $116 = ((($115)) + 18116|0);
      $117 = HEAP8[$116>>0]|0;
      $118 = $117&255;
      $119 = ($118|0)<=(215);
      if (!($119)) {
       label = 14;
       break L5;
      }
      $120 = $1;
      __ZL16stbi__jpeg_resetP10stbi__jpeg($120);
     }
     $121 = $i;
     $122 = (($121) + 1)|0;
     $i = $122;
    }
    $123 = $j;
    $124 = (($123) + 1)|0;
    $j = $124;
   }
   if ((label|0) == 8) {
    $0 = 0;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
   else if ((label|0) == 14) {
    $0 = 1;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
   else if ((label|0) == 18) {
    $0 = 1;
    $499 = $0;
    STACKTOP = sp;return ($499|0);
   }
  }
  $j2 = 0;
  L29: while(1) {
   $125 = $j2;
   $126 = $1;
   $127 = ((($126)) + 17808|0);
   $128 = HEAP32[$127>>2]|0;
   $129 = ($125|0)<($128|0);
   if (!($129)) {
    label = 43;
    break;
   }
   $i1 = 0;
   while(1) {
    $130 = $i1;
    $131 = $1;
    $132 = ((($131)) + 17804|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($130|0)<($133|0);
    if (!($134)) {
     break;
    }
    $k = 0;
    while(1) {
     $135 = $k;
     $136 = $1;
     $137 = ((($136)) + 18148|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($135|0)<($138|0);
     if (!($139)) {
      break;
     }
     $140 = $k;
     $141 = $1;
     $142 = ((($141)) + 18152|0);
     $143 = (($142) + ($140<<2)|0);
     $144 = HEAP32[$143>>2]|0;
     $n4 = $144;
     $y = 0;
     while(1) {
      $145 = $y;
      $146 = $n4;
      $147 = $1;
      $148 = ((($147)) + 17820|0);
      $149 = (($148) + (($146*72)|0)|0);
      $150 = ((($149)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($145|0)<($151|0);
      if (!($152)) {
       break;
      }
      $x = 0;
      while(1) {
       $153 = $x;
       $154 = $n4;
       $155 = $1;
       $156 = ((($155)) + 17820|0);
       $157 = (($156) + (($154*72)|0)|0);
       $158 = ((($157)) + 4|0);
       $159 = HEAP32[$158>>2]|0;
       $160 = ($153|0)<($159|0);
       if (!($160)) {
        break;
       }
       $161 = $i1;
       $162 = $n4;
       $163 = $1;
       $164 = ((($163)) + 17820|0);
       $165 = (($164) + (($162*72)|0)|0);
       $166 = ((($165)) + 4|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = Math_imul($161, $167)|0;
       $169 = $x;
       $170 = (($168) + ($169))|0;
       $171 = $170<<3;
       $x2 = $171;
       $172 = $j2;
       $173 = $n4;
       $174 = $1;
       $175 = ((($174)) + 17820|0);
       $176 = (($175) + (($173*72)|0)|0);
       $177 = ((($176)) + 8|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = Math_imul($172, $178)|0;
       $180 = $y;
       $181 = (($179) + ($180))|0;
       $182 = $181<<3;
       $y2 = $182;
       $183 = $n4;
       $184 = $1;
       $185 = ((($184)) + 17820|0);
       $186 = (($185) + (($183*72)|0)|0);
       $187 = ((($186)) + 20|0);
       $188 = HEAP32[$187>>2]|0;
       $ha5 = $188;
       $189 = $1;
       $190 = $1;
       $191 = ((($190)) + 4|0);
       $192 = $n4;
       $193 = $1;
       $194 = ((($193)) + 17820|0);
       $195 = (($194) + (($192*72)|0)|0);
       $196 = ((($195)) + 16|0);
       $197 = HEAP32[$196>>2]|0;
       $198 = (($191) + (($197*1680)|0)|0);
       $199 = $1;
       $200 = ((($199)) + 6724|0);
       $201 = $ha5;
       $202 = (($200) + (($201*1680)|0)|0);
       $203 = $ha5;
       $204 = $1;
       $205 = ((($204)) + 13700|0);
       $206 = (($205) + ($203<<10)|0);
       $207 = $n4;
       $208 = $n4;
       $209 = $1;
       $210 = ((($209)) + 17820|0);
       $211 = (($210) + (($208*72)|0)|0);
       $212 = ((($211)) + 12|0);
       $213 = HEAP32[$212>>2]|0;
       $214 = $1;
       $215 = ((($214)) + 13444|0);
       $216 = (($215) + ($213<<6)|0);
       $217 = (__ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($189,$data3,$198,$202,$206,$207,$216)|0);
       $218 = ($217|0)!=(0);
       if (!($218)) {
        label = 30;
        break L29;
       }
       $219 = $1;
       $220 = ((($219)) + 18176|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = $n4;
       $223 = $1;
       $224 = ((($223)) + 17820|0);
       $225 = (($224) + (($222*72)|0)|0);
       $226 = ((($225)) + 44|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = $n4;
       $229 = $1;
       $230 = ((($229)) + 17820|0);
       $231 = (($230) + (($228*72)|0)|0);
       $232 = ((($231)) + 36|0);
       $233 = HEAP32[$232>>2]|0;
       $234 = $y2;
       $235 = Math_imul($233, $234)|0;
       $236 = (($227) + ($235)|0);
       $237 = $x2;
       $238 = (($236) + ($237)|0);
       $239 = $n4;
       $240 = $1;
       $241 = ((($240)) + 17820|0);
       $242 = (($241) + (($239*72)|0)|0);
       $243 = ((($242)) + 36|0);
       $244 = HEAP32[$243>>2]|0;
       FUNCTION_TABLE_viii[$221 & 127]($238,$244,$data3);
       $245 = $x;
       $246 = (($245) + 1)|0;
       $x = $246;
      }
      $247 = $y;
      $248 = (($247) + 1)|0;
      $y = $248;
     }
     $249 = $k;
     $250 = (($249) + 1)|0;
     $k = $250;
    }
    $251 = $1;
    $252 = ((($251)) + 18172|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) + -1)|0;
    HEAP32[$252>>2] = $254;
    $255 = ($254|0)<=(0);
    if ($255) {
     $256 = $1;
     $257 = ((($256)) + 18112|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ($258|0)<(24);
     if ($259) {
      $260 = $1;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($260);
     }
     $261 = $1;
     $262 = ((($261)) + 18116|0);
     $263 = HEAP8[$262>>0]|0;
     $264 = $263&255;
     $265 = ($264|0)>=(208);
     if (!($265)) {
      label = 39;
      break L29;
     }
     $266 = $1;
     $267 = ((($266)) + 18116|0);
     $268 = HEAP8[$267>>0]|0;
     $269 = $268&255;
     $270 = ($269|0)<=(215);
     if (!($270)) {
      label = 39;
      break L29;
     }
     $271 = $1;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($271);
    }
    $272 = $i1;
    $273 = (($272) + 1)|0;
    $i1 = $273;
   }
   $274 = $j2;
   $275 = (($274) + 1)|0;
   $j2 = $275;
  }
  if ((label|0) == 30) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 39) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 43) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
 }
 if ($10) {
  $276 = $1;
  $277 = ((($276)) + 18152|0);
  $278 = HEAP32[$277>>2]|0;
  $n8 = $278;
  $279 = $n8;
  $280 = $1;
  $281 = ((($280)) + 17820|0);
  $282 = (($281) + (($279*72)|0)|0);
  $283 = ((($282)) + 28|0);
  $284 = HEAP32[$283>>2]|0;
  $285 = (($284) + 7)|0;
  $286 = $285 >> 3;
  $w9 = $286;
  $287 = $n8;
  $288 = $1;
  $289 = ((($288)) + 17820|0);
  $290 = (($289) + (($287*72)|0)|0);
  $291 = ((($290)) + 32|0);
  $292 = HEAP32[$291>>2]|0;
  $293 = (($292) + 7)|0;
  $294 = $293 >> 3;
  $h10 = $294;
  $j7 = 0;
  L67: while(1) {
   $295 = $j7;
   $296 = $h10;
   $297 = ($295|0)<($296|0);
   if (!($297)) {
    label = 63;
    break;
   }
   $i6 = 0;
   while(1) {
    $298 = $i6;
    $299 = $w9;
    $300 = ($298|0)<($299|0);
    if (!($300)) {
     break;
    }
    $301 = $n8;
    $302 = $1;
    $303 = ((($302)) + 17820|0);
    $304 = (($303) + (($301*72)|0)|0);
    $305 = ((($304)) + 60|0);
    $306 = HEAP32[$305>>2]|0;
    $307 = $i6;
    $308 = $j7;
    $309 = $n8;
    $310 = $1;
    $311 = ((($310)) + 17820|0);
    $312 = (($311) + (($309*72)|0)|0);
    $313 = ((($312)) + 64|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = Math_imul($308, $314)|0;
    $316 = (($307) + ($315))|0;
    $317 = $316<<6;
    $318 = (($306) + ($317<<1)|0);
    $data11 = $318;
    $319 = $1;
    $320 = ((($319)) + 18128|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($321|0)==(0);
    if ($322) {
     $323 = $1;
     $324 = $data11;
     $325 = $n8;
     $326 = $1;
     $327 = ((($326)) + 17820|0);
     $328 = (($327) + (($325*72)|0)|0);
     $329 = ((($328)) + 16|0);
     $330 = HEAP32[$329>>2]|0;
     $331 = $1;
     $332 = ((($331)) + 4|0);
     $333 = (($332) + (($330*1680)|0)|0);
     $334 = $n8;
     $335 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($323,$324,$333,$334)|0);
     $336 = ($335|0)!=(0);
     if (!($336)) {
      label = 51;
      break L67;
     }
    } else {
     $337 = $n8;
     $338 = $1;
     $339 = ((($338)) + 17820|0);
     $340 = (($339) + (($337*72)|0)|0);
     $341 = ((($340)) + 20|0);
     $342 = HEAP32[$341>>2]|0;
     $ha12 = $342;
     $343 = $1;
     $344 = $data11;
     $345 = $ha12;
     $346 = $1;
     $347 = ((($346)) + 6724|0);
     $348 = (($347) + (($345*1680)|0)|0);
     $349 = $ha12;
     $350 = $1;
     $351 = ((($350)) + 13700|0);
     $352 = (($351) + ($349<<10)|0);
     $353 = (__ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($343,$344,$348,$352)|0);
     $354 = ($353|0)!=(0);
     if (!($354)) {
      label = 53;
      break L67;
     }
    }
    $355 = $1;
    $356 = ((($355)) + 18172|0);
    $357 = HEAP32[$356>>2]|0;
    $358 = (($357) + -1)|0;
    HEAP32[$356>>2] = $358;
    $359 = ($358|0)<=(0);
    if ($359) {
     $360 = $1;
     $361 = ((($360)) + 18112|0);
     $362 = HEAP32[$361>>2]|0;
     $363 = ($362|0)<(24);
     if ($363) {
      $364 = $1;
      __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($364);
     }
     $365 = $1;
     $366 = ((($365)) + 18116|0);
     $367 = HEAP8[$366>>0]|0;
     $368 = $367&255;
     $369 = ($368|0)>=(208);
     if (!($369)) {
      label = 59;
      break L67;
     }
     $370 = $1;
     $371 = ((($370)) + 18116|0);
     $372 = HEAP8[$371>>0]|0;
     $373 = $372&255;
     $374 = ($373|0)<=(215);
     if (!($374)) {
      label = 59;
      break L67;
     }
     $375 = $1;
     __ZL16stbi__jpeg_resetP10stbi__jpeg($375);
    }
    $376 = $i6;
    $377 = (($376) + 1)|0;
    $i6 = $377;
   }
   $378 = $j7;
   $379 = (($378) + 1)|0;
   $j7 = $379;
  }
  if ((label|0) == 51) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 53) {
   $0 = 0;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 59) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
  else if ((label|0) == 63) {
   $0 = 1;
   $499 = $0;
   STACKTOP = sp;return ($499|0);
  }
 }
 $j14 = 0;
 L96: while(1) {
  $380 = $j14;
  $381 = $1;
  $382 = ((($381)) + 17808|0);
  $383 = HEAP32[$382>>2]|0;
  $384 = ($380|0)<($383|0);
  if (!($384)) {
   label = 88;
   break;
  }
  $i13 = 0;
  while(1) {
   $385 = $i13;
   $386 = $1;
   $387 = ((($386)) + 17804|0);
   $388 = HEAP32[$387>>2]|0;
   $389 = ($385|0)<($388|0);
   if (!($389)) {
    break;
   }
   $k15 = 0;
   while(1) {
    $390 = $k15;
    $391 = $1;
    $392 = ((($391)) + 18148|0);
    $393 = HEAP32[$392>>2]|0;
    $394 = ($390|0)<($393|0);
    if (!($394)) {
     break;
    }
    $395 = $k15;
    $396 = $1;
    $397 = ((($396)) + 18152|0);
    $398 = (($397) + ($395<<2)|0);
    $399 = HEAP32[$398>>2]|0;
    $n18 = $399;
    $y17 = 0;
    while(1) {
     $400 = $y17;
     $401 = $n18;
     $402 = $1;
     $403 = ((($402)) + 17820|0);
     $404 = (($403) + (($401*72)|0)|0);
     $405 = ((($404)) + 8|0);
     $406 = HEAP32[$405>>2]|0;
     $407 = ($400|0)<($406|0);
     if (!($407)) {
      break;
     }
     $x16 = 0;
     while(1) {
      $408 = $x16;
      $409 = $n18;
      $410 = $1;
      $411 = ((($410)) + 17820|0);
      $412 = (($411) + (($409*72)|0)|0);
      $413 = ((($412)) + 4|0);
      $414 = HEAP32[$413>>2]|0;
      $415 = ($408|0)<($414|0);
      if (!($415)) {
       break;
      }
      $416 = $i13;
      $417 = $n18;
      $418 = $1;
      $419 = ((($418)) + 17820|0);
      $420 = (($419) + (($417*72)|0)|0);
      $421 = ((($420)) + 4|0);
      $422 = HEAP32[$421>>2]|0;
      $423 = Math_imul($416, $422)|0;
      $424 = $x16;
      $425 = (($423) + ($424))|0;
      $x219 = $425;
      $426 = $j14;
      $427 = $n18;
      $428 = $1;
      $429 = ((($428)) + 17820|0);
      $430 = (($429) + (($427*72)|0)|0);
      $431 = ((($430)) + 8|0);
      $432 = HEAP32[$431>>2]|0;
      $433 = Math_imul($426, $432)|0;
      $434 = $y17;
      $435 = (($433) + ($434))|0;
      $y220 = $435;
      $436 = $n18;
      $437 = $1;
      $438 = ((($437)) + 17820|0);
      $439 = (($438) + (($436*72)|0)|0);
      $440 = ((($439)) + 60|0);
      $441 = HEAP32[$440>>2]|0;
      $442 = $x219;
      $443 = $y220;
      $444 = $n18;
      $445 = $1;
      $446 = ((($445)) + 17820|0);
      $447 = (($446) + (($444*72)|0)|0);
      $448 = ((($447)) + 64|0);
      $449 = HEAP32[$448>>2]|0;
      $450 = Math_imul($443, $449)|0;
      $451 = (($442) + ($450))|0;
      $452 = $451<<6;
      $453 = (($441) + ($452<<1)|0);
      $data21 = $453;
      $454 = $1;
      $455 = $data21;
      $456 = $n18;
      $457 = $1;
      $458 = ((($457)) + 17820|0);
      $459 = (($458) + (($456*72)|0)|0);
      $460 = ((($459)) + 16|0);
      $461 = HEAP32[$460>>2]|0;
      $462 = $1;
      $463 = ((($462)) + 4|0);
      $464 = (($463) + (($461*1680)|0)|0);
      $465 = $n18;
      $466 = (__ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($454,$455,$464,$465)|0);
      $467 = ($466|0)!=(0);
      if (!($467)) {
       label = 75;
       break L96;
      }
      $468 = $x16;
      $469 = (($468) + 1)|0;
      $x16 = $469;
     }
     $470 = $y17;
     $471 = (($470) + 1)|0;
     $y17 = $471;
    }
    $472 = $k15;
    $473 = (($472) + 1)|0;
    $k15 = $473;
   }
   $474 = $1;
   $475 = ((($474)) + 18172|0);
   $476 = HEAP32[$475>>2]|0;
   $477 = (($476) + -1)|0;
   HEAP32[$475>>2] = $477;
   $478 = ($477|0)<=(0);
   if ($478) {
    $479 = $1;
    $480 = ((($479)) + 18112|0);
    $481 = HEAP32[$480>>2]|0;
    $482 = ($481|0)<(24);
    if ($482) {
     $483 = $1;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($483);
    }
    $484 = $1;
    $485 = ((($484)) + 18116|0);
    $486 = HEAP8[$485>>0]|0;
    $487 = $486&255;
    $488 = ($487|0)>=(208);
    if (!($488)) {
     label = 84;
     break L96;
    }
    $489 = $1;
    $490 = ((($489)) + 18116|0);
    $491 = HEAP8[$490>>0]|0;
    $492 = $491&255;
    $493 = ($492|0)<=(215);
    if (!($493)) {
     label = 84;
     break L96;
    }
    $494 = $1;
    __ZL16stbi__jpeg_resetP10stbi__jpeg($494);
   }
   $495 = $i13;
   $496 = (($495) + 1)|0;
   $i13 = $496;
  }
  $497 = $j14;
  $498 = (($497) + 1)|0;
  $j14 = $498;
 }
 if ((label|0) == 75) {
  $0 = 0;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 else if ((label|0) == 84) {
  $0 = 1;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 else if ((label|0) == 88) {
  $0 = 1;
  $499 = $0;
  STACKTOP = sp;return ($499|0);
 }
 return (0)|0;
}
function __ZL16stbi__jpeg_resetP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18112|0);
 HEAP32[$2>>2] = 0;
 $3 = $0;
 $4 = ((($3)) + 18108|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 18120|0);
 HEAP32[$6>>2] = 0;
 $7 = $0;
 $8 = ((($7)) + 17820|0);
 $9 = ((($8)) + 144|0);
 $10 = ((($9)) + 24|0);
 HEAP32[$10>>2] = 0;
 $11 = $0;
 $12 = ((($11)) + 17820|0);
 $13 = ((($12)) + 72|0);
 $14 = ((($13)) + 24|0);
 HEAP32[$14>>2] = 0;
 $15 = $0;
 $16 = ((($15)) + 17820|0);
 $17 = ((($16)) + 24|0);
 HEAP32[$17>>2] = 0;
 $18 = $0;
 $19 = ((($18)) + 18116|0);
 HEAP8[$19>>0] = -1;
 $20 = $0;
 $21 = ((($20)) + 18168|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0);
 if (!($23)) {
  $29 = 2147483647;
  $27 = $0;
  $28 = ((($27)) + 18172|0);
  HEAP32[$28>>2] = $29;
  $30 = $0;
  $31 = ((($30)) + 18144|0);
  HEAP32[$31>>2] = 0;
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 18168|0);
 $26 = HEAP32[$25>>2]|0;
 $29 = $26;
 $27 = $0;
 $28 = ((($27)) + 18172|0);
 HEAP32[$28>>2] = $29;
 $30 = $0;
 $31 = ((($30)) + 18144|0);
 HEAP32[$31>>2] = 0;
 STACKTOP = sp;return;
}
function __ZL23stbi__jpeg_decode_blockP10stbi__jpegPsP13stbi__huffmanS3_S1_iPh($j,$data,$hdc,$hac,$fac,$b,$dequant) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $hac = $hac|0;
 $fac = $fac|0;
 $b = $b|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $dc = 0;
 var $diff = 0, $k = 0, $r = 0, $rs = 0, $s = 0, $t = 0, $zig = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hdc;
 $4 = $hac;
 $5 = $fac;
 $6 = $b;
 $7 = $dequant;
 $8 = $1;
 $9 = ((($8)) + 18112|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)<(16);
 if ($11) {
  $12 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($12);
 }
 $13 = $1;
 $14 = $3;
 $15 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($13,$14)|0);
 $t = $15;
 $16 = $t;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = (__ZL9stbi__errPKc(2560)|0);
  $0 = $18;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 $19 = $2;
 dest=$19; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $20 = $t;
 $21 = ($20|0)!=(0);
 if ($21) {
  $22 = $1;
  $23 = $t;
  $24 = (__ZL20stbi__extend_receiveP10stbi__jpegi($22,$23)|0);
  $25 = $24;
 } else {
  $25 = 0;
 }
 $diff = $25;
 $26 = $6;
 $27 = $1;
 $28 = ((($27)) + 17820|0);
 $29 = (($28) + (($26*72)|0)|0);
 $30 = ((($29)) + 24|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = $diff;
 $33 = (($31) + ($32))|0;
 $dc = $33;
 $34 = $dc;
 $35 = $6;
 $36 = $1;
 $37 = ((($36)) + 17820|0);
 $38 = (($37) + (($35*72)|0)|0);
 $39 = ((($38)) + 24|0);
 HEAP32[$39>>2] = $34;
 $40 = $dc;
 $41 = $7;
 $42 = HEAP8[$41>>0]|0;
 $43 = $42&255;
 $44 = Math_imul($40, $43)|0;
 $45 = $44&65535;
 $46 = $2;
 HEAP16[$46>>1] = $45;
 $k = 1;
 L11: while(1) {
  $47 = $1;
  $48 = ((($47)) + 18112|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = ($49|0)<(16);
  if ($50) {
   $51 = $1;
   __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($51);
  }
  $52 = $1;
  $53 = ((($52)) + 18108|0);
  $54 = HEAP32[$53>>2]|0;
  $55 = $54 >>> 23;
  $56 = $55 & 511;
  $c = $56;
  $57 = $c;
  $58 = $5;
  $59 = (($58) + ($57<<1)|0);
  $60 = HEAP16[$59>>1]|0;
  $61 = $60 << 16 >> 16;
  $r = $61;
  $62 = $r;
  $63 = ($62|0)!=(0);
  do {
   if ($63) {
    $64 = $r;
    $65 = $64 >> 4;
    $66 = $65 & 15;
    $67 = $k;
    $68 = (($67) + ($66))|0;
    $k = $68;
    $69 = $r;
    $70 = $69 & 15;
    $s = $70;
    $71 = $s;
    $72 = $1;
    $73 = ((($72)) + 18108|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = $74 << $71;
    HEAP32[$73>>2] = $75;
    $76 = $s;
    $77 = $1;
    $78 = ((($77)) + 18112|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (($79) - ($76))|0;
    HEAP32[$78>>2] = $80;
    $81 = $k;
    $82 = (($81) + 1)|0;
    $k = $82;
    $83 = (2060 + ($81)|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $zig = $85;
    $86 = $r;
    $87 = $86 >> 8;
    $88 = $zig;
    $89 = $7;
    $90 = (($89) + ($88)|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = Math_imul($87, $92)|0;
    $94 = $93&65535;
    $95 = $zig;
    $96 = $2;
    $97 = (($96) + ($95<<1)|0);
    HEAP16[$97>>1] = $94;
   } else {
    $98 = $1;
    $99 = $4;
    $100 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($98,$99)|0);
    $rs = $100;
    $101 = $rs;
    $102 = ($101|0)<(0);
    if ($102) {
     label = 13;
     break L11;
    }
    $104 = $rs;
    $105 = $104 & 15;
    $s = $105;
    $106 = $rs;
    $107 = $106 >> 4;
    $r = $107;
    $108 = $s;
    $109 = ($108|0)==(0);
    if (!($109)) {
     $114 = $r;
     $115 = $k;
     $116 = (($115) + ($114))|0;
     $k = $116;
     $117 = $k;
     $118 = (($117) + 1)|0;
     $k = $118;
     $119 = (2060 + ($117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $zig = $121;
     $122 = $1;
     $123 = $s;
     $124 = (__ZL20stbi__extend_receiveP10stbi__jpegi($122,$123)|0);
     $125 = $zig;
     $126 = $7;
     $127 = (($126) + ($125)|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = $128&255;
     $130 = Math_imul($124, $129)|0;
     $131 = $130&65535;
     $132 = $zig;
     $133 = $2;
     $134 = (($133) + ($132<<1)|0);
     HEAP16[$134>>1] = $131;
     break;
    }
    $110 = $rs;
    $111 = ($110|0)!=(240);
    if ($111) {
     label = 19;
     break L11;
    }
    $112 = $k;
    $113 = (($112) + 16)|0;
    $k = $113;
   }
  } while(0);
  $135 = $k;
  $136 = ($135|0)<(64);
  if (!($136)) {
   label = 19;
   break;
  }
 }
 if ((label|0) == 13) {
  $103 = (__ZL9stbi__errPKc(2560)|0);
  $0 = $103;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 else if ((label|0) == 19) {
  $0 = 1;
  $137 = $0;
  STACKTOP = sp;return ($137|0);
 }
 return (0)|0;
}
function __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $b = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 18120|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)!=(0);
  if ($4) {
   $9 = 0;
  } else {
   $5 = $0;
   $6 = HEAP32[$5>>2]|0;
   $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
   $8 = $7&255;
   $9 = $8;
  }
  $b = $9;
  $10 = $b;
  $11 = ($10|0)==(255);
  if ($11) {
   $12 = $0;
   $13 = HEAP32[$12>>2]|0;
   $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
   $15 = $14&255;
   $c = $15;
   $16 = $c;
   $17 = ($16|0)!=(0);
   if ($17) {
    break;
   }
  }
  $24 = $b;
  $25 = $0;
  $26 = ((($25)) + 18112|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (24 - ($27))|0;
  $29 = $24 << $28;
  $30 = $0;
  $31 = ((($30)) + 18108|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | $29;
  HEAP32[$31>>2] = $33;
  $34 = $0;
  $35 = ((($34)) + 18112|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = (($36) + 8)|0;
  HEAP32[$35>>2] = $37;
  $38 = $0;
  $39 = ((($38)) + 18112|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)<=(24);
  if (!($41)) {
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  STACKTOP = sp;return;
 }
 $18 = $c;
 $19 = $18&255;
 $20 = $0;
 $21 = ((($20)) + 18116|0);
 HEAP8[$21>>0] = $19;
 $22 = $0;
 $23 = ((($22)) + 18120|0);
 HEAP32[$23>>2] = 1;
 STACKTOP = sp;return;
}
function __ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($j,$h) {
 $j = $j|0;
 $h = $h|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $k = 0, $s = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $h;
 $3 = $1;
 $4 = ((($3)) + 18112|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(16);
 if ($6) {
  $7 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $1;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >>> 23;
 $12 = $11 & 511;
 $c = $12;
 $13 = $c;
 $14 = $2;
 $15 = (($14) + ($13)|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $k = $17;
 $18 = $k;
 $19 = ($18|0)<(255);
 if ($19) {
  $20 = $k;
  $21 = $2;
  $22 = ((($21)) + 1280|0);
  $23 = (($22) + ($20)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24&255;
  $s = $25;
  $26 = $s;
  $27 = $1;
  $28 = ((($27)) + 18112|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ($26|0)>($29|0);
  if ($30) {
   $0 = -1;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  } else {
   $31 = $s;
   $32 = $1;
   $33 = ((($32)) + 18108|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = $34 << $31;
   HEAP32[$33>>2] = $35;
   $36 = $s;
   $37 = $1;
   $38 = ((($37)) + 18112|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (($39) - ($36))|0;
   HEAP32[$38>>2] = $40;
   $41 = $k;
   $42 = $2;
   $43 = ((($42)) + 1024|0);
   $44 = (($43) + ($41)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45&255;
   $0 = $46;
   $129 = $0;
   STACKTOP = sp;return ($129|0);
  }
 }
 $47 = $1;
 $48 = ((($47)) + 18108|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = $49 >>> 16;
 $temp = $50;
 $k = 10;
 while(1) {
  $51 = $temp;
  $52 = $k;
  $53 = $2;
  $54 = ((($53)) + 1540|0);
  $55 = (($54) + ($52<<2)|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ($51>>>0)<($56>>>0);
  $58 = $k;
  if ($57) {
   break;
  }
  $59 = (($58) + 1)|0;
  $k = $59;
 }
 $60 = ($58|0)==(17);
 if ($60) {
  $61 = $1;
  $62 = ((($61)) + 18112|0);
  $63 = HEAP32[$62>>2]|0;
  $64 = (($63) - 16)|0;
  HEAP32[$62>>2] = $64;
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $65 = $k;
 $66 = $1;
 $67 = ((($66)) + 18112|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($65|0)>($68|0);
 if ($69) {
  $0 = -1;
  $129 = $0;
  STACKTOP = sp;return ($129|0);
 }
 $70 = $1;
 $71 = ((($70)) + 18108|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = $k;
 $74 = (32 - ($73))|0;
 $75 = $72 >>> $74;
 $76 = $k;
 $77 = (180 + ($76<<2)|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = $75 & $78;
 $80 = $k;
 $81 = $2;
 $82 = ((($81)) + 1612|0);
 $83 = (($82) + ($80<<2)|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = (($79) + ($84))|0;
 $c = $85;
 $86 = $1;
 $87 = ((($86)) + 18108|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = $c;
 $90 = $2;
 $91 = ((($90)) + 1280|0);
 $92 = (($91) + ($89)|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = (32 - ($94))|0;
 $96 = $88 >>> $95;
 $97 = $c;
 $98 = $2;
 $99 = ((($98)) + 1280|0);
 $100 = (($99) + ($97)|0);
 $101 = HEAP8[$100>>0]|0;
 $102 = $101&255;
 $103 = (180 + ($102<<2)|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = $96 & $104;
 $106 = $c;
 $107 = $2;
 $108 = ((($107)) + 512|0);
 $109 = (($108) + ($106<<1)|0);
 $110 = HEAP16[$109>>1]|0;
 $111 = $110&65535;
 $112 = ($105|0)==($111|0);
 if (!($112)) {
  ___assert_fail((2382|0),(2464|0),1651,(2537|0));
  // unreachable;
 }
 $113 = $k;
 $114 = $1;
 $115 = ((($114)) + 18112|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = (($116) - ($113))|0;
 HEAP32[$115>>2] = $117;
 $118 = $k;
 $119 = $1;
 $120 = ((($119)) + 18108|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = $121 << $118;
 HEAP32[$120>>2] = $122;
 $123 = $c;
 $124 = $2;
 $125 = ((($124)) + 1024|0);
 $126 = (($125) + ($123)|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $0 = $128;
 $129 = $0;
 STACKTOP = sp;return ($129|0);
}
function __ZL20stbi__extend_receiveP10stbi__jpegi($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, $or$cond = 0, $sgn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $0;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 >> 31;
 $sgn = $11;
 $12 = $0;
 $13 = ((($12)) + 18108|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = $14 << $15;
 $17 = $0;
 $18 = ((($17)) + 18108|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $1;
 $21 = (32 - ($20))|0;
 $22 = $19 >>> $21;
 $23 = $16 | $22;
 $k = $23;
 $24 = $1;
 $25 = ($24|0)>=(0);
 $26 = $1;
 $27 = ($26|0)<(17);
 $or$cond = $25 & $27;
 if ($or$cond) {
  $28 = $k;
  $29 = $1;
  $30 = (180 + ($29<<2)|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $31 ^ -1;
  $33 = $28 & $32;
  $34 = $0;
  $35 = ((($34)) + 18108|0);
  HEAP32[$35>>2] = $33;
  $36 = $1;
  $37 = (180 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $k;
  $40 = $39 & $38;
  $k = $40;
  $41 = $1;
  $42 = $0;
  $43 = ((($42)) + 18112|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = (($44) - ($41))|0;
  HEAP32[$43>>2] = $45;
  $46 = $k;
  $47 = $1;
  $48 = (248 + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = $sgn;
  $51 = $50 ^ -1;
  $52 = $49 & $51;
  $53 = (($46) + ($52))|0;
  STACKTOP = sp;return ($53|0);
 } else {
  ___assert_fail((2577|0),(2464|0),1672,(2640|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL31stbi__jpeg_decode_block_prog_dcP10stbi__jpegPsP13stbi__huffmani($j,$data,$hdc,$b) {
 $j = $j|0;
 $data = $data|0;
 $hdc = $hdc|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $dc = 0, $diff = 0, $t = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hdc;
 $4 = $b;
 $5 = $1;
 $6 = ((($5)) + 18132|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(2661)|0);
  $0 = $9;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $10 = $1;
 $11 = ((($10)) + 18112|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)<(16);
 if ($13) {
  $14 = $1;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($14);
 }
 $15 = $1;
 $16 = ((($15)) + 18136|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $2;
  dest=$19; stop=dest+128|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
  $20 = $1;
  $21 = $3;
  $22 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($20,$21)|0);
  $t = $22;
  $23 = $t;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $1;
   $26 = $t;
   $27 = (__ZL20stbi__extend_receiveP10stbi__jpegi($25,$26)|0);
   $28 = $27;
  } else {
   $28 = 0;
  }
  $diff = $28;
  $29 = $4;
  $30 = $1;
  $31 = ((($30)) + 17820|0);
  $32 = (($31) + (($29*72)|0)|0);
  $33 = ((($32)) + 24|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $diff;
  $36 = (($34) + ($35))|0;
  $dc = $36;
  $37 = $dc;
  $38 = $4;
  $39 = $1;
  $40 = ((($39)) + 17820|0);
  $41 = (($40) + (($38*72)|0)|0);
  $42 = ((($41)) + 24|0);
  HEAP32[$42>>2] = $37;
  $43 = $dc;
  $44 = $1;
  $45 = ((($44)) + 18140|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = $43 << $46;
  $48 = $47&65535;
  $49 = $2;
  HEAP16[$49>>1] = $48;
 } else {
  $50 = $1;
  $51 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($50)|0);
  $52 = ($51|0)!=(0);
  if ($52) {
   $53 = $1;
   $54 = ((($53)) + 18140|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = 1 << $55;
   $57 = $56&65535;
   $58 = $57 << 16 >> 16;
   $59 = $2;
   $60 = HEAP16[$59>>1]|0;
   $61 = $60 << 16 >> 16;
   $62 = (($61) + ($58))|0;
   $63 = $62&65535;
   HEAP16[$59>>1] = $63;
  }
 }
 $0 = 1;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function __ZL18stbi__jpeg_get_bitP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $0;
 $2 = ((($1)) + 18112|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(1);
 if ($4) {
  $5 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($5);
 }
 $6 = $0;
 $7 = ((($6)) + 18108|0);
 $8 = HEAP32[$7>>2]|0;
 $k = $8;
 $9 = $0;
 $10 = ((($9)) + 18108|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 << 1;
 HEAP32[$10>>2] = $12;
 $13 = $0;
 $14 = ((($13)) + 18112|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (($15) + -1)|0;
 HEAP32[$14>>2] = $16;
 $17 = $k;
 $18 = $17 & -2147483648;
 STACKTOP = sp;return ($18|0);
}
function __ZL31stbi__jpeg_decode_block_prog_acP10stbi__jpegPsP13stbi__huffmanS1_($j,$data,$hac,$fac) {
 $j = $j|0;
 $data = $data|0;
 $hac = $hac|0;
 $fac = $fac|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bit = 0, $c = 0, $k = 0, $p = 0, $p4 = 0, $r = 0, $r1 = 0, $rs = 0;
 var $rs3 = 0, $s = 0, $s2 = 0, $shift = 0, $zig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $j;
 $2 = $data;
 $3 = $hac;
 $4 = $fac;
 $5 = $1;
 $6 = ((($5)) + 18128|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(2661)|0);
  $0 = $9;
  $271 = $0;
  STACKTOP = sp;return ($271|0);
 }
 $10 = $1;
 $11 = ((($10)) + 18136|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 $14 = $1;
 $15 = ((($14)) + 18140|0);
 $16 = HEAP32[$15>>2]|0;
 L5: do {
  if ($13) {
   $shift = $16;
   $17 = $1;
   $18 = ((($17)) + 18144|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)!=(0);
   $21 = $1;
   if ($20) {
    $22 = ((($21)) + 18144|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (($23) + -1)|0;
    HEAP32[$22>>2] = $24;
    $0 = 1;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   $25 = ((($21)) + 18128|0);
   $26 = HEAP32[$25>>2]|0;
   $k = $26;
   L11: while(1) {
    $27 = $1;
    $28 = ((($27)) + 18112|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)<(16);
    if ($30) {
     $31 = $1;
     __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($31);
    }
    $32 = $1;
    $33 = ((($32)) + 18108|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = $34 >>> 23;
    $36 = $35 & 511;
    $c = $36;
    $37 = $c;
    $38 = $4;
    $39 = (($38) + ($37<<1)|0);
    $40 = HEAP16[$39>>1]|0;
    $41 = $40 << 16 >> 16;
    $r = $41;
    $42 = $r;
    $43 = ($42|0)!=(0);
    do {
     if ($43) {
      $44 = $r;
      $45 = $44 >> 4;
      $46 = $45 & 15;
      $47 = $k;
      $48 = (($47) + ($46))|0;
      $k = $48;
      $49 = $r;
      $50 = $49 & 15;
      $s = $50;
      $51 = $s;
      $52 = $1;
      $53 = ((($52)) + 18108|0);
      $54 = HEAP32[$53>>2]|0;
      $55 = $54 << $51;
      HEAP32[$53>>2] = $55;
      $56 = $s;
      $57 = $1;
      $58 = ((($57)) + 18112|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = (($59) - ($56))|0;
      HEAP32[$58>>2] = $60;
      $61 = $k;
      $62 = (($61) + 1)|0;
      $k = $62;
      $63 = (2060 + ($61)|0);
      $64 = HEAP8[$63>>0]|0;
      $65 = $64&255;
      $zig = $65;
      $66 = $r;
      $67 = $66 >> 8;
      $68 = $shift;
      $69 = $67 << $68;
      $70 = $69&65535;
      $71 = $zig;
      $72 = $2;
      $73 = (($72) + ($71<<1)|0);
      HEAP16[$73>>1] = $70;
     } else {
      $74 = $1;
      $75 = $3;
      $76 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($74,$75)|0);
      $rs = $76;
      $77 = $rs;
      $78 = ($77|0)<(0);
      if ($78) {
       label = 12;
       break L11;
      }
      $80 = $rs;
      $81 = $80 & 15;
      $s = $81;
      $82 = $rs;
      $83 = $82 >> 4;
      $r = $83;
      $84 = $s;
      $85 = ($84|0)==(0);
      $86 = $r;
      if (!($85)) {
       $107 = $k;
       $108 = (($107) + ($86))|0;
       $k = $108;
       $109 = $k;
       $110 = (($109) + 1)|0;
       $k = $110;
       $111 = (2060 + ($109)|0);
       $112 = HEAP8[$111>>0]|0;
       $113 = $112&255;
       $zig = $113;
       $114 = $1;
       $115 = $s;
       $116 = (__ZL20stbi__extend_receiveP10stbi__jpegi($114,$115)|0);
       $117 = $shift;
       $118 = $116 << $117;
       $119 = $118&65535;
       $120 = $zig;
       $121 = $2;
       $122 = (($121) + ($120<<1)|0);
       HEAP16[$122>>1] = $119;
       break;
      }
      $87 = ($86|0)<(15);
      if ($87) {
       break L11;
      }
      $105 = $k;
      $106 = (($105) + 16)|0;
      $k = $106;
     }
    } while(0);
    $123 = $k;
    $124 = $1;
    $125 = ((($124)) + 18132|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($123|0)<=($126|0);
    if (!($127)) {
     break L5;
    }
   }
   if ((label|0) == 12) {
    $79 = (__ZL9stbi__errPKc(2560)|0);
    $0 = $79;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   $88 = $r;
   $89 = 1 << $88;
   $90 = $1;
   $91 = ((($90)) + 18144|0);
   HEAP32[$91>>2] = $89;
   $92 = $r;
   $93 = ($92|0)!=(0);
   if ($93) {
    $94 = $1;
    $95 = $r;
    $96 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($94,$95)|0);
    $97 = $1;
    $98 = ((($97)) + 18144|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = (($99) + ($96))|0;
    HEAP32[$98>>2] = $100;
   }
   $101 = $1;
   $102 = ((($101)) + 18144|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = (($103) + -1)|0;
   HEAP32[$102>>2] = $104;
  } else {
   $128 = 1 << $16;
   $129 = $128&65535;
   $bit = $129;
   $130 = $1;
   $131 = ((($130)) + 18144|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)!=(0);
   $134 = $1;
   if ($133) {
    $135 = ((($134)) + 18144|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = (($136) + -1)|0;
    HEAP32[$135>>2] = $137;
    $138 = $1;
    $139 = ((($138)) + 18128|0);
    $140 = HEAP32[$139>>2]|0;
    $k = $140;
    while(1) {
     $141 = $k;
     $142 = $1;
     $143 = ((($142)) + 18132|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($141|0)<=($144|0);
     if (!($145)) {
      break L5;
     }
     $146 = $k;
     $147 = (2060 + ($146)|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = $148&255;
     $150 = $2;
     $151 = (($150) + ($149<<1)|0);
     $p = $151;
     $152 = $p;
     $153 = HEAP16[$152>>1]|0;
     $154 = $153 << 16 >> 16;
     $155 = ($154|0)!=(0);
     do {
      if ($155) {
       $156 = $1;
       $157 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($156)|0);
       $158 = ($157|0)!=(0);
       if ($158) {
        $159 = $p;
        $160 = HEAP16[$159>>1]|0;
        $161 = $160 << 16 >> 16;
        $162 = $bit;
        $163 = $162 << 16 >> 16;
        $164 = $161 & $163;
        $165 = ($164|0)==(0);
        if ($165) {
         $166 = $p;
         $167 = HEAP16[$166>>1]|0;
         $168 = $167 << 16 >> 16;
         $169 = ($168|0)>(0);
         $170 = $bit;
         $171 = $170 << 16 >> 16;
         $172 = $p;
         $173 = HEAP16[$172>>1]|0;
         $174 = $173 << 16 >> 16;
         if ($169) {
          $175 = (($174) + ($171))|0;
          $176 = $175&65535;
          HEAP16[$172>>1] = $176;
          break;
         } else {
          $177 = (($174) - ($171))|0;
          $178 = $177&65535;
          HEAP16[$172>>1] = $178;
          break;
         }
        }
       }
      }
     } while(0);
     $179 = $k;
     $180 = (($179) + 1)|0;
     $k = $180;
    }
   }
   $181 = ((($134)) + 18128|0);
   $182 = HEAP32[$181>>2]|0;
   $k = $182;
   L47: while(1) {
    $183 = $1;
    $184 = $3;
    $185 = (__ZL22stbi__jpeg_huff_decodeP10stbi__jpegP13stbi__huffman($183,$184)|0);
    $rs3 = $185;
    $186 = $rs3;
    $187 = ($186|0)<(0);
    if ($187) {
     label = 33;
     break;
    }
    $189 = $rs3;
    $190 = $189 & 15;
    $s2 = $190;
    $191 = $rs3;
    $192 = $191 >> 4;
    $r1 = $192;
    $193 = $s2;
    $194 = ($193|0)==(0);
    do {
     if ($194) {
      $195 = $r1;
      $196 = ($195|0)<(15);
      if ($196) {
       $197 = $r1;
       $198 = 1 << $197;
       $199 = (($198) - 1)|0;
       $200 = $1;
       $201 = ((($200)) + 18144|0);
       HEAP32[$201>>2] = $199;
       $202 = $r1;
       $203 = ($202|0)!=(0);
       if ($203) {
        $204 = $1;
        $205 = $r1;
        $206 = (__ZL19stbi__jpeg_get_bitsP10stbi__jpegi($204,$205)|0);
        $207 = $1;
        $208 = ((($207)) + 18144|0);
        $209 = HEAP32[$208>>2]|0;
        $210 = (($209) + ($206))|0;
        HEAP32[$208>>2] = $210;
       }
       $r1 = 64;
      }
     } else {
      $211 = $s2;
      $212 = ($211|0)!=(1);
      if ($212) {
       label = 40;
       break L47;
      }
      $214 = $1;
      $215 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($214)|0);
      $216 = ($215|0)!=(0);
      $217 = $bit;
      $218 = $217 << 16 >> 16;
      if ($216) {
       $s2 = $218;
       break;
      } else {
       $219 = (0 - ($218))|0;
       $s2 = $219;
       break;
      }
     }
    } while(0);
    while(1) {
     $220 = $k;
     $221 = $1;
     $222 = ((($221)) + 18132|0);
     $223 = HEAP32[$222>>2]|0;
     $224 = ($220|0)<=($223|0);
     if (!($224)) {
      break;
     }
     $225 = $k;
     $226 = (($225) + 1)|0;
     $k = $226;
     $227 = (2060 + ($225)|0);
     $228 = HEAP8[$227>>0]|0;
     $229 = $228&255;
     $230 = $2;
     $231 = (($230) + ($229<<1)|0);
     $p4 = $231;
     $232 = $p4;
     $233 = HEAP16[$232>>1]|0;
     $234 = $233 << 16 >> 16;
     $235 = ($234|0)!=(0);
     if (!($235)) {
      $259 = $r1;
      $260 = ($259|0)==(0);
      if ($260) {
       label = 52;
       break;
      }
      $264 = $r1;
      $265 = (($264) + -1)|0;
      $r1 = $265;
      continue;
     }
     $236 = $1;
     $237 = (__ZL18stbi__jpeg_get_bitP10stbi__jpeg($236)|0);
     $238 = ($237|0)!=(0);
     if (!($238)) {
      continue;
     }
     $239 = $p4;
     $240 = HEAP16[$239>>1]|0;
     $241 = $240 << 16 >> 16;
     $242 = $bit;
     $243 = $242 << 16 >> 16;
     $244 = $241 & $243;
     $245 = ($244|0)==(0);
     if (!($245)) {
      continue;
     }
     $246 = $p4;
     $247 = HEAP16[$246>>1]|0;
     $248 = $247 << 16 >> 16;
     $249 = ($248|0)>(0);
     $250 = $bit;
     $251 = $250 << 16 >> 16;
     $252 = $p4;
     $253 = HEAP16[$252>>1]|0;
     $254 = $253 << 16 >> 16;
     if ($249) {
      $255 = (($254) + ($251))|0;
      $256 = $255&65535;
      HEAP16[$252>>1] = $256;
      continue;
     } else {
      $257 = (($254) - ($251))|0;
      $258 = $257&65535;
      HEAP16[$252>>1] = $258;
      continue;
     }
    }
    if ((label|0) == 52) {
     label = 0;
     $261 = $s2;
     $262 = $261&65535;
     $263 = $p4;
     HEAP16[$263>>1] = $262;
    }
    $266 = $k;
    $267 = $1;
    $268 = ((($267)) + 18132|0);
    $269 = HEAP32[$268>>2]|0;
    $270 = ($266|0)<=($269|0);
    if (!($270)) {
     break L5;
    }
   }
   if ((label|0) == 33) {
    $188 = (__ZL9stbi__errPKc(2560)|0);
    $0 = $188;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
   else if ((label|0) == 40) {
    $213 = (__ZL9stbi__errPKc(2560)|0);
    $0 = $213;
    $271 = $0;
    STACKTOP = sp;return ($271|0);
   }
  }
 } while(0);
 $0 = 1;
 $271 = $0;
 STACKTOP = sp;return ($271|0);
}
function __ZL19stbi__jpeg_get_bitsP10stbi__jpegi($j,$n) {
 $j = $j|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 18112|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL24stbi__grow_buffer_unsafeP10stbi__jpeg($7);
 }
 $8 = $0;
 $9 = ((($8)) + 18108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = $10 << $11;
 $13 = $0;
 $14 = ((($13)) + 18108|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $1;
 $17 = (32 - ($16))|0;
 $18 = $15 >>> $17;
 $19 = $12 | $18;
 $k = $19;
 $20 = $k;
 $21 = $1;
 $22 = (180 + ($21<<2)|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 ^ -1;
 $25 = $20 & $24;
 $26 = $0;
 $27 = ((($26)) + 18108|0);
 HEAP32[$27>>2] = $25;
 $28 = $1;
 $29 = (180 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $k;
 $32 = $31 & $30;
 $k = $32;
 $33 = $1;
 $34 = $0;
 $35 = ((($34)) + 18112|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) - ($33))|0;
 HEAP32[$35>>2] = $37;
 $38 = $k;
 STACKTOP = sp;return ($38|0);
}
function __ZL17stbi__jpeg_finishP10stbi__jpeg($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $data = 0, $h = 0, $i = 0, $j = 0;
 var $n = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $0;
 $2 = ((($1)) + 18124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0);
 if (!($4)) {
  STACKTOP = sp;return;
 }
 $n = 0;
 while(1) {
  $5 = $n;
  $6 = $0;
  $7 = HEAP32[$6>>2]|0;
  $8 = ((($7)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($5|0)<($9|0);
  if (!($10)) {
   break;
  }
  $11 = $n;
  $12 = $0;
  $13 = ((($12)) + 17820|0);
  $14 = (($13) + (($11*72)|0)|0);
  $15 = ((($14)) + 28|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (($16) + 7)|0;
  $18 = $17 >> 3;
  $w = $18;
  $19 = $n;
  $20 = $0;
  $21 = ((($20)) + 17820|0);
  $22 = (($21) + (($19*72)|0)|0);
  $23 = ((($22)) + 32|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = (($24) + 7)|0;
  $26 = $25 >> 3;
  $h = $26;
  $j = 0;
  while(1) {
   $27 = $j;
   $28 = $h;
   $29 = ($27|0)<($28|0);
   if (!($29)) {
    break;
   }
   $i = 0;
   while(1) {
    $30 = $i;
    $31 = $w;
    $32 = ($30|0)<($31|0);
    if (!($32)) {
     break;
    }
    $33 = $n;
    $34 = $0;
    $35 = ((($34)) + 17820|0);
    $36 = (($35) + (($33*72)|0)|0);
    $37 = ((($36)) + 60|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = $i;
    $40 = $j;
    $41 = $n;
    $42 = $0;
    $43 = ((($42)) + 17820|0);
    $44 = (($43) + (($41*72)|0)|0);
    $45 = ((($44)) + 64|0);
    $46 = HEAP32[$45>>2]|0;
    $47 = Math_imul($40, $46)|0;
    $48 = (($39) + ($47))|0;
    $49 = $48<<6;
    $50 = (($38) + ($49<<1)|0);
    $data = $50;
    $51 = $data;
    $52 = $n;
    $53 = $0;
    $54 = ((($53)) + 17820|0);
    $55 = (($54) + (($52*72)|0)|0);
    $56 = ((($55)) + 12|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = $0;
    $59 = ((($58)) + 13444|0);
    $60 = (($59) + ($57<<6)|0);
    __ZL21stbi__jpeg_dequantizePsPh($51,$60);
    $61 = $0;
    $62 = ((($61)) + 18176|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = $n;
    $65 = $0;
    $66 = ((($65)) + 17820|0);
    $67 = (($66) + (($64*72)|0)|0);
    $68 = ((($67)) + 44|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = $n;
    $71 = $0;
    $72 = ((($71)) + 17820|0);
    $73 = (($72) + (($70*72)|0)|0);
    $74 = ((($73)) + 36|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = $j;
    $77 = Math_imul($75, $76)|0;
    $78 = $77<<3;
    $79 = (($69) + ($78)|0);
    $80 = $i;
    $81 = $80<<3;
    $82 = (($79) + ($81)|0);
    $83 = $n;
    $84 = $0;
    $85 = ((($84)) + 17820|0);
    $86 = (($85) + (($83*72)|0)|0);
    $87 = ((($86)) + 36|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = $data;
    FUNCTION_TABLE_viii[$63 & 127]($82,$88,$89);
    $90 = $i;
    $91 = (($90) + 1)|0;
    $i = $91;
   }
   $92 = $j;
   $93 = (($92) + 1)|0;
   $j = $93;
  }
  $94 = $n;
  $95 = (($94) + 1)|0;
  $n = $95;
 }
 STACKTOP = sp;return;
}
function __ZL21stbi__jpeg_dequantizePsPh($data,$dequant) {
 $data = $data|0;
 $dequant = $dequant|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $data;
 $1 = $dequant;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(64);
  if (!($3)) {
   break;
  }
  $4 = $i;
  $5 = $1;
  $6 = (($5) + ($4)|0);
  $7 = HEAP8[$6>>0]|0;
  $8 = $7&255;
  $9 = $i;
  $10 = $0;
  $11 = (($10) + ($9<<1)|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12 << 16 >> 16;
  $14 = Math_imul($13, $8)|0;
  $15 = $14&65535;
  HEAP16[$11>>1] = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 STACKTOP = sp;return;
}
function __ZL18stbi__cleanup_jpegP10stbi__jpeg($j) {
 $j = $j|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $j;
 $i = 0;
 while(1) {
  $1 = $i;
  $2 = $0;
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($3)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($1|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $i;
  $8 = $0;
  $9 = ((($8)) + 17820|0);
  $10 = (($9) + (($7*72)|0)|0);
  $11 = ((($10)) + 48|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)!=(0|0);
  if ($13) {
   $14 = $i;
   $15 = $0;
   $16 = ((($15)) + 17820|0);
   $17 = (($16) + (($14*72)|0)|0);
   $18 = ((($17)) + 48|0);
   $19 = HEAP32[$18>>2]|0;
   _free($19);
   $20 = $i;
   $21 = $0;
   $22 = ((($21)) + 17820|0);
   $23 = (($22) + (($20*72)|0)|0);
   $24 = ((($23)) + 48|0);
   HEAP32[$24>>2] = 0;
   $25 = $i;
   $26 = $0;
   $27 = ((($26)) + 17820|0);
   $28 = (($27) + (($25*72)|0)|0);
   $29 = ((($28)) + 44|0);
   HEAP32[$29>>2] = 0;
  }
  $30 = $i;
  $31 = $0;
  $32 = ((($31)) + 17820|0);
  $33 = (($32) + (($30*72)|0)|0);
  $34 = ((($33)) + 52|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $i;
   $38 = $0;
   $39 = ((($38)) + 17820|0);
   $40 = (($39) + (($37*72)|0)|0);
   $41 = ((($40)) + 52|0);
   $42 = HEAP32[$41>>2]|0;
   _free($42);
   $43 = $i;
   $44 = $0;
   $45 = ((($44)) + 17820|0);
   $46 = (($45) + (($43*72)|0)|0);
   $47 = ((($46)) + 52|0);
   HEAP32[$47>>2] = 0;
   $48 = $i;
   $49 = $0;
   $50 = ((($49)) + 17820|0);
   $51 = (($50) + (($48*72)|0)|0);
   $52 = ((($51)) + 60|0);
   HEAP32[$52>>2] = 0;
  }
  $53 = $i;
  $54 = $0;
  $55 = ((($54)) + 17820|0);
  $56 = (($55) + (($53*72)|0)|0);
  $57 = ((($56)) + 56|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)!=(0|0);
  if ($59) {
   $60 = $i;
   $61 = $0;
   $62 = ((($61)) + 17820|0);
   $63 = (($62) + (($60*72)|0)|0);
   $64 = ((($63)) + 56|0);
   $65 = HEAP32[$64>>2]|0;
   _free($65);
   $66 = $i;
   $67 = $0;
   $68 = ((($67)) + 17820|0);
   $69 = (($68) + (($66*72)|0)|0);
   $70 = ((($69)) + 56|0);
   HEAP32[$70>>2] = 0;
  }
  $71 = $i;
  $72 = (($71) + 1)|0;
  $i = $72;
 }
 STACKTOP = sp;return;
}
function __ZL14resample_row_1PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $5 = $1;
 STACKTOP = sp;return ($5|0);
}
function __ZL22stbi__resample_row_v_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($12*3)|0;
  $14 = $i;
  $15 = $2;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17&255;
  $19 = (($13) + ($18))|0;
  $20 = (($19) + 2)|0;
  $21 = $20 >> 2;
  $22 = $21&255;
  $23 = $i;
  $24 = $0;
  $25 = (($24) + ($23)|0);
  HEAP8[$25>>0] = $22;
  $26 = $i;
  $27 = (($26) + 1)|0;
  $i = $27;
 }
 $28 = $0;
 STACKTOP = sp;return ($28|0);
}
function __ZL22stbi__resample_row_h_2PhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $input = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $out;
 $2 = $in_near;
 $3 = $in_far;
 $4 = $w;
 $5 = $hs;
 $6 = $2;
 $input = $6;
 $7 = $4;
 $8 = ($7|0)==(1);
 $9 = $input;
 $10 = HEAP8[$9>>0]|0;
 $11 = $1;
 if ($8) {
  $12 = ((($11)) + 1|0);
  HEAP8[$12>>0] = $10;
  $13 = $1;
  HEAP8[$13>>0] = $10;
  $14 = $1;
  $0 = $14;
  $105 = $0;
  STACKTOP = sp;return ($105|0);
 }
 HEAP8[$11>>0] = $10;
 $15 = $input;
 $16 = HEAP8[$15>>0]|0;
 $17 = $16&255;
 $18 = ($17*3)|0;
 $19 = $input;
 $20 = ((($19)) + 1|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = (($18) + ($22))|0;
 $24 = (($23) + 2)|0;
 $25 = $24 >> 2;
 $26 = $25&255;
 $27 = $1;
 $28 = ((($27)) + 1|0);
 HEAP8[$28>>0] = $26;
 $i = 1;
 while(1) {
  $29 = $i;
  $30 = $4;
  $31 = (($30) - 1)|0;
  $32 = ($29|0)<($31|0);
  if (!($32)) {
   break;
  }
  $33 = $i;
  $34 = $input;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36&255;
  $38 = ($37*3)|0;
  $39 = (($38) + 2)|0;
  $n = $39;
  $40 = $n;
  $41 = $i;
  $42 = (($41) - 1)|0;
  $43 = $input;
  $44 = (($43) + ($42)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = (($40) + ($46))|0;
  $48 = $47 >> 2;
  $49 = $48&255;
  $50 = $i;
  $51 = $50<<1;
  $52 = (($51) + 0)|0;
  $53 = $1;
  $54 = (($53) + ($52)|0);
  HEAP8[$54>>0] = $49;
  $55 = $n;
  $56 = $i;
  $57 = (($56) + 1)|0;
  $58 = $input;
  $59 = (($58) + ($57)|0);
  $60 = HEAP8[$59>>0]|0;
  $61 = $60&255;
  $62 = (($55) + ($61))|0;
  $63 = $62 >> 2;
  $64 = $63&255;
  $65 = $i;
  $66 = $65<<1;
  $67 = (($66) + 1)|0;
  $68 = $1;
  $69 = (($68) + ($67)|0);
  HEAP8[$69>>0] = $64;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 $72 = $4;
 $73 = (($72) - 2)|0;
 $74 = $input;
 $75 = (($74) + ($73)|0);
 $76 = HEAP8[$75>>0]|0;
 $77 = $76&255;
 $78 = ($77*3)|0;
 $79 = $4;
 $80 = (($79) - 1)|0;
 $81 = $input;
 $82 = (($81) + ($80)|0);
 $83 = HEAP8[$82>>0]|0;
 $84 = $83&255;
 $85 = (($78) + ($84))|0;
 $86 = (($85) + 2)|0;
 $87 = $86 >> 2;
 $88 = $87&255;
 $89 = $i;
 $90 = $89<<1;
 $91 = (($90) + 0)|0;
 $92 = $1;
 $93 = (($92) + ($91)|0);
 HEAP8[$93>>0] = $88;
 $94 = $4;
 $95 = (($94) - 1)|0;
 $96 = $input;
 $97 = (($96) + ($95)|0);
 $98 = HEAP8[$97>>0]|0;
 $99 = $i;
 $100 = $99<<1;
 $101 = (($100) + 1)|0;
 $102 = $1;
 $103 = (($102) + ($101)|0);
 HEAP8[$103>>0] = $98;
 $104 = $1;
 $0 = $104;
 $105 = $0;
 STACKTOP = sp;return ($105|0);
}
function __ZL26stbi__resample_row_genericPhS_S_ii($out,$in_near,$in_far,$w,$hs) {
 $out = $out|0;
 $in_near = $in_near|0;
 $in_far = $in_far|0;
 $w = $w|0;
 $hs = $hs|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $out;
 $1 = $in_near;
 $2 = $in_far;
 $3 = $w;
 $4 = $hs;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $j = 0;
  while(1) {
   $8 = $j;
   $9 = $4;
   $10 = ($8|0)<($9|0);
   $11 = $i;
   if (!($10)) {
    break;
   }
   $12 = $1;
   $13 = (($12) + ($11)|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = $i;
   $16 = $4;
   $17 = Math_imul($15, $16)|0;
   $18 = $j;
   $19 = (($17) + ($18))|0;
   $20 = $0;
   $21 = (($20) + ($19)|0);
   HEAP8[$21>>0] = $14;
   $22 = $j;
   $23 = (($22) + 1)|0;
   $j = $23;
  }
  $24 = (($11) + 1)|0;
  $i = $24;
 }
 $25 = $0;
 STACKTOP = sp;return ($25|0);
}
function __ZL14stbi__png_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL22stbi__check_png_headerP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL22stbi__check_png_headerP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = ($2|0)<(8);
  if (!($3)) {
   label = 6;
   break;
  }
  $4 = $1;
  $5 = (__ZL10stbi__get8P13stbi__context($4)|0);
  $6 = $5&255;
  $7 = $i;
  $8 = (2702 + ($7)|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = $9&255;
  $11 = ($6|0)!=($10|0);
  if ($11) {
   label = 4;
   break;
  }
  $13 = $i;
  $14 = (($13) + 1)|0;
  $i = $14;
 }
 if ((label|0) == 4) {
  $12 = (__ZL9stbi__errPKc(2710)|0);
  $0 = $12;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $15 = $0;
  STACKTOP = sp;return ($15|0);
 }
 return (0)|0;
}
function __ZL14stbi__png_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $p = sp;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $5 = $0;
 HEAP32[$p>>2] = $5;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = (__ZL12stbi__do_pngP9stbi__pngPiS1_S1_i($p,$6,$7,$8,$9)|0);
 STACKTOP = sp;return ($10|0);
}
function __ZL12stbi__do_pngP9stbi__pngPiS1_S1_i($p,$x,$y,$n,$req_comp) {
 $p = $p|0;
 $x = $x|0;
 $y = $y|0;
 $n = $n|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $result = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $p;
 $2 = $x;
 $3 = $y;
 $4 = $n;
 $5 = $req_comp;
 $result = 0;
 $6 = $5;
 $7 = ($6|0)<(0);
 $8 = $5;
 $9 = ($8|0)>(4);
 $or$cond = $7 | $9;
 if ($or$cond) {
  $10 = (__ZL9stbi__errPKc(2301)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $84 = $0;
  STACKTOP = sp;return ($84|0);
 }
 $14 = $1;
 $15 = $5;
 $16 = (__ZL20stbi__parse_png_fileP9stbi__pngii($14,0,$15)|0);
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $1;
  $19 = ((($18)) + 12|0);
  $20 = HEAP32[$19>>2]|0;
  $result = $20;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  HEAP32[$22>>2] = 0;
  $23 = $5;
  $24 = ($23|0)!=(0);
  if ($24) {
   $25 = $5;
   $26 = $1;
   $27 = HEAP32[$26>>2]|0;
   $28 = ((($27)) + 12|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($25|0)!=($29|0);
   if ($30) {
    $31 = $result;
    $32 = $1;
    $33 = HEAP32[$32>>2]|0;
    $34 = ((($33)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $5;
    $37 = $1;
    $38 = HEAP32[$37>>2]|0;
    $39 = HEAP32[$38>>2]|0;
    $40 = $1;
    $41 = HEAP32[$40>>2]|0;
    $42 = ((($41)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = (__ZL20stbi__convert_formatPhiijj($31,$35,$36,$39,$43)|0);
    $result = $44;
    $45 = $5;
    $46 = $1;
    $47 = HEAP32[$46>>2]|0;
    $48 = ((($47)) + 12|0);
    HEAP32[$48>>2] = $45;
    $49 = $result;
    $50 = ($49|0)==(0|0);
    if ($50) {
     $51 = $result;
     $0 = $51;
     $84 = $0;
     STACKTOP = sp;return ($84|0);
    }
   }
  }
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = HEAP32[$53>>2]|0;
  $55 = $2;
  HEAP32[$55>>2] = $54;
  $56 = $1;
  $57 = HEAP32[$56>>2]|0;
  $58 = ((($57)) + 4|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = $3;
  HEAP32[$60>>2] = $59;
  $61 = $4;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $1;
   $64 = HEAP32[$63>>2]|0;
   $65 = ((($64)) + 12|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $4;
   HEAP32[$67>>2] = $66;
  }
 }
 $68 = $1;
 $69 = ((($68)) + 12|0);
 $70 = HEAP32[$69>>2]|0;
 _free($70);
 $71 = $1;
 $72 = ((($71)) + 12|0);
 HEAP32[$72>>2] = 0;
 $73 = $1;
 $74 = ((($73)) + 8|0);
 $75 = HEAP32[$74>>2]|0;
 _free($75);
 $76 = $1;
 $77 = ((($76)) + 8|0);
 HEAP32[$77>>2] = 0;
 $78 = $1;
 $79 = ((($78)) + 4|0);
 $80 = HEAP32[$79>>2]|0;
 _free($80);
 $81 = $1;
 $82 = ((($81)) + 4|0);
 HEAP32[$82>>2] = 0;
 $83 = $result;
 $0 = $83;
 $84 = $0;
 STACKTOP = sp;return ($84|0);
}
function __ZL20stbi__parse_png_fileP9stbi__pngii($z,$scan,$req_comp) {
 $z = $z|0;
 $scan = $scan|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bpl = 0, $c = 0, $color = 0;
 var $comp = 0, $depth = 0, $filter = 0, $first = 0, $has_trans = 0, $i = 0, $idata_limit = 0, $interlace = 0, $ioff = 0, $is_iphone = 0, $k = 0, $or$cond = 0, $or$cond11 = 0, $or$cond11$not = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0;
 var $or$cond9$not = 0, $p = 0, $pal_img_n = 0, $pal_len = 0, $palette = 0, $raw_len = 0, $s = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $tc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $palette = sp + 104|0;
 $tc = sp + 92|0;
 $c = sp + 24|0;
 $raw_len = sp + 4|0;
 $1 = $z;
 $2 = $scan;
 $3 = $req_comp;
 $pal_img_n = 0;
 $has_trans = 0;
 $ioff = 0;
 $idata_limit = 0;
 $pal_len = 0;
 $first = 1;
 $interlace = 0;
 $color = 0;
 $depth = 0;
 $is_iphone = 0;
 $4 = $1;
 $5 = HEAP32[$4>>2]|0;
 $s = $5;
 $6 = $1;
 $7 = ((($6)) + 8|0);
 HEAP32[$7>>2] = 0;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 HEAP32[$9>>2] = 0;
 $10 = $1;
 $11 = ((($10)) + 12|0);
 HEAP32[$11>>2] = 0;
 $12 = $s;
 $13 = (__ZL22stbi__check_png_headerP13stbi__context($12)|0);
 $14 = ($13|0)!=(0);
 if (!($14)) {
  $0 = 0;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 $15 = $2;
 $16 = ($15|0)==(1);
 if ($16) {
  $0 = 1;
  $456 = $0;
  STACKTOP = sp;return ($456|0);
 }
 L8: while(1) {
  $17 = $s;
  __ZL22stbi__get_chunk_headerP13stbi__context($c,$17);
  $18 = ((($c)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $switch$split2D = ($19|0)<(1229472850);
  L10: do {
   if ($switch$split2D) {
    $switch$split192D = ($19|0)<(1229209940);
    if ($switch$split192D) {
     switch ($19|0) {
     case 1130840649:  {
      break;
     }
     default: {
      label = 113;
      break L10;
     }
     }
     $is_iphone = 1;
     $20 = $s;
     $21 = HEAP32[$c>>2]|0;
     __ZL10stbi__skipP13stbi__contexti($20,$21);
     break;
    }
    $switch$split252D = ($19|0)<(1229278788);
    if (!($switch$split252D)) {
     switch ($19|0) {
     case 1229278788:  {
      label = 88;
      break L8;
      break;
     }
     default: {
      label = 113;
      break L10;
     }
     }
    }
    switch ($19|0) {
    case 1229209940:  {
     break;
    }
    default: {
     label = 113;
     break L10;
    }
    }
    $237 = $first;
    $238 = ($237|0)!=(0);
    if ($238) {
     label = 70;
     break L8;
    }
    $240 = $pal_img_n;
    $241 = ($240<<24>>24)==(0);
    $242 = $pal_len;
    $243 = ($242|0)!=(0);
    $or$cond7 = $241 | $243;
    if (!($or$cond7)) {
     label = 72;
     break L8;
    }
    $245 = $2;
    $246 = ($245|0)==(2);
    if ($246) {
     label = 74;
     break L8;
    }
    $251 = $ioff;
    $252 = HEAP32[$c>>2]|0;
    $253 = (($251) + ($252))|0;
    $254 = $ioff;
    $255 = ($253|0)<($254|0);
    if ($255) {
     label = 76;
     break L8;
    }
    $256 = $ioff;
    $257 = HEAP32[$c>>2]|0;
    $258 = (($256) + ($257))|0;
    $259 = $idata_limit;
    $260 = ($258>>>0)>($259>>>0);
    if ($260) {
     $261 = $idata_limit;
     $262 = ($261|0)==(0);
     if ($262) {
      $263 = HEAP32[$c>>2]|0;
      $264 = ($263>>>0)>(4096);
      $265 = HEAP32[$c>>2]|0;
      $266 = $264 ? $265 : 4096;
      $idata_limit = $266;
     }
     while(1) {
      $267 = $ioff;
      $268 = HEAP32[$c>>2]|0;
      $269 = (($267) + ($268))|0;
      $270 = $idata_limit;
      $271 = ($269>>>0)>($270>>>0);
      if (!($271)) {
       break;
      }
      $272 = $idata_limit;
      $273 = $272<<1;
      $idata_limit = $273;
     }
     $274 = $1;
     $275 = ((($274)) + 4|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = $idata_limit;
     $278 = (_realloc($276,$277)|0);
     $p = $278;
     $279 = $p;
     $280 = ($279|0)==(0|0);
     if ($280) {
      label = 83;
      break L8;
     }
     $282 = $p;
     $283 = $1;
     $284 = ((($283)) + 4|0);
     HEAP32[$284>>2] = $282;
    }
    $285 = $s;
    $286 = $1;
    $287 = ((($286)) + 4|0);
    $288 = HEAP32[$287>>2]|0;
    $289 = $ioff;
    $290 = (($288) + ($289)|0);
    $291 = HEAP32[$c>>2]|0;
    $292 = (__ZL10stbi__getnP13stbi__contextPhi($285,$290,$291)|0);
    $293 = ($292|0)!=(0);
    if (!($293)) {
     label = 86;
     break L8;
    }
    $295 = HEAP32[$c>>2]|0;
    $296 = $ioff;
    $297 = (($296) + ($295))|0;
    $ioff = $297;
   } else {
    $switch$split222D = ($19|0)<(1347179589);
    if ($switch$split222D) {
     switch ($19|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 113;
      break L10;
     }
     }
     $22 = $first;
     $23 = ($22|0)!=(0);
     if (!($23)) {
      label = 8;
      break L8;
     }
     $first = 0;
     $25 = HEAP32[$c>>2]|0;
     $26 = ($25|0)!=(13);
     if ($26) {
      label = 10;
      break L8;
     }
     $28 = $s;
     $29 = (__ZL13stbi__get32beP13stbi__context($28)|0);
     $30 = $s;
     HEAP32[$30>>2] = $29;
     $31 = $s;
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32>>>0)>(16777216);
     if ($33) {
      label = 12;
      break L8;
     }
     $35 = $s;
     $36 = (__ZL13stbi__get32beP13stbi__context($35)|0);
     $37 = $s;
     $38 = ((($37)) + 4|0);
     HEAP32[$38>>2] = $36;
     $39 = $s;
     $40 = ((($39)) + 4|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41>>>0)>(16777216);
     if ($42) {
      label = 14;
      break L8;
     }
     $44 = $s;
     $45 = (__ZL10stbi__get8P13stbi__context($44)|0);
     $46 = $45&255;
     $depth = $46;
     $47 = $depth;
     $48 = ($47|0)!=(1);
     $49 = $depth;
     $50 = ($49|0)!=(2);
     $or$cond = $48 & $50;
     $51 = $depth;
     $52 = ($51|0)!=(4);
     $or$cond3 = $or$cond & $52;
     $53 = $depth;
     $54 = ($53|0)!=(8);
     $or$cond5 = $or$cond3 & $54;
     if ($or$cond5) {
      label = 16;
      break L8;
     }
     $56 = $s;
     $57 = (__ZL10stbi__get8P13stbi__context($56)|0);
     $58 = $57&255;
     $color = $58;
     $59 = $color;
     $60 = ($59|0)>(6);
     if ($60) {
      label = 18;
      break L8;
     }
     $62 = $color;
     $63 = ($62|0)==(3);
     if ($63) {
      $pal_img_n = 3;
     } else {
      $64 = $color;
      $65 = $64 & 1;
      $66 = ($65|0)!=(0);
      if ($66) {
       label = 22;
       break L8;
      }
     }
     $68 = $s;
     $69 = (__ZL10stbi__get8P13stbi__context($68)|0);
     $70 = $69&255;
     $comp = $70;
     $71 = $comp;
     $72 = ($71|0)!=(0);
     if ($72) {
      label = 24;
      break L8;
     }
     $74 = $s;
     $75 = (__ZL10stbi__get8P13stbi__context($74)|0);
     $76 = $75&255;
     $filter = $76;
     $77 = $filter;
     $78 = ($77|0)!=(0);
     if ($78) {
      label = 26;
      break L8;
     }
     $80 = $s;
     $81 = (__ZL10stbi__get8P13stbi__context($80)|0);
     $82 = $81&255;
     $interlace = $82;
     $83 = $interlace;
     $84 = ($83|0)>(1);
     if ($84) {
      label = 28;
      break L8;
     }
     $86 = $s;
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)!=(0);
     if (!($88)) {
      label = 31;
      break L8;
     }
     $89 = $s;
     $90 = ((($89)) + 4|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)!=(0);
     if (!($92)) {
      label = 31;
      break L8;
     }
     $94 = $pal_img_n;
     $95 = ($94<<24>>24)!=(0);
     if ($95) {
      $121 = $s;
      $122 = ((($121)) + 8|0);
      HEAP32[$122>>2] = 1;
      $123 = $s;
      $124 = HEAP32[$123>>2]|0;
      $125 = (1073741824 / ($124>>>0))&-1;
      $126 = (($125>>>0) / 4)&-1;
      $127 = $s;
      $128 = ((($127)) + 4|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($126>>>0)<($129>>>0);
      if ($130) {
       label = 38;
       break L8;
      } else {
       break;
      }
     }
     $96 = $color;
     $97 = $96 & 2;
     $98 = ($97|0)!=(0);
     $99 = $98 ? 3 : 1;
     $100 = $color;
     $101 = $100 & 4;
     $102 = ($101|0)!=(0);
     $103 = $102 ? 1 : 0;
     $104 = (($99) + ($103))|0;
     $105 = $s;
     $106 = ((($105)) + 8|0);
     HEAP32[$106>>2] = $104;
     $107 = $s;
     $108 = HEAP32[$107>>2]|0;
     $109 = (1073741824 / ($108>>>0))&-1;
     $110 = $s;
     $111 = ((($110)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($109>>>0) / ($112>>>0))&-1;
     $114 = $s;
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($113>>>0)<($116>>>0);
     if ($117) {
      label = 34;
      break L8;
     }
     $119 = $2;
     $120 = ($119|0)==(2);
     if ($120) {
      label = 36;
      break L8;
     } else {
      break;
     }
    }
    $switch$split282D = ($19|0)<(1951551059);
    if ($switch$split282D) {
     switch ($19|0) {
     case 1347179589:  {
      break;
     }
     default: {
      label = 113;
      break L10;
     }
     }
     $132 = $first;
     $133 = ($132|0)!=(0);
     if ($133) {
      label = 40;
      break L8;
     }
     $135 = HEAP32[$c>>2]|0;
     $136 = ($135>>>0)>(768);
     if ($136) {
      label = 42;
      break L8;
     }
     $138 = HEAP32[$c>>2]|0;
     $139 = (($138>>>0) / 3)&-1;
     $pal_len = $139;
     $140 = $pal_len;
     $141 = ($140*3)|0;
     $142 = HEAP32[$c>>2]|0;
     $143 = ($141|0)!=($142|0);
     if ($143) {
      label = 44;
      break L8;
     }
     $i = 0;
     while(1) {
      $145 = $i;
      $146 = $pal_len;
      $147 = ($145>>>0)<($146>>>0);
      if (!($147)) {
       break L10;
      }
      $148 = $s;
      $149 = (__ZL10stbi__get8P13stbi__context($148)|0);
      $150 = $i;
      $151 = $150<<2;
      $152 = (($151) + 0)|0;
      $153 = (($palette) + ($152)|0);
      HEAP8[$153>>0] = $149;
      $154 = $s;
      $155 = (__ZL10stbi__get8P13stbi__context($154)|0);
      $156 = $i;
      $157 = $156<<2;
      $158 = (($157) + 1)|0;
      $159 = (($palette) + ($158)|0);
      HEAP8[$159>>0] = $155;
      $160 = $s;
      $161 = (__ZL10stbi__get8P13stbi__context($160)|0);
      $162 = $i;
      $163 = $162<<2;
      $164 = (($163) + 2)|0;
      $165 = (($palette) + ($164)|0);
      HEAP8[$165>>0] = $161;
      $166 = $i;
      $167 = $166<<2;
      $168 = (($167) + 3)|0;
      $169 = (($palette) + ($168)|0);
      HEAP8[$169>>0] = -1;
      $170 = $i;
      $171 = (($170) + 1)|0;
      $i = $171;
     }
    }
    switch ($19|0) {
    case 1951551059:  {
     break;
    }
    default: {
     label = 113;
     break L10;
    }
    }
    $172 = $first;
    $173 = ($172|0)!=(0);
    if ($173) {
     label = 49;
     break L8;
    }
    $175 = $1;
    $176 = ((($175)) + 4|0);
    $177 = HEAP32[$176>>2]|0;
    $178 = ($177|0)!=(0|0);
    if ($178) {
     label = 51;
     break L8;
    }
    $180 = $pal_img_n;
    $181 = ($180<<24>>24)!=(0);
    if (!($181)) {
     $204 = $s;
     $205 = ((($204)) + 8|0);
     $206 = HEAP32[$205>>2]|0;
     $207 = $206 & 1;
     $208 = ($207|0)!=(0);
     if (!($208)) {
      label = 63;
      break L8;
     }
     $210 = HEAP32[$c>>2]|0;
     $211 = $s;
     $212 = ((($211)) + 8|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = $213<<1;
     $215 = ($210|0)!=($214|0);
     if ($215) {
      label = 65;
      break L8;
     }
     $has_trans = 1;
     $k = 0;
     while(1) {
      $217 = $k;
      $218 = $s;
      $219 = ((($218)) + 8|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = ($217|0)<($220|0);
      if (!($221)) {
       break L10;
      }
      $222 = $s;
      $223 = (__ZL13stbi__get16beP13stbi__context($222)|0);
      $224 = $223 & 255;
      $225 = $224&255;
      $226 = $225&255;
      $227 = $depth;
      $228 = (2935 + ($227)|0);
      $229 = HEAP8[$228>>0]|0;
      $230 = $229&255;
      $231 = Math_imul($226, $230)|0;
      $232 = $231&255;
      $233 = $k;
      $234 = (($tc) + ($233)|0);
      HEAP8[$234>>0] = $232;
      $235 = $k;
      $236 = (($235) + 1)|0;
      $k = $236;
     }
    }
    $182 = $2;
    $183 = ($182|0)==(2);
    if ($183) {
     label = 54;
     break L8;
    }
    $186 = $pal_len;
    $187 = ($186|0)==(0);
    if ($187) {
     label = 56;
     break L8;
    }
    $189 = HEAP32[$c>>2]|0;
    $190 = $pal_len;
    $191 = ($189>>>0)>($190>>>0);
    if ($191) {
     label = 58;
     break L8;
    }
    $pal_img_n = 4;
    $i = 0;
    while(1) {
     $193 = $i;
     $194 = HEAP32[$c>>2]|0;
     $195 = ($193>>>0)<($194>>>0);
     if (!($195)) {
      break L10;
     }
     $196 = $s;
     $197 = (__ZL10stbi__get8P13stbi__context($196)|0);
     $198 = $i;
     $199 = $198<<2;
     $200 = (($199) + 3)|0;
     $201 = (($palette) + ($200)|0);
     HEAP8[$201>>0] = $197;
     $202 = $i;
     $203 = (($202) + 1)|0;
     $i = $203;
    }
   }
  } while(0);
  if ((label|0) == 113) {
   label = 0;
   $425 = $first;
   $426 = ($425|0)!=(0);
   if ($426) {
    label = 114;
    break;
   }
   $428 = ((($c)) + 4|0);
   $429 = HEAP32[$428>>2]|0;
   $430 = $429 & 536870912;
   $431 = ($430|0)==(0);
   if ($431) {
    label = 116;
    break;
   }
   $453 = $s;
   $454 = HEAP32[$c>>2]|0;
   __ZL10stbi__skipP13stbi__contexti($453,$454);
  }
  $455 = $s;
  (__ZL13stbi__get32beP13stbi__context($455)|0);
 }
 switch (label|0) {
  case 8: {
   $24 = (__ZL9stbi__errPKc(2722)|0);
   $0 = $24;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 10: {
   $27 = (__ZL9stbi__errPKc(2736)|0);
   $0 = $27;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 12: {
   $34 = (__ZL9stbi__errPKc(2282)|0);
   $0 = $34;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 14: {
   $43 = (__ZL9stbi__errPKc(2282)|0);
   $0 = $43;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 16: {
   $55 = (__ZL9stbi__errPKc(2749)|0);
   $0 = $55;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 18: {
   $61 = (__ZL9stbi__errPKc(2766)|0);
   $0 = $61;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 22: {
   $67 = (__ZL9stbi__errPKc(2766)|0);
   $0 = $67;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 24: {
   $73 = (__ZL9stbi__errPKc(2776)|0);
   $0 = $73;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 26: {
   $79 = (__ZL9stbi__errPKc(2792)|0);
   $0 = $79;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 28: {
   $85 = (__ZL9stbi__errPKc(2810)|0);
   $0 = $85;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 31: {
   $93 = (__ZL9stbi__errPKc(2831)|0);
   $0 = $93;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 34: {
   $118 = (__ZL9stbi__errPKc(2282)|0);
   $0 = $118;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 36: {
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 38: {
   $131 = (__ZL9stbi__errPKc(2282)|0);
   $0 = $131;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 40: {
   $134 = (__ZL9stbi__errPKc(2845)|0);
   $0 = $134;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 42: {
   $137 = (__ZL9stbi__errPKc(2860)|0);
   $0 = $137;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 44: {
   $144 = (__ZL9stbi__errPKc(2860)|0);
   $0 = $144;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 49: {
   $174 = (__ZL9stbi__errPKc(2845)|0);
   $0 = $174;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 51: {
   $179 = (__ZL9stbi__errPKc(2873)|0);
   $0 = $179;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 54: {
   $184 = $s;
   $185 = ((($184)) + 8|0);
   HEAP32[$185>>2] = 4;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 56: {
   $188 = (__ZL9stbi__errPKc(2889)|0);
   $0 = $188;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 58: {
   $192 = (__ZL9stbi__errPKc(2906)|0);
   $0 = $192;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 63: {
   $209 = (__ZL9stbi__errPKc(2919)|0);
   $0 = $209;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 65: {
   $216 = (__ZL9stbi__errPKc(2906)|0);
   $0 = $216;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 70: {
   $239 = (__ZL9stbi__errPKc(2845)|0);
   $0 = $239;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 72: {
   $244 = (__ZL9stbi__errPKc(2944)|0);
   $0 = $244;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 74: {
   $247 = $pal_img_n;
   $248 = $247&255;
   $249 = $s;
   $250 = ((($249)) + 8|0);
   HEAP32[$250>>2] = $248;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 76: {
   $0 = 0;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 83: {
   $281 = (__ZL9stbi__errPKc(2292)|0);
   $0 = $281;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 86: {
   $294 = (__ZL9stbi__errPKc(2952)|0);
   $0 = $294;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 88: {
   $298 = $first;
   $299 = ($298|0)!=(0);
   if ($299) {
    $300 = (__ZL9stbi__errPKc(2845)|0);
    $0 = $300;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $301 = $2;
   $302 = ($301|0)!=(0);
   if ($302) {
    $0 = 1;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $303 = $1;
   $304 = ((($303)) + 4|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($305|0)==(0|0);
   if ($306) {
    $307 = (__ZL9stbi__errPKc(2962)|0);
    $0 = $307;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $308 = $s;
   $309 = HEAP32[$308>>2]|0;
   $310 = $depth;
   $311 = Math_imul($309, $310)|0;
   $312 = (($311) + 7)|0;
   $313 = (($312>>>0) / 8)&-1;
   $bpl = $313;
   $314 = $bpl;
   $315 = $s;
   $316 = ((($315)) + 4|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = Math_imul($314, $317)|0;
   $319 = $s;
   $320 = ((($319)) + 8|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = Math_imul($318, $321)|0;
   $323 = $s;
   $324 = ((($323)) + 4|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = (($322) + ($325))|0;
   HEAP32[$raw_len>>2] = $326;
   $327 = $1;
   $328 = ((($327)) + 4|0);
   $329 = HEAP32[$328>>2]|0;
   $330 = $ioff;
   $331 = HEAP32[$raw_len>>2]|0;
   $332 = $is_iphone;
   $333 = ($332|0)!=(0);
   $334 = $333 ^ 1;
   $335 = $334&1;
   $336 = (_stbi_zlib_decode_malloc_guesssize_headerflag($329,$330,$331,$raw_len,$335)|0);
   $337 = $1;
   $338 = ((($337)) + 8|0);
   HEAP32[$338>>2] = $336;
   $339 = $1;
   $340 = ((($339)) + 8|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ($341|0)==(0|0);
   if ($342) {
    $0 = 0;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $343 = $1;
   $344 = ((($343)) + 4|0);
   $345 = HEAP32[$344>>2]|0;
   _free($345);
   $346 = $1;
   $347 = ((($346)) + 4|0);
   HEAP32[$347>>2] = 0;
   $348 = $3;
   $349 = $s;
   $350 = ((($349)) + 8|0);
   $351 = HEAP32[$350>>2]|0;
   $352 = (($351) + 1)|0;
   $353 = ($348|0)==($352|0);
   $354 = $3;
   $355 = ($354|0)!=(3);
   $or$cond9 = $353 & $355;
   $or$cond9$not = $or$cond9 ^ 1;
   $356 = $pal_img_n;
   $357 = ($356<<24>>24)!=(0);
   $or$cond11 = $or$cond9$not | $357;
   $or$cond11$not = $or$cond11 ^ 1;
   $358 = $has_trans;
   $359 = ($358<<24>>24)!=(0);
   $or$cond13 = $or$cond11$not | $359;
   $360 = $s;
   $361 = ((($360)) + 8|0);
   $362 = HEAP32[$361>>2]|0;
   if ($or$cond13) {
    $363 = (($362) + 1)|0;
    $364 = $s;
    $365 = ((($364)) + 12|0);
    HEAP32[$365>>2] = $363;
   } else {
    $366 = $s;
    $367 = ((($366)) + 12|0);
    HEAP32[$367>>2] = $362;
   }
   $368 = $1;
   $369 = $1;
   $370 = ((($369)) + 8|0);
   $371 = HEAP32[$370>>2]|0;
   $372 = HEAP32[$raw_len>>2]|0;
   $373 = $s;
   $374 = ((($373)) + 12|0);
   $375 = HEAP32[$374>>2]|0;
   $376 = $depth;
   $377 = $color;
   $378 = $interlace;
   $379 = (__ZL22stbi__create_png_imageP9stbi__pngPhjiiii($368,$371,$372,$375,$376,$377,$378)|0);
   $380 = ($379|0)!=(0);
   if (!($380)) {
    $0 = 0;
    $456 = $0;
    STACKTOP = sp;return ($456|0);
   }
   $381 = $has_trans;
   $382 = ($381<<24>>24)!=(0);
   if ($382) {
    $383 = $1;
    $384 = $s;
    $385 = ((($384)) + 12|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = (__ZL26stbi__compute_transparencyP9stbi__pngPhi($383,$tc,$386)|0);
    $388 = ($387|0)!=(0);
    if (!($388)) {
     $0 = 0;
     $456 = $0;
     STACKTOP = sp;return ($456|0);
    }
   }
   $389 = $is_iphone;
   $390 = ($389|0)!=(0);
   $391 = HEAP32[1894]|0;
   $392 = ($391|0)!=(0);
   $or$cond15 = $390 & $392;
   if ($or$cond15) {
    $393 = $s;
    $394 = ((($393)) + 12|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($395|0)>(2);
    if ($396) {
     $397 = $1;
     __ZL15stbi__de_iphoneP9stbi__png($397);
    }
   }
   $398 = $pal_img_n;
   $399 = ($398<<24>>24)!=(0);
   if ($399) {
    $400 = $pal_img_n;
    $401 = $400&255;
    $402 = $s;
    $403 = ((($402)) + 8|0);
    HEAP32[$403>>2] = $401;
    $404 = $pal_img_n;
    $405 = $404&255;
    $406 = $s;
    $407 = ((($406)) + 12|0);
    HEAP32[$407>>2] = $405;
    $408 = $3;
    $409 = ($408|0)>=(3);
    if ($409) {
     $410 = $3;
     $411 = $s;
     $412 = ((($411)) + 12|0);
     HEAP32[$412>>2] = $410;
    }
    $413 = $1;
    $414 = $pal_len;
    $415 = $s;
    $416 = ((($415)) + 12|0);
    $417 = HEAP32[$416>>2]|0;
    $418 = (__ZL24stbi__expand_png_paletteP9stbi__pngPhii($413,$palette,$414,$417)|0);
    $419 = ($418|0)!=(0);
    if (!($419)) {
     $0 = 0;
     $456 = $0;
     STACKTOP = sp;return ($456|0);
    }
   }
   $420 = $1;
   $421 = ((($420)) + 8|0);
   $422 = HEAP32[$421>>2]|0;
   _free($422);
   $423 = $1;
   $424 = ((($423)) + 8|0);
   HEAP32[$424>>2] = 0;
   $0 = 1;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 114: {
   $427 = (__ZL9stbi__errPKc(2845)|0);
   $0 = $427;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
  case 116: {
   $432 = ((($c)) + 4|0);
   $433 = HEAP32[$432>>2]|0;
   $434 = $433 >>> 24;
   $435 = $434 & 255;
   $436 = $435&255;
   HEAP8[3575] = $436;
   $437 = ((($c)) + 4|0);
   $438 = HEAP32[$437>>2]|0;
   $439 = $438 >>> 16;
   $440 = $439 & 255;
   $441 = $440&255;
   HEAP8[(3576)>>0] = $441;
   $442 = ((($c)) + 4|0);
   $443 = HEAP32[$442>>2]|0;
   $444 = $443 >>> 8;
   $445 = $444 & 255;
   $446 = $445&255;
   HEAP8[(3577)>>0] = $446;
   $447 = ((($c)) + 4|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = $448 >>> 0;
   $450 = $449 & 255;
   $451 = $450&255;
   HEAP8[(3578)>>0] = $451;
   $452 = (__ZL9stbi__errPKc(3575)|0);
   $0 = $452;
   $456 = $0;
   STACKTOP = sp;return ($456|0);
   break;
  }
 }
 return (0)|0;
}
function __ZL22stbi__get_chunk_headerP13stbi__context($agg$result,$s) {
 $agg$result = $agg$result|0;
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get32beP13stbi__context($1)|0);
 HEAP32[$agg$result>>2] = $2;
 $3 = $0;
 $4 = (__ZL13stbi__get32beP13stbi__context($3)|0);
 $5 = ((($agg$result)) + 4|0);
 HEAP32[$5>>2] = $4;
 STACKTOP = sp;return;
}
function __ZL13stbi__get32beP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get16beP13stbi__context($1)|0);
 $z = $2;
 $3 = $z;
 $4 = $3 << 16;
 $5 = $0;
 $6 = (__ZL13stbi__get16beP13stbi__context($5)|0);
 $7 = (($4) + ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function __ZL10stbi__getnP13stbi__contextPhi($s,$buffer,$n) {
 $s = $s|0;
 $buffer = $buffer|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $blen = 0, $count = 0, $res = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $buffer;
 $3 = $n;
 $4 = $1;
 $5 = ((($4)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0|0);
 if ($7) {
  $8 = $1;
  $9 = ((($8)) + 172|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $1;
  $12 = ((($11)) + 168|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $10;
  $15 = $13;
  $16 = (($14) - ($15))|0;
  $blen = $16;
  $17 = $blen;
  $18 = $3;
  $19 = ($17|0)<($18|0);
  if ($19) {
   $20 = $2;
   $21 = $1;
   $22 = ((($21)) + 168|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = $blen;
   _memcpy(($20|0),($23|0),($24|0))|0;
   $25 = $1;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = $1;
   $29 = ((($28)) + 28|0);
   $30 = HEAP32[$29>>2]|0;
   $31 = $2;
   $32 = $blen;
   $33 = (($31) + ($32)|0);
   $34 = $3;
   $35 = $blen;
   $36 = (($34) - ($35))|0;
   $37 = (FUNCTION_TABLE_iiii[$27 & 127]($30,$33,$36)|0);
   $count = $37;
   $38 = $count;
   $39 = $3;
   $40 = $blen;
   $41 = (($39) - ($40))|0;
   $42 = ($38|0)==($41|0);
   $43 = $42&1;
   $res = $43;
   $44 = $1;
   $45 = ((($44)) + 172|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = $1;
   $48 = ((($47)) + 168|0);
   HEAP32[$48>>2] = $46;
   $49 = $res;
   $0 = $49;
   $69 = $0;
   STACKTOP = sp;return ($69|0);
  }
 }
 $50 = $1;
 $51 = ((($50)) + 168|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = $3;
 $54 = (($52) + ($53)|0);
 $55 = $1;
 $56 = ((($55)) + 172|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($54>>>0)<=($57>>>0);
 if ($58) {
  $59 = $2;
  $60 = $1;
  $61 = ((($60)) + 168|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = $3;
  _memcpy(($59|0),($62|0),($63|0))|0;
  $64 = $3;
  $65 = $1;
  $66 = ((($65)) + 168|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($67) + ($64)|0);
  HEAP32[$66>>2] = $68;
  $0 = 1;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 } else {
  $0 = 0;
  $69 = $0;
  STACKTOP = sp;return ($69|0);
 }
 return (0)|0;
}
function _stbi_zlib_decode_malloc_guesssize_headerflag($buffer,$len,$initial_size,$outlen,$parse_header) {
 $buffer = $buffer|0;
 $len = $len|0;
 $initial_size = $initial_size|0;
 $outlen = $outlen|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $a = sp + 8|0;
 $1 = $buffer;
 $2 = $len;
 $3 = $initial_size;
 $4 = $outlen;
 $5 = $parse_header;
 $6 = $3;
 $7 = (__ZL12stbi__mallocj($6)|0);
 $p = $7;
 $8 = $p;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $10 = $1;
 HEAP32[$a>>2] = $10;
 $11 = $1;
 $12 = $2;
 $13 = (($11) + ($12)|0);
 $14 = ((($a)) + 4|0);
 HEAP32[$14>>2] = $13;
 $15 = $p;
 $16 = $3;
 $17 = $5;
 $18 = (__ZL13stbi__do_zlibP10stbi__zbufPciii($a,$15,$16,1,$17)|0);
 $19 = ($18|0)!=(0);
 if (!($19)) {
  $32 = ((($a)) + 20|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;return ($34|0);
 }
 $20 = $4;
 $21 = ($20|0)!=(0|0);
 if ($21) {
  $22 = ((($a)) + 16|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ((($a)) + 20|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $23;
  $27 = $25;
  $28 = (($26) - ($27))|0;
  $29 = $4;
  HEAP32[$29>>2] = $28;
 }
 $30 = ((($a)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $0 = $31;
 $34 = $0;
 STACKTOP = sp;return ($34|0);
}
function __ZL13stbi__do_zlibP10stbi__zbufPciii($a,$obuf,$olen,$exp,$parse_header) {
 $a = $a|0;
 $obuf = $obuf|0;
 $olen = $olen|0;
 $exp = $exp|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $obuf;
 $2 = $olen;
 $3 = $exp;
 $4 = $parse_header;
 $5 = $1;
 $6 = $0;
 $7 = ((($6)) + 20|0);
 HEAP32[$7>>2] = $5;
 $8 = $1;
 $9 = $0;
 $10 = ((($9)) + 16|0);
 HEAP32[$10>>2] = $8;
 $11 = $1;
 $12 = $2;
 $13 = (($11) + ($12)|0);
 $14 = $0;
 $15 = ((($14)) + 24|0);
 HEAP32[$15>>2] = $13;
 $16 = $3;
 $17 = $0;
 $18 = ((($17)) + 28|0);
 HEAP32[$18>>2] = $16;
 $19 = $0;
 $20 = $4;
 $21 = (__ZL16stbi__parse_zlibP10stbi__zbufi($19,$20)|0);
 STACKTOP = sp;return ($21|0);
}
function __ZL16stbi__parse_zlibP10stbi__zbufi($a,$parse_header) {
 $a = $a|0;
 $parse_header = $parse_header|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $final = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $parse_header;
 $3 = $2;
 $4 = ($3|0)!=(0);
 if ($4) {
  $5 = $1;
  $6 = (__ZL23stbi__parse_zlib_headerP10stbi__zbuf($5)|0);
  $7 = ($6|0)!=(0);
  if ($7) {
   label = 4;
  } else {
   $0 = 0;
  }
 } else {
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $8 = $1;
   $9 = ((($8)) + 8|0);
   HEAP32[$9>>2] = 0;
   $10 = $1;
   $11 = ((($10)) + 12|0);
   HEAP32[$11>>2] = 0;
   while(1) {
    $12 = $1;
    $13 = (__ZL14stbi__zreceiveP10stbi__zbufi($12,1)|0);
    $final = $13;
    $14 = $1;
    $15 = (__ZL14stbi__zreceiveP10stbi__zbufi($14,2)|0);
    $type = $15;
    $16 = $type;
    $17 = ($16|0)==(0);
    if ($17) {
     $18 = $1;
     $19 = (__ZL30stbi__parse_uncomperssed_blockP10stbi__zbuf($18)|0);
     $20 = ($19|0)!=(0);
     if (!($20)) {
      label = 7;
      break;
     }
    } else {
     $21 = $type;
     $22 = ($21|0)==(3);
     if ($22) {
      label = 9;
      break;
     }
     $23 = $type;
     $24 = ($23|0)==(1);
     if ($24) {
      $25 = HEAP8[(8172)>>0]|0;
      $26 = ($25<<24>>24)!=(0);
      if (!($26)) {
       __ZL20stbi__init_zdefaultsv();
      }
      $27 = $1;
      $28 = ((($27)) + 32|0);
      $29 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($28,8173,288)|0);
      $30 = ($29|0)!=(0);
      if (!($30)) {
       label = 14;
       break;
      }
      $31 = $1;
      $32 = ((($31)) + 2052|0);
      $33 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($32,8141,32)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       label = 16;
       break;
      }
     } else {
      $35 = $1;
      $36 = (__ZL27stbi__compute_huffman_codesP10stbi__zbuf($35)|0);
      $37 = ($36|0)!=(0);
      if (!($37)) {
       label = 18;
       break;
      }
     }
     $38 = $1;
     $39 = (__ZL25stbi__parse_huffman_blockP10stbi__zbuf($38)|0);
     $40 = ($39|0)!=(0);
     if (!($40)) {
      label = 20;
      break;
     }
    }
    $41 = $final;
    $42 = ($41|0)!=(0);
    $43 = $42 ^ 1;
    if (!($43)) {
     label = 22;
     break;
    }
   }
   if ((label|0) == 7) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 9) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 14) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 16) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 18) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 20) {
    $0 = 0;
    break;
   }
   else if ((label|0) == 22) {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $44 = $0;
 STACKTOP = sp;return ($44|0);
}
function __ZL23stbi__parse_zlib_headerP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cm = 0, $cmf = 0, $flg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = (__ZL11stbi__zget8P10stbi__zbuf($2)|0);
 $4 = $3&255;
 $cmf = $4;
 $5 = $cmf;
 $6 = $5 & 15;
 $cm = $6;
 $7 = $1;
 $8 = (__ZL11stbi__zget8P10stbi__zbuf($7)|0);
 $9 = $8&255;
 $flg = $9;
 $10 = $cmf;
 $11 = $10<<8;
 $12 = $flg;
 $13 = (($11) + ($12))|0;
 $14 = (($13|0) % 31)&-1;
 $15 = ($14|0)!=(0);
 do {
  if ($15) {
   $16 = (__ZL9stbi__errPKc(2970)|0);
   $0 = $16;
  } else {
   $17 = $flg;
   $18 = $17 & 32;
   $19 = ($18|0)!=(0);
   if ($19) {
    $20 = (__ZL9stbi__errPKc(2986)|0);
    $0 = $20;
    break;
   }
   $21 = $cm;
   $22 = ($21|0)!=(8);
   if ($22) {
    $23 = (__ZL9stbi__errPKc(3001)|0);
    $0 = $23;
    break;
   } else {
    $0 = 1;
    break;
   }
  }
 } while(0);
 $24 = $0;
 STACKTOP = sp;return ($24|0);
}
function __ZL11stbi__zget8P10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = $1;
 $5 = ((($4)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($3>>>0)>=($6>>>0);
 if ($7) {
  $0 = 0;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 } else {
  $8 = $1;
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($9)) + 1|0);
  HEAP32[$8>>2] = $10;
  $11 = HEAP8[$9>>0]|0;
  $0 = $11;
  $12 = $0;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function __ZL14stbi__zreceiveP10stbi__zbufi($z,$n) {
 $z = $z|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $n;
 $2 = $0;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $1;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = $0;
  __ZL15stbi__fill_bitsP10stbi__zbuf($7);
 }
 $8 = $0;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $1;
 $12 = 1 << $11;
 $13 = (($12) - 1)|0;
 $14 = $10 & $13;
 $k = $14;
 $15 = $1;
 $16 = $0;
 $17 = ((($16)) + 12|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> $15;
 HEAP32[$17>>2] = $19;
 $20 = $1;
 $21 = $0;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (($23) - ($20))|0;
 HEAP32[$22>>2] = $24;
 $25 = $k;
 STACKTOP = sp;return ($25|0);
}
function __ZL15stbi__fill_bitsP10stbi__zbuf($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 while(1) {
  $1 = $0;
  $2 = ((($1)) + 12|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = $0;
  $5 = ((($4)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = 1 << $6;
  $8 = ($3>>>0)<($7>>>0);
  if (!($8)) {
   label = 3;
   break;
  }
  $9 = $0;
  $10 = (__ZL11stbi__zget8P10stbi__zbuf($9)|0);
  $11 = $10&255;
  $12 = $0;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $11 << $14;
  $16 = $0;
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 | $15;
  HEAP32[$17>>2] = $19;
  $20 = $0;
  $21 = ((($20)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($22) + 8)|0;
  HEAP32[$21>>2] = $23;
  $24 = $0;
  $25 = ((($24)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ($26|0)<=(24);
  if (!($27)) {
   label = 5;
   break;
  }
 }
 if ((label|0) == 3) {
  ___assert_fail((3017|0),(2464|0),3568,(3054|0));
  // unreachable;
 }
 else if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL30stbi__parse_uncomperssed_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $header = 0, $k = 0, $len = 0, $nlen = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $header = sp + 20|0;
 $1 = $a;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 7;
 $6 = ($5|0)!=(0);
 if ($6) {
  $7 = $1;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 7;
  (__ZL14stbi__zreceiveP10stbi__zbufi($7,$11)|0);
 }
 $k = 0;
 while(1) {
  $12 = $1;
  $13 = ((($12)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)>(0);
  $16 = $1;
  if (!($15)) {
   break;
  }
  $17 = ((($16)) + 12|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 255;
  $20 = $19&255;
  $21 = $k;
  $22 = (($21) + 1)|0;
  $k = $22;
  $23 = (($header) + ($21)|0);
  HEAP8[$23>>0] = $20;
  $24 = $1;
  $25 = ((($24)) + 12|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = $26 >>> 8;
  HEAP32[$25>>2] = $27;
  $28 = $1;
  $29 = ((($28)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) - 8)|0;
  HEAP32[$29>>2] = $31;
 }
 $32 = ((($16)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)==(0);
 if (!($34)) {
  ___assert_fail((3070|0),(2464|0),3749,(3087|0));
  // unreachable;
 }
 while(1) {
  $35 = $k;
  $36 = ($35|0)<(4);
  if (!($36)) {
   break;
  }
  $37 = $1;
  $38 = (__ZL11stbi__zget8P10stbi__zbuf($37)|0);
  $39 = $k;
  $40 = (($39) + 1)|0;
  $k = $40;
  $41 = (($header) + ($39)|0);
  HEAP8[$41>>0] = $38;
 }
 $42 = ((($header)) + 1|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44<<8;
 $46 = HEAP8[$header>>0]|0;
 $47 = $46&255;
 $48 = (($45) + ($47))|0;
 $len = $48;
 $49 = ((($header)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51<<8;
 $53 = ((($header)) + 2|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = (($52) + ($55))|0;
 $nlen = $56;
 $57 = $nlen;
 $58 = $len;
 $59 = $58 ^ 65535;
 $60 = ($57|0)!=($59|0);
 if ($60) {
  $61 = (__ZL9stbi__errPKc(3118)|0);
  $0 = $61;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $62 = $1;
 $63 = HEAP32[$62>>2]|0;
 $64 = $len;
 $65 = (($63) + ($64)|0);
 $66 = $1;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($65>>>0)>($68>>>0);
 if ($69) {
  $70 = (__ZL9stbi__errPKc(3131)|0);
  $0 = $70;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $71 = $1;
 $72 = ((($71)) + 16|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $len;
 $75 = (($73) + ($74)|0);
 $76 = $1;
 $77 = ((($76)) + 24|0);
 $78 = HEAP32[$77>>2]|0;
 $79 = ($75>>>0)>($78>>>0);
 if ($79) {
  $80 = $1;
  $81 = $1;
  $82 = ((($81)) + 16|0);
  $83 = HEAP32[$82>>2]|0;
  $84 = $len;
  $85 = (__ZL13stbi__zexpandP10stbi__zbufPci($80,$83,$84)|0);
  $86 = ($85|0)!=(0);
  if (!($86)) {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 $87 = $1;
 $88 = ((($87)) + 16|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $1;
 $91 = HEAP32[$90>>2]|0;
 $92 = $len;
 _memcpy(($89|0),($91|0),($92|0))|0;
 $93 = $len;
 $94 = $1;
 $95 = HEAP32[$94>>2]|0;
 $96 = (($95) + ($93)|0);
 HEAP32[$94>>2] = $96;
 $97 = $len;
 $98 = $1;
 $99 = ((($98)) + 16|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = (($100) + ($97)|0);
 HEAP32[$99>>2] = $101;
 $0 = 1;
 $102 = $0;
 STACKTOP = sp;return ($102|0);
}
function __ZL13stbi__zexpandP10stbi__zbufPci($z,$zout,$n) {
 $z = $z|0;
 $zout = $zout|0;
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cur = 0;
 var $limit = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $2 = $zout;
 $3 = $n;
 $4 = $2;
 $5 = $1;
 $6 = ((($5)) + 16|0);
 HEAP32[$6>>2] = $4;
 $7 = $1;
 $8 = ((($7)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0);
 if (!($10)) {
  $11 = (__ZL9stbi__errPKc(3148)|0);
  $0 = $11;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 $12 = $1;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $1;
 $16 = ((($15)) + 20|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $14;
 $19 = $17;
 $20 = (($18) - ($19))|0;
 $cur = $20;
 $21 = $1;
 $22 = ((($21)) + 24|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $1;
 $25 = ((($24)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $23;
 $28 = $26;
 $29 = (($27) - ($28))|0;
 $limit = $29;
 while(1) {
  $30 = $cur;
  $31 = $3;
  $32 = (($30) + ($31))|0;
  $33 = $limit;
  $34 = ($32|0)>($33|0);
  if (!($34)) {
   break;
  }
  $35 = $limit;
  $36 = $35<<1;
  $limit = $36;
 }
 $37 = $1;
 $38 = ((($37)) + 20|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $limit;
 $41 = (_realloc($39,$40)|0);
 $q = $41;
 $42 = $q;
 $43 = ($42|0)==(0|0);
 if ($43) {
  $44 = (__ZL9stbi__errPKc(2292)|0);
  $0 = $44;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 } else {
  $45 = $q;
  $46 = $1;
  $47 = ((($46)) + 20|0);
  HEAP32[$47>>2] = $45;
  $48 = $q;
  $49 = $cur;
  $50 = (($48) + ($49)|0);
  $51 = $1;
  $52 = ((($51)) + 16|0);
  HEAP32[$52>>2] = $50;
  $53 = $q;
  $54 = $limit;
  $55 = (($53) + ($54)|0);
  $56 = $1;
  $57 = ((($56)) + 24|0);
  HEAP32[$57>>2] = $55;
  $0 = 1;
  $58 = $0;
  STACKTOP = sp;return ($58|0);
 }
 return (0)|0;
}
function __ZL20stbi__init_zdefaultsv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $i = 0;
 while(1) {
  $0 = $i;
  $1 = ($0|0)<=(143);
  if (!($1)) {
   break;
  }
  $2 = $i;
  $3 = (8173 + ($2)|0);
  HEAP8[$3>>0] = 8;
  $4 = $i;
  $5 = (($4) + 1)|0;
  $i = $5;
 }
 while(1) {
  $6 = $i;
  $7 = ($6|0)<=(255);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = (8173 + ($8)|0);
  HEAP8[$9>>0] = 9;
  $10 = $i;
  $11 = (($10) + 1)|0;
  $i = $11;
 }
 while(1) {
  $12 = $i;
  $13 = ($12|0)<=(279);
  if (!($13)) {
   break;
  }
  $14 = $i;
  $15 = (8173 + ($14)|0);
  HEAP8[$15>>0] = 7;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 while(1) {
  $18 = $i;
  $19 = ($18|0)<=(287);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (8173 + ($20)|0);
  HEAP8[$21>>0] = 8;
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
 }
 $i = 0;
 while(1) {
  $24 = $i;
  $25 = ($24|0)<=(31);
  if (!($25)) {
   break;
  }
  $26 = $i;
  $27 = (8141 + ($26)|0);
  HEAP8[$27>>0] = 5;
  $28 = $i;
  $29 = (($28) + 1)|0;
  $i = $29;
 }
 STACKTOP = sp;return;
}
function __ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($z,$sizelist,$num) {
 $z = $z|0;
 $sizelist = $sizelist|0;
 $num = $num|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $code = 0, $fastv = 0, $i = 0, $j = 0, $k = 0, $next_code = 0, $s = 0, $sizes = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $next_code = sp + 80|0;
 $sizes = sp + 12|0;
 $1 = $z;
 $2 = $sizelist;
 $3 = $num;
 $k = 0;
 dest=$sizes; stop=dest+68|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = $1;
 _memset(($4|0),0,1024)|0;
 $i = 0;
 while(1) {
  $5 = $i;
  $6 = $3;
  $7 = ($5|0)<($6|0);
  if (!($7)) {
   break;
  }
  $8 = $i;
  $9 = $2;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = (($sizes) + ($12<<2)|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 HEAP32[$sizes>>2] = 0;
 $i = 1;
 while(1) {
  $18 = $i;
  $19 = ($18|0)<(16);
  if (!($19)) {
   break;
  }
  $20 = $i;
  $21 = (($sizes) + ($20<<2)|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $i;
  $24 = 1 << $23;
  $25 = ($22|0)>($24|0);
  if ($25) {
   label = 7;
   break;
  }
  $27 = $i;
  $28 = (($27) + 1)|0;
  $i = $28;
 }
 if ((label|0) == 7) {
  $26 = (__ZL9stbi__errPKc(3168)|0);
  $0 = $26;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $code = 0;
 $i = 1;
 while(1) {
  $29 = $i;
  $30 = ($29|0)<(16);
  if (!($30)) {
   break;
  }
  $31 = $code;
  $32 = $i;
  $33 = (($next_code) + ($32<<2)|0);
  HEAP32[$33>>2] = $31;
  $34 = $code;
  $35 = $34&65535;
  $36 = $i;
  $37 = $1;
  $38 = ((($37)) + 1024|0);
  $39 = (($38) + ($36<<1)|0);
  HEAP16[$39>>1] = $35;
  $40 = $k;
  $41 = $40&65535;
  $42 = $i;
  $43 = $1;
  $44 = ((($43)) + 1124|0);
  $45 = (($44) + ($42<<1)|0);
  HEAP16[$45>>1] = $41;
  $46 = $code;
  $47 = $i;
  $48 = (($sizes) + ($47<<2)|0);
  $49 = HEAP32[$48>>2]|0;
  $50 = (($46) + ($49))|0;
  $code = $50;
  $51 = $i;
  $52 = (($sizes) + ($51<<2)|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ($53|0)!=(0);
  if ($54) {
   $55 = $code;
   $56 = (($55) - 1)|0;
   $57 = $i;
   $58 = 1 << $57;
   $59 = ($56|0)>=($58|0);
   if ($59) {
    label = 13;
    break;
   }
  }
  $61 = $code;
  $62 = $i;
  $63 = (16 - ($62))|0;
  $64 = $61 << $63;
  $65 = $i;
  $66 = $1;
  $67 = ((($66)) + 1056|0);
  $68 = (($67) + ($65<<2)|0);
  HEAP32[$68>>2] = $64;
  $69 = $code;
  $70 = $69 << 1;
  $code = $70;
  $71 = $i;
  $72 = (($sizes) + ($71<<2)|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $k;
  $75 = (($74) + ($73))|0;
  $k = $75;
  $76 = $i;
  $77 = (($76) + 1)|0;
  $i = $77;
 }
 if ((label|0) == 13) {
  $60 = (__ZL9stbi__errPKc(3178)|0);
  $0 = $60;
  $148 = $0;
  STACKTOP = sp;return ($148|0);
 }
 $78 = $1;
 $79 = ((($78)) + 1056|0);
 $80 = ((($79)) + 64|0);
 HEAP32[$80>>2] = 65536;
 $i = 0;
 while(1) {
  $81 = $i;
  $82 = $3;
  $83 = ($81|0)<($82|0);
  if (!($83)) {
   break;
  }
  $84 = $i;
  $85 = $2;
  $86 = (($85) + ($84)|0);
  $87 = HEAP8[$86>>0]|0;
  $88 = $87&255;
  $s = $88;
  $89 = $s;
  $90 = ($89|0)!=(0);
  if ($90) {
   $91 = $s;
   $92 = (($next_code) + ($91<<2)|0);
   $93 = HEAP32[$92>>2]|0;
   $94 = $s;
   $95 = $1;
   $96 = ((($95)) + 1024|0);
   $97 = (($96) + ($94<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = $98&65535;
   $100 = (($93) - ($99))|0;
   $101 = $s;
   $102 = $1;
   $103 = ((($102)) + 1124|0);
   $104 = (($103) + ($101<<1)|0);
   $105 = HEAP16[$104>>1]|0;
   $106 = $105&65535;
   $107 = (($100) + ($106))|0;
   $c = $107;
   $108 = $s;
   $109 = $108 << 9;
   $110 = $i;
   $111 = $109 | $110;
   $112 = $111&65535;
   $fastv = $112;
   $113 = $s;
   $114 = $113&255;
   $115 = $c;
   $116 = $1;
   $117 = ((($116)) + 1156|0);
   $118 = (($117) + ($115)|0);
   HEAP8[$118>>0] = $114;
   $119 = $i;
   $120 = $119&65535;
   $121 = $c;
   $122 = $1;
   $123 = ((($122)) + 1444|0);
   $124 = (($123) + ($121<<1)|0);
   HEAP16[$124>>1] = $120;
   $125 = $s;
   $126 = ($125|0)<=(9);
   L28: do {
    if ($126) {
     $127 = $s;
     $128 = (($next_code) + ($127<<2)|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = $s;
     $131 = (__ZL17stbi__bit_reverseii($129,$130)|0);
     $j = $131;
     while(1) {
      $132 = $j;
      $133 = ($132|0)<(512);
      if (!($133)) {
       break L28;
      }
      $134 = $fastv;
      $135 = $j;
      $136 = $1;
      $137 = (($136) + ($135<<1)|0);
      HEAP16[$137>>1] = $134;
      $138 = $s;
      $139 = 1 << $138;
      $140 = $j;
      $141 = (($140) + ($139))|0;
      $j = $141;
     }
    }
   } while(0);
   $142 = $s;
   $143 = (($next_code) + ($142<<2)|0);
   $144 = HEAP32[$143>>2]|0;
   $145 = (($144) + 1)|0;
   HEAP32[$143>>2] = $145;
  }
  $146 = $i;
  $147 = (($146) + 1)|0;
  $i = $147;
 }
 $0 = 1;
 $148 = $0;
 STACKTOP = sp;return ($148|0);
}
function __ZL17stbi__bit_reverseii($v,$bits) {
 $v = $v|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $bits;
 $2 = $1;
 $3 = ($2|0)<=(16);
 if ($3) {
  $4 = $0;
  $5 = (__ZL18stbi__bitreverse16i($4)|0);
  $6 = $1;
  $7 = (16 - ($6))|0;
  $8 = $5 >> $7;
  STACKTOP = sp;return ($8|0);
 } else {
  ___assert_fail((3194|0),(2464|0),3486,(3205|0));
  // unreachable;
 }
 return (0)|0;
}
function __ZL18stbi__bitreverse16i($n) {
 $n = $n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $n;
 $1 = $0;
 $2 = $1 & 43690;
 $3 = $2 >> 1;
 $4 = $0;
 $5 = $4 & 21845;
 $6 = $5 << 1;
 $7 = $3 | $6;
 $0 = $7;
 $8 = $0;
 $9 = $8 & 52428;
 $10 = $9 >> 2;
 $11 = $0;
 $12 = $11 & 13107;
 $13 = $12 << 2;
 $14 = $10 | $13;
 $0 = $14;
 $15 = $0;
 $16 = $15 & 61680;
 $17 = $16 >> 4;
 $18 = $0;
 $19 = $18 & 3855;
 $20 = $19 << 4;
 $21 = $17 | $20;
 $0 = $21;
 $22 = $0;
 $23 = $22 & 65280;
 $24 = $23 >> 8;
 $25 = $0;
 $26 = $25 & 255;
 $27 = $26 << 8;
 $28 = $24 | $27;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL27stbi__compute_huffman_codesP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $c = 0, $codelength_sizes = 0, $hclen = 0, $hdist = 0, $hlit = 0, $i = 0, $lencodes = 0, $n = 0, $or$cond = 0, $s = 0, $z_codelength = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $z_codelength = sp + 28|0;
 $lencodes = sp + 2075|0;
 $codelength_sizes = sp + 2056|0;
 $1 = $a;
 $2 = $1;
 $3 = (__ZL14stbi__zreceiveP10stbi__zbufi($2,5)|0);
 $4 = (($3) + 257)|0;
 $hlit = $4;
 $5 = $1;
 $6 = (__ZL14stbi__zreceiveP10stbi__zbufi($5,5)|0);
 $7 = (($6) + 1)|0;
 $hdist = $7;
 $8 = $1;
 $9 = (__ZL14stbi__zreceiveP10stbi__zbufi($8,4)|0);
 $10 = (($9) + 4)|0;
 $hclen = $10;
 dest=$codelength_sizes; stop=dest+19|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $i = 0;
 while(1) {
  $11 = $i;
  $12 = $hclen;
  $13 = ($11|0)<($12|0);
  if (!($13)) {
   break;
  }
  $14 = $1;
  $15 = (__ZL14stbi__zreceiveP10stbi__zbufi($14,3)|0);
  $s = $15;
  $16 = $s;
  $17 = $16&255;
  $18 = $i;
  $19 = (3223 + ($18)|0);
  $20 = HEAP8[$19>>0]|0;
  $21 = $20&255;
  $22 = (($codelength_sizes) + ($21)|0);
  HEAP8[$22>>0] = $17;
  $23 = $i;
  $24 = (($23) + 1)|0;
  $i = $24;
 }
 $25 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($z_codelength,$codelength_sizes,19)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $0 = 0;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 $n = 0;
 while(1) {
  $27 = $n;
  $28 = $hlit;
  $29 = $hdist;
  $30 = (($28) + ($29))|0;
  $31 = ($27|0)<($30|0);
  if (!($31)) {
   label = 19;
   break;
  }
  $32 = $1;
  $33 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($32,$z_codelength)|0);
  $c = $33;
  $34 = $c;
  $35 = ($34|0)<(0);
  $36 = $c;
  $37 = ($36|0)>=(19);
  $or$cond = $35 | $37;
  if ($or$cond) {
   label = 9;
   break;
  }
  $39 = $c;
  $40 = ($39|0)<(16);
  $41 = $c;
  if ($40) {
   $42 = $41&255;
   $43 = $n;
   $44 = (($43) + 1)|0;
   $n = $44;
   $45 = (($lencodes) + ($43)|0);
   HEAP8[$45>>0] = $42;
   continue;
  }
  $46 = ($41|0)==(16);
  if ($46) {
   $47 = $1;
   $48 = (__ZL14stbi__zreceiveP10stbi__zbufi($47,2)|0);
   $49 = (($48) + 3)|0;
   $c = $49;
   $50 = $n;
   $51 = (($lencodes) + ($50)|0);
   $52 = $n;
   $53 = (($52) - 1)|0;
   $54 = (($lencodes) + ($53)|0);
   $55 = HEAP8[$54>>0]|0;
   $56 = $55&255;
   $57 = $56&255;
   $58 = $c;
   _memset(($51|0),($57|0),($58|0))|0;
   $59 = $c;
   $60 = $n;
   $61 = (($60) + ($59))|0;
   $n = $61;
   continue;
  }
  $62 = $c;
  $63 = ($62|0)==(17);
  if ($63) {
   $64 = $1;
   $65 = (__ZL14stbi__zreceiveP10stbi__zbufi($64,3)|0);
   $66 = (($65) + 3)|0;
   $c = $66;
   $67 = $n;
   $68 = (($lencodes) + ($67)|0);
   $69 = $c;
   _memset(($68|0),0,($69|0))|0;
   $70 = $c;
   $71 = $n;
   $72 = (($71) + ($70))|0;
   $n = $72;
   continue;
  }
  $73 = $c;
  $74 = ($73|0)==(18);
  if (!($74)) {
   label = 17;
   break;
  }
  $75 = $1;
  $76 = (__ZL14stbi__zreceiveP10stbi__zbufi($75,7)|0);
  $77 = (($76) + 11)|0;
  $c = $77;
  $78 = $n;
  $79 = (($lencodes) + ($78)|0);
  $80 = $c;
  _memset(($79|0),0,($80|0))|0;
  $81 = $c;
  $82 = $n;
  $83 = (($82) + ($81))|0;
  $n = $83;
 }
 if ((label|0) == 9) {
  $38 = (__ZL9stbi__errPKc(3178)|0);
  $0 = $38;
  $102 = $0;
  STACKTOP = sp;return ($102|0);
 }
 else if ((label|0) == 17) {
  ___assert_fail((3289|0),(2464|0),3724,(3297|0));
  // unreachable;
 }
 else if ((label|0) == 19) {
  $84 = $n;
  $85 = $hlit;
  $86 = $hdist;
  $87 = (($85) + ($86))|0;
  $88 = ($84|0)!=($87|0);
  if ($88) {
   $89 = (__ZL9stbi__errPKc(3178)|0);
   $0 = $89;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  $90 = $1;
  $91 = ((($90)) + 32|0);
  $92 = $hlit;
  $93 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($91,$lencodes,$92)|0);
  $94 = ($93|0)!=(0);
  if (!($94)) {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
  $95 = $1;
  $96 = ((($95)) + 2052|0);
  $97 = $hlit;
  $98 = (($lencodes) + ($97)|0);
  $99 = $hdist;
  $100 = (__ZL20stbi__zbuild_huffmanP14stbi__zhuffmanPhi($96,$98,$99)|0);
  $101 = ($100|0)!=(0);
  if ($101) {
   $0 = 1;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  } else {
   $0 = 0;
   $102 = $0;
   STACKTOP = sp;return ($102|0);
  }
 }
 return (0)|0;
}
function __ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $z;
 $3 = $1;
 $4 = ((($3)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)<(16);
 if ($6) {
  $7 = $1;
  __ZL15stbi__fill_bitsP10stbi__zbuf($7);
 }
 $8 = $1;
 $9 = ((($8)) + 12|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 511;
 $12 = $2;
 $13 = (($12) + ($11<<1)|0);
 $14 = HEAP16[$13>>1]|0;
 $15 = $14&65535;
 $b = $15;
 $16 = $b;
 $17 = ($16|0)!=(0);
 if ($17) {
  $18 = $b;
  $19 = $18 >> 9;
  $s = $19;
  $20 = $s;
  $21 = $1;
  $22 = ((($21)) + 12|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 >>> $20;
  HEAP32[$22>>2] = $24;
  $25 = $s;
  $26 = $1;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = (($28) - ($25))|0;
  HEAP32[$27>>2] = $29;
  $30 = $b;
  $31 = $30 & 511;
  $0 = $31;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 } else {
  $32 = $1;
  $33 = $2;
  $34 = (__ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($32,$33)|0);
  $0 = $34;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 return (0)|0;
}
function __ZL30stbi__zhuffman_decode_slowpathP10stbi__zbufP14stbi__zhuffman($a,$z) {
 $a = $a|0;
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $b = 0, $k = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $z;
 $3 = $1;
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (__ZL17stbi__bit_reverseii($5,16)|0);
 $k = $6;
 $s = 10;
 while(1) {
  $7 = $k;
  $8 = $s;
  $9 = $2;
  $10 = ((($9)) + 1056|0);
  $11 = (($10) + ($8<<2)|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($7|0)<($12|0);
  $14 = $s;
  if ($13) {
   break;
  }
  $15 = (($14) + 1)|0;
  $s = $15;
 }
 $16 = ($14|0)==(16);
 if ($16) {
  $0 = -1;
  $59 = $0;
  STACKTOP = sp;return ($59|0);
 }
 $17 = $k;
 $18 = $s;
 $19 = (16 - ($18))|0;
 $20 = $17 >> $19;
 $21 = $s;
 $22 = $2;
 $23 = ((($22)) + 1024|0);
 $24 = (($23) + ($21<<1)|0);
 $25 = HEAP16[$24>>1]|0;
 $26 = $25&65535;
 $27 = (($20) - ($26))|0;
 $28 = $s;
 $29 = $2;
 $30 = ((($29)) + 1124|0);
 $31 = (($30) + ($28<<1)|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (($27) + ($33))|0;
 $b = $34;
 $35 = $b;
 $36 = $2;
 $37 = ((($36)) + 1156|0);
 $38 = (($37) + ($35)|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $s;
 $42 = ($40|0)==($41|0);
 if (!($42)) {
  ___assert_fail((3242|0),(2464|0),3596,(3258|0));
  // unreachable;
 }
 $43 = $s;
 $44 = $1;
 $45 = ((($44)) + 12|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 >>> $43;
 HEAP32[$45>>2] = $47;
 $48 = $s;
 $49 = $1;
 $50 = ((($49)) + 8|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) - ($48))|0;
 HEAP32[$50>>2] = $52;
 $53 = $b;
 $54 = $2;
 $55 = ((($54)) + 1444|0);
 $56 = (($55) + ($53<<1)|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $0 = $58;
 $59 = $0;
 STACKTOP = sp;return ($59|0);
}
function __ZL25stbi__parse_huffman_blockP10stbi__zbuf($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dist = 0, $len = 0, $p = 0, $v = 0, $z = 0, $zout = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $zout = $4;
 L1: while(1) {
  $5 = $1;
  $6 = $1;
  $7 = ((($6)) + 32|0);
  $8 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($5,$7)|0);
  $z = $8;
  $9 = $z;
  $10 = ($9|0)<(256);
  $11 = $z;
  if ($10) {
   $12 = ($11|0)<(0);
   if ($12) {
    label = 4;
    break;
   }
   $14 = $zout;
   $15 = $1;
   $16 = ((($15)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($14>>>0)>=($17>>>0);
   if ($18) {
    $19 = $1;
    $20 = $zout;
    $21 = (__ZL13stbi__zexpandP10stbi__zbufPci($19,$20,1)|0);
    $22 = ($21|0)!=(0);
    if (!($22)) {
     label = 7;
     break;
    }
    $23 = $1;
    $24 = ((($23)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $zout = $25;
   }
   $26 = $z;
   $27 = $26&255;
   $28 = $zout;
   $29 = ((($28)) + 1|0);
   $zout = $29;
   HEAP8[$28>>0] = $27;
   continue;
  }
  $30 = ($11|0)==(256);
  if ($30) {
   label = 11;
   break;
  }
  $34 = $z;
  $35 = (($34) - 257)|0;
  $z = $35;
  $36 = $z;
  $37 = (312 + ($36<<2)|0);
  $38 = HEAP32[$37>>2]|0;
  $len = $38;
  $39 = $z;
  $40 = (436 + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)!=(0);
  if ($42) {
   $43 = $1;
   $44 = $z;
   $45 = (436 + ($44<<2)|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = (__ZL14stbi__zreceiveP10stbi__zbufi($43,$46)|0);
   $48 = $len;
   $49 = (($48) + ($47))|0;
   $len = $49;
  }
  $50 = $1;
  $51 = $1;
  $52 = ((($51)) + 2052|0);
  $53 = (__ZL21stbi__zhuffman_decodeP10stbi__zbufP14stbi__zhuffman($50,$52)|0);
  $z = $53;
  $54 = $z;
  $55 = ($54|0)<(0);
  if ($55) {
   label = 15;
   break;
  }
  $57 = $z;
  $58 = (560 + ($57<<2)|0);
  $59 = HEAP32[$58>>2]|0;
  $dist = $59;
  $60 = $z;
  $61 = (688 + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = $1;
   $65 = $z;
   $66 = (688 + ($65<<2)|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = (__ZL14stbi__zreceiveP10stbi__zbufi($64,$67)|0);
   $69 = $dist;
   $70 = (($69) + ($68))|0;
   $dist = $70;
  }
  $71 = $zout;
  $72 = $1;
  $73 = ((($72)) + 20|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $71;
  $76 = $74;
  $77 = (($75) - ($76))|0;
  $78 = $dist;
  $79 = ($77|0)<($78|0);
  if ($79) {
   label = 19;
   break;
  }
  $81 = $zout;
  $82 = $len;
  $83 = (($81) + ($82)|0);
  $84 = $1;
  $85 = ((($84)) + 24|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ($83>>>0)>($86>>>0);
  if ($87) {
   $88 = $1;
   $89 = $zout;
   $90 = $len;
   $91 = (__ZL13stbi__zexpandP10stbi__zbufPci($88,$89,$90)|0);
   $92 = ($91|0)!=(0);
   if (!($92)) {
    label = 22;
    break;
   }
   $93 = $1;
   $94 = ((($93)) + 16|0);
   $95 = HEAP32[$94>>2]|0;
   $zout = $95;
  }
  $96 = $zout;
  $97 = $dist;
  $98 = (0 - ($97))|0;
  $99 = (($96) + ($98)|0);
  $p = $99;
  $100 = $dist;
  $101 = ($100|0)==(1);
  if ($101) {
   $102 = $p;
   $103 = HEAP8[$102>>0]|0;
   $v = $103;
   $104 = $len;
   $105 = ($104|0)!=(0);
   if (!($105)) {
    continue;
   }
   while(1) {
    $106 = $v;
    $107 = $zout;
    $108 = ((($107)) + 1|0);
    $zout = $108;
    HEAP8[$107>>0] = $106;
    $109 = $len;
    $110 = (($109) + -1)|0;
    $len = $110;
    $111 = ($110|0)!=(0);
    if (!($111)) {
     continue L1;
    }
   }
  } else {
   $112 = $len;
   $113 = ($112|0)!=(0);
   if (!($113)) {
    continue;
   }
   while(1) {
    $114 = $p;
    $115 = ((($114)) + 1|0);
    $p = $115;
    $116 = HEAP8[$114>>0]|0;
    $117 = $zout;
    $118 = ((($117)) + 1|0);
    $zout = $118;
    HEAP8[$117>>0] = $116;
    $119 = $len;
    $120 = (($119) + -1)|0;
    $len = $120;
    $121 = ($120|0)!=(0);
    if (!($121)) {
     continue L1;
    }
   }
  }
 }
 if ((label|0) == 4) {
  $13 = (__ZL9stbi__errPKc(2560)|0);
  $0 = $13;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 7) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 11) {
  $31 = $zout;
  $32 = $1;
  $33 = ((($32)) + 16|0);
  HEAP32[$33>>2] = $31;
  $0 = 1;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 15) {
  $56 = (__ZL9stbi__errPKc(2560)|0);
  $0 = $56;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 19) {
  $80 = (__ZL9stbi__errPKc(3325)|0);
  $0 = $80;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 else if ((label|0) == 22) {
  $0 = 0;
  $122 = $0;
  STACKTOP = sp;return ($122|0);
 }
 return (0)|0;
}
function __ZL22stbi__create_png_imageP9stbi__pngPhjiiii($a,$image_data,$image_data_len,$out_n,$depth,$color,$interlaced) {
 $a = $a|0;
 $image_data = $image_data|0;
 $image_data_len = $image_data_len|0;
 $out_n = $out_n|0;
 $depth = $depth|0;
 $color = $color|0;
 $interlaced = $interlaced|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $final = 0, $i = 0, $img_len = 0, $j = 0, $or$cond = 0, $out_x = 0, $out_y = 0, $p = 0, $x = 0, $xorig = 0, $xspc = 0, $y = 0, $yorig = 0, $yspc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $xorig = sp + 112|0;
 $yorig = sp + 84|0;
 $xspc = sp + 56|0;
 $yspc = sp + 28|0;
 $1 = $a;
 $2 = $image_data;
 $3 = $image_data_len;
 $4 = $out_n;
 $5 = $depth;
 $6 = $color;
 $7 = $interlaced;
 $8 = $7;
 $9 = ($8|0)!=(0);
 $10 = $1;
 if (!($9)) {
  $11 = $2;
  $12 = $3;
  $13 = $4;
  $14 = $1;
  $15 = HEAP32[$14>>2]|0;
  $16 = HEAP32[$15>>2]|0;
  $17 = $1;
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($18)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $5;
  $22 = $6;
  $23 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($10,$11,$12,$13,$16,$20,$21,$22)|0);
  $0 = $23;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 $24 = HEAP32[$10>>2]|0;
 $25 = HEAP32[$24>>2]|0;
 $26 = $1;
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($27)) + 4|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($25, $29)|0;
 $31 = $4;
 $32 = Math_imul($30, $31)|0;
 $33 = (__ZL12stbi__mallocj($32)|0);
 $final = $33;
 $p = 0;
 while(1) {
  $34 = $p;
  $35 = ($34|0)<(7);
  if (!($35)) {
   label = 16;
   break;
  }
  ;HEAP32[$xorig>>2]=HEAP32[816>>2]|0;HEAP32[$xorig+4>>2]=HEAP32[816+4>>2]|0;HEAP32[$xorig+8>>2]=HEAP32[816+8>>2]|0;HEAP32[$xorig+12>>2]=HEAP32[816+12>>2]|0;HEAP32[$xorig+16>>2]=HEAP32[816+16>>2]|0;HEAP32[$xorig+20>>2]=HEAP32[816+20>>2]|0;HEAP32[$xorig+24>>2]=HEAP32[816+24>>2]|0;
  ;HEAP32[$yorig>>2]=HEAP32[844>>2]|0;HEAP32[$yorig+4>>2]=HEAP32[844+4>>2]|0;HEAP32[$yorig+8>>2]=HEAP32[844+8>>2]|0;HEAP32[$yorig+12>>2]=HEAP32[844+12>>2]|0;HEAP32[$yorig+16>>2]=HEAP32[844+16>>2]|0;HEAP32[$yorig+20>>2]=HEAP32[844+20>>2]|0;HEAP32[$yorig+24>>2]=HEAP32[844+24>>2]|0;
  ;HEAP32[$xspc>>2]=HEAP32[872>>2]|0;HEAP32[$xspc+4>>2]=HEAP32[872+4>>2]|0;HEAP32[$xspc+8>>2]=HEAP32[872+8>>2]|0;HEAP32[$xspc+12>>2]=HEAP32[872+12>>2]|0;HEAP32[$xspc+16>>2]=HEAP32[872+16>>2]|0;HEAP32[$xspc+20>>2]=HEAP32[872+20>>2]|0;HEAP32[$xspc+24>>2]=HEAP32[872+24>>2]|0;
  ;HEAP32[$yspc>>2]=HEAP32[900>>2]|0;HEAP32[$yspc+4>>2]=HEAP32[900+4>>2]|0;HEAP32[$yspc+8>>2]=HEAP32[900+8>>2]|0;HEAP32[$yspc+12>>2]=HEAP32[900+12>>2]|0;HEAP32[$yspc+16>>2]=HEAP32[900+16>>2]|0;HEAP32[$yspc+20>>2]=HEAP32[900+20>>2]|0;HEAP32[$yspc+24>>2]=HEAP32[900+24>>2]|0;
  $36 = $1;
  $37 = HEAP32[$36>>2]|0;
  $38 = HEAP32[$37>>2]|0;
  $39 = $p;
  $40 = (($xorig) + ($39<<2)|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = (($38) - ($41))|0;
  $43 = $p;
  $44 = (($xspc) + ($43<<2)|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = (($42) + ($45))|0;
  $47 = (($46) - 1)|0;
  $48 = $p;
  $49 = (($xspc) + ($48<<2)|0);
  $50 = HEAP32[$49>>2]|0;
  $51 = (($47>>>0) / ($50>>>0))&-1;
  $x = $51;
  $52 = $1;
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 4|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = $p;
  $57 = (($yorig) + ($56<<2)|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = (($55) - ($58))|0;
  $60 = $p;
  $61 = (($yspc) + ($60<<2)|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = (($59) + ($62))|0;
  $64 = (($63) - 1)|0;
  $65 = $p;
  $66 = (($yspc) + ($65<<2)|0);
  $67 = HEAP32[$66>>2]|0;
  $68 = (($64>>>0) / ($67>>>0))&-1;
  $y = $68;
  $69 = $x;
  $70 = ($69|0)!=(0);
  $71 = $y;
  $72 = ($71|0)!=(0);
  $or$cond = $70 & $72;
  if ($or$cond) {
   $73 = $1;
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($74)) + 8|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = $x;
   $78 = Math_imul($76, $77)|0;
   $79 = $5;
   $80 = Math_imul($78, $79)|0;
   $81 = (($80) + 7)|0;
   $82 = $81 >> 3;
   $83 = (($82) + 1)|0;
   $84 = $y;
   $85 = Math_imul($83, $84)|0;
   $img_len = $85;
   $86 = $1;
   $87 = $2;
   $88 = $3;
   $89 = $4;
   $90 = $x;
   $91 = $y;
   $92 = $5;
   $93 = $6;
   $94 = (__ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($86,$87,$88,$89,$90,$91,$92,$93)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    label = 7;
    break;
   }
   $j = 0;
   while(1) {
    $97 = $j;
    $98 = $y;
    $99 = ($97|0)<($98|0);
    if (!($99)) {
     break;
    }
    $i = 0;
    while(1) {
     $100 = $i;
     $101 = $x;
     $102 = ($100|0)<($101|0);
     $103 = $j;
     if (!($102)) {
      break;
     }
     $104 = $p;
     $105 = (($yspc) + ($104<<2)|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = Math_imul($103, $106)|0;
     $108 = $p;
     $109 = (($yorig) + ($108<<2)|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = (($107) + ($110))|0;
     $out_y = $111;
     $112 = $i;
     $113 = $p;
     $114 = (($xspc) + ($113<<2)|0);
     $115 = HEAP32[$114>>2]|0;
     $116 = Math_imul($112, $115)|0;
     $117 = $p;
     $118 = (($xorig) + ($117<<2)|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = (($116) + ($119))|0;
     $out_x = $120;
     $121 = $final;
     $122 = $out_y;
     $123 = $1;
     $124 = HEAP32[$123>>2]|0;
     $125 = HEAP32[$124>>2]|0;
     $126 = Math_imul($122, $125)|0;
     $127 = $4;
     $128 = Math_imul($126, $127)|0;
     $129 = (($121) + ($128)|0);
     $130 = $out_x;
     $131 = $4;
     $132 = Math_imul($130, $131)|0;
     $133 = (($129) + ($132)|0);
     $134 = $1;
     $135 = ((($134)) + 12|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $j;
     $138 = $x;
     $139 = Math_imul($137, $138)|0;
     $140 = $i;
     $141 = (($139) + ($140))|0;
     $142 = $4;
     $143 = Math_imul($141, $142)|0;
     $144 = (($136) + ($143)|0);
     $145 = $4;
     _memcpy(($133|0),($144|0),($145|0))|0;
     $146 = $i;
     $147 = (($146) + 1)|0;
     $i = $147;
    }
    $148 = (($103) + 1)|0;
    $j = $148;
   }
   $149 = $1;
   $150 = ((($149)) + 12|0);
   $151 = HEAP32[$150>>2]|0;
   _free($151);
   $152 = $img_len;
   $153 = $2;
   $154 = (($153) + ($152)|0);
   $2 = $154;
   $155 = $img_len;
   $156 = $3;
   $157 = (($156) - ($155))|0;
   $3 = $157;
  }
  $158 = $p;
  $159 = (($158) + 1)|0;
  $p = $159;
 }
 if ((label|0) == 7) {
  $96 = $final;
  _free($96);
  $0 = 0;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 else if ((label|0) == 16) {
  $160 = $final;
  $161 = $1;
  $162 = ((($161)) + 12|0);
  HEAP32[$162>>2] = $160;
  $0 = 1;
  $163 = $0;
  STACKTOP = sp;return ($163|0);
 }
 return (0)|0;
}
function __ZL26stbi__create_png_image_rawP9stbi__pngPhjijjii($a,$raw,$raw_len,$out_n,$x,$y,$depth,$color) {
 $a = $a|0;
 $raw = $raw|0;
 $raw_len = $raw_len|0;
 $out_n = $out_n|0;
 $x = $x|0;
 $y = $y|0;
 $depth = $depth|0;
 $color = $color|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0;
 var $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0;
 var $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0;
 var $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0;
 var $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0;
 var $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0;
 var $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0;
 var $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0, $1130 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0;
 var $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0;
 var $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0;
 var $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0;
 var $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0;
 var $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0;
 var $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0;
 var $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0;
 var $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0;
 var $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0;
 var $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cur = 0, $cur1 = 0, $filter = 0, $filter_bytes = 0, $i = 0, $img_len = 0, $img_n = 0, $img_width_bytes = 0, $in = 0;
 var $j = 0, $k = 0, $nk = 0, $prior = 0, $q = 0, $s = 0, $scale = 0, $stride = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $raw;
 $3 = $raw_len;
 $4 = $out_n;
 $5 = $x;
 $6 = $y;
 $7 = $depth;
 $8 = $color;
 $9 = $1;
 $10 = HEAP32[$9>>2]|0;
 $s = $10;
 $11 = $5;
 $12 = $4;
 $13 = Math_imul($11, $12)|0;
 $stride = $13;
 $14 = $s;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $img_n = $16;
 $17 = $4;
 $18 = $s;
 $19 = ((($18)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($17|0)==($20|0);
 if (!($21)) {
  $22 = $4;
  $23 = $s;
  $24 = ((($23)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (($25) + 1)|0;
  $27 = ($22|0)==($26|0);
  if (!($27)) {
   ___assert_fail((3334|0),(2464|0),3989,(3375|0));
   // unreachable;
  }
 }
 $28 = $5;
 $29 = $6;
 $30 = Math_imul($28, $29)|0;
 $31 = $4;
 $32 = Math_imul($30, $31)|0;
 $33 = (__ZL12stbi__mallocj($32)|0);
 $34 = $1;
 $35 = ((($34)) + 12|0);
 HEAP32[$35>>2] = $33;
 $36 = $1;
 $37 = ((($36)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($38|0)!=(0|0);
 if (!($39)) {
  $40 = (__ZL9stbi__errPKc(2292)|0);
  $0 = $40;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 $41 = $img_n;
 $42 = $5;
 $43 = Math_imul($41, $42)|0;
 $44 = $7;
 $45 = Math_imul($43, $44)|0;
 $46 = (($45) + 7)|0;
 $47 = $46 >>> 3;
 $img_width_bytes = $47;
 $48 = $img_width_bytes;
 $49 = (($48) + 1)|0;
 $50 = $6;
 $51 = Math_imul($49, $50)|0;
 $img_len = $51;
 $52 = $s;
 $53 = HEAP32[$52>>2]|0;
 $54 = $5;
 $55 = ($53|0)==($54|0);
 if ($55) {
  $56 = $s;
  $57 = ((($56)) + 4|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = $6;
  $60 = ($58|0)==($59|0);
  if ($60) {
   $61 = $3;
   $62 = $img_len;
   $63 = ($61|0)!=($62|0);
   if ($63) {
    $64 = (__ZL9stbi__errPKc(3402)|0);
    $0 = $64;
    $1130 = $0;
    STACKTOP = sp;return ($1130|0);
   }
  } else {
   label = 10;
  }
 } else {
  label = 10;
 }
 if ((label|0) == 10) {
  $65 = $3;
  $66 = $img_len;
  $67 = ($65>>>0)<($66>>>0);
  if ($67) {
   $68 = (__ZL9stbi__errPKc(3402)|0);
   $0 = $68;
   $1130 = $0;
   STACKTOP = sp;return ($1130|0);
  }
 }
 $j = 0;
 L19: while(1) {
  $69 = $j;
  $70 = $6;
  $71 = ($69>>>0)<($70>>>0);
  if (!($71)) {
   label = 107;
   break;
  }
  $72 = $1;
  $73 = ((($72)) + 12|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = $stride;
  $76 = $j;
  $77 = Math_imul($75, $76)|0;
  $78 = (($74) + ($77)|0);
  $cur = $78;
  $79 = $cur;
  $80 = $stride;
  $81 = (0 - ($80))|0;
  $82 = (($79) + ($81)|0);
  $prior = $82;
  $83 = $2;
  $84 = ((($83)) + 1|0);
  $2 = $84;
  $85 = HEAP8[$83>>0]|0;
  $86 = $85&255;
  $filter = $86;
  $87 = $img_n;
  $filter_bytes = $87;
  $88 = $5;
  $width = $88;
  $89 = $filter;
  $90 = ($89|0)>(4);
  if ($90) {
   label = 15;
   break;
  }
  $92 = $7;
  $93 = ($92|0)<(8);
  if ($93) {
   $94 = $img_width_bytes;
   $95 = $5;
   $96 = ($94>>>0)<=($95>>>0);
   if (!($96)) {
    label = 18;
    break;
   }
   $97 = $5;
   $98 = $4;
   $99 = Math_imul($97, $98)|0;
   $100 = $img_width_bytes;
   $101 = (($99) - ($100))|0;
   $102 = $cur;
   $103 = (($102) + ($101)|0);
   $cur = $103;
   $filter_bytes = 1;
   $104 = $img_width_bytes;
   $width = $104;
  }
  $105 = $j;
  $106 = ($105|0)==(0);
  if ($106) {
   $107 = $filter;
   $108 = (3456 + ($107)|0);
   $109 = HEAP8[$108>>0]|0;
   $110 = $109&255;
   $filter = $110;
  }
  $k = 0;
  while(1) {
   $111 = $k;
   $112 = $filter_bytes;
   $113 = ($111|0)<($112|0);
   if (!($113)) {
    break;
   }
   $114 = $filter;
   switch ($114|0) {
   case 0:  {
    $115 = $k;
    $116 = $2;
    $117 = (($116) + ($115)|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $k;
    $120 = $cur;
    $121 = (($120) + ($119)|0);
    HEAP8[$121>>0] = $118;
    break;
   }
   case 1:  {
    $122 = $k;
    $123 = $2;
    $124 = (($123) + ($122)|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $k;
    $127 = $cur;
    $128 = (($127) + ($126)|0);
    HEAP8[$128>>0] = $125;
    break;
   }
   case 2:  {
    $129 = $k;
    $130 = $2;
    $131 = (($130) + ($129)|0);
    $132 = HEAP8[$131>>0]|0;
    $133 = $132&255;
    $134 = $k;
    $135 = $prior;
    $136 = (($135) + ($134)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = $137&255;
    $139 = (($133) + ($138))|0;
    $140 = $139 & 255;
    $141 = $140&255;
    $142 = $k;
    $143 = $cur;
    $144 = (($143) + ($142)|0);
    HEAP8[$144>>0] = $141;
    break;
   }
   case 3:  {
    $145 = $k;
    $146 = $2;
    $147 = (($146) + ($145)|0);
    $148 = HEAP8[$147>>0]|0;
    $149 = $148&255;
    $150 = $k;
    $151 = $prior;
    $152 = (($151) + ($150)|0);
    $153 = HEAP8[$152>>0]|0;
    $154 = $153&255;
    $155 = $154 >> 1;
    $156 = (($149) + ($155))|0;
    $157 = $156 & 255;
    $158 = $157&255;
    $159 = $k;
    $160 = $cur;
    $161 = (($160) + ($159)|0);
    HEAP8[$161>>0] = $158;
    break;
   }
   case 4:  {
    $162 = $k;
    $163 = $2;
    $164 = (($163) + ($162)|0);
    $165 = HEAP8[$164>>0]|0;
    $166 = $165&255;
    $167 = $k;
    $168 = $prior;
    $169 = (($168) + ($167)|0);
    $170 = HEAP8[$169>>0]|0;
    $171 = $170&255;
    $172 = (__ZL11stbi__paethiii(0,$171,0)|0);
    $173 = (($166) + ($172))|0;
    $174 = $173 & 255;
    $175 = $174&255;
    $176 = $k;
    $177 = $cur;
    $178 = (($177) + ($176)|0);
    HEAP8[$178>>0] = $175;
    break;
   }
   case 5:  {
    $179 = $k;
    $180 = $2;
    $181 = (($180) + ($179)|0);
    $182 = HEAP8[$181>>0]|0;
    $183 = $k;
    $184 = $cur;
    $185 = (($184) + ($183)|0);
    HEAP8[$185>>0] = $182;
    break;
   }
   case 6:  {
    $186 = $k;
    $187 = $2;
    $188 = (($187) + ($186)|0);
    $189 = HEAP8[$188>>0]|0;
    $190 = $k;
    $191 = $cur;
    $192 = (($191) + ($190)|0);
    HEAP8[$192>>0] = $189;
    break;
   }
   default: {
   }
   }
   $193 = $k;
   $194 = (($193) + 1)|0;
   $k = $194;
  }
  $195 = $7;
  $196 = ($195|0)==(8);
  if ($196) {
   $197 = $img_n;
   $198 = $4;
   $199 = ($197|0)!=($198|0);
   if ($199) {
    $200 = $img_n;
    $201 = $cur;
    $202 = (($201) + ($200)|0);
    HEAP8[$202>>0] = -1;
   }
   $203 = $img_n;
   $204 = $2;
   $205 = (($204) + ($203)|0);
   $2 = $205;
   $206 = $4;
   $207 = $cur;
   $208 = (($207) + ($206)|0);
   $cur = $208;
   $209 = $4;
   $210 = $prior;
   $211 = (($210) + ($209)|0);
   $prior = $211;
  } else {
   $212 = $2;
   $213 = ((($212)) + 1|0);
   $2 = $213;
   $214 = $cur;
   $215 = ((($214)) + 1|0);
   $cur = $215;
   $216 = $prior;
   $217 = ((($216)) + 1|0);
   $prior = $217;
  }
  $218 = $7;
  $219 = ($218|0)<(8);
  L50: do {
   if ($219) {
    label = 40;
   } else {
    $220 = $img_n;
    $221 = $4;
    $222 = ($220|0)==($221|0);
    if ($222) {
     label = 40;
    } else {
     $392 = $img_n;
     $393 = (($392) + 1)|0;
     $394 = $4;
     $395 = ($393|0)==($394|0);
     if (!($395)) {
      label = 62;
      break L19;
     }
     $396 = $filter;
     switch ($396|0) {
     case 0:  {
      $397 = $5;
      $398 = (($397) - 1)|0;
      $i = $398;
      while(1) {
       $399 = $i;
       $400 = ($399>>>0)>=(1);
       if (!($400)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $401 = $k;
        $402 = $img_n;
        $403 = ($401|0)<($402|0);
        if (!($403)) {
         break;
        }
        $404 = $k;
        $405 = $2;
        $406 = (($405) + ($404)|0);
        $407 = HEAP8[$406>>0]|0;
        $408 = $k;
        $409 = $cur;
        $410 = (($409) + ($408)|0);
        HEAP8[$410>>0] = $407;
        $411 = $k;
        $412 = (($411) + 1)|0;
        $k = $412;
       }
       $413 = $i;
       $414 = (($413) + -1)|0;
       $i = $414;
       $415 = $img_n;
       $416 = $cur;
       $417 = (($416) + ($415)|0);
       HEAP8[$417>>0] = -1;
       $418 = $img_n;
       $419 = $2;
       $420 = (($419) + ($418)|0);
       $2 = $420;
       $421 = $4;
       $422 = $cur;
       $423 = (($422) + ($421)|0);
       $cur = $423;
       $424 = $4;
       $425 = $prior;
       $426 = (($425) + ($424)|0);
       $prior = $426;
      }
      break;
     }
     case 1:  {
      $427 = $5;
      $428 = (($427) - 1)|0;
      $i = $428;
      while(1) {
       $429 = $i;
       $430 = ($429>>>0)>=(1);
       if (!($430)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $431 = $k;
        $432 = $img_n;
        $433 = ($431|0)<($432|0);
        if (!($433)) {
         break;
        }
        $434 = $k;
        $435 = $2;
        $436 = (($435) + ($434)|0);
        $437 = HEAP8[$436>>0]|0;
        $438 = $437&255;
        $439 = $k;
        $440 = $4;
        $441 = (($439) - ($440))|0;
        $442 = $cur;
        $443 = (($442) + ($441)|0);
        $444 = HEAP8[$443>>0]|0;
        $445 = $444&255;
        $446 = (($438) + ($445))|0;
        $447 = $446 & 255;
        $448 = $447&255;
        $449 = $k;
        $450 = $cur;
        $451 = (($450) + ($449)|0);
        HEAP8[$451>>0] = $448;
        $452 = $k;
        $453 = (($452) + 1)|0;
        $k = $453;
       }
       $454 = $i;
       $455 = (($454) + -1)|0;
       $i = $455;
       $456 = $img_n;
       $457 = $cur;
       $458 = (($457) + ($456)|0);
       HEAP8[$458>>0] = -1;
       $459 = $img_n;
       $460 = $2;
       $461 = (($460) + ($459)|0);
       $2 = $461;
       $462 = $4;
       $463 = $cur;
       $464 = (($463) + ($462)|0);
       $cur = $464;
       $465 = $4;
       $466 = $prior;
       $467 = (($466) + ($465)|0);
       $prior = $467;
      }
      break;
     }
     case 2:  {
      $468 = $5;
      $469 = (($468) - 1)|0;
      $i = $469;
      while(1) {
       $470 = $i;
       $471 = ($470>>>0)>=(1);
       if (!($471)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $472 = $k;
        $473 = $img_n;
        $474 = ($472|0)<($473|0);
        if (!($474)) {
         break;
        }
        $475 = $k;
        $476 = $2;
        $477 = (($476) + ($475)|0);
        $478 = HEAP8[$477>>0]|0;
        $479 = $478&255;
        $480 = $k;
        $481 = $prior;
        $482 = (($481) + ($480)|0);
        $483 = HEAP8[$482>>0]|0;
        $484 = $483&255;
        $485 = (($479) + ($484))|0;
        $486 = $485 & 255;
        $487 = $486&255;
        $488 = $k;
        $489 = $cur;
        $490 = (($489) + ($488)|0);
        HEAP8[$490>>0] = $487;
        $491 = $k;
        $492 = (($491) + 1)|0;
        $k = $492;
       }
       $493 = $i;
       $494 = (($493) + -1)|0;
       $i = $494;
       $495 = $img_n;
       $496 = $cur;
       $497 = (($496) + ($495)|0);
       HEAP8[$497>>0] = -1;
       $498 = $img_n;
       $499 = $2;
       $500 = (($499) + ($498)|0);
       $2 = $500;
       $501 = $4;
       $502 = $cur;
       $503 = (($502) + ($501)|0);
       $cur = $503;
       $504 = $4;
       $505 = $prior;
       $506 = (($505) + ($504)|0);
       $prior = $506;
      }
      break;
     }
     case 3:  {
      $507 = $5;
      $508 = (($507) - 1)|0;
      $i = $508;
      while(1) {
       $509 = $i;
       $510 = ($509>>>0)>=(1);
       if (!($510)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $511 = $k;
        $512 = $img_n;
        $513 = ($511|0)<($512|0);
        if (!($513)) {
         break;
        }
        $514 = $k;
        $515 = $2;
        $516 = (($515) + ($514)|0);
        $517 = HEAP8[$516>>0]|0;
        $518 = $517&255;
        $519 = $k;
        $520 = $prior;
        $521 = (($520) + ($519)|0);
        $522 = HEAP8[$521>>0]|0;
        $523 = $522&255;
        $524 = $k;
        $525 = $4;
        $526 = (($524) - ($525))|0;
        $527 = $cur;
        $528 = (($527) + ($526)|0);
        $529 = HEAP8[$528>>0]|0;
        $530 = $529&255;
        $531 = (($523) + ($530))|0;
        $532 = $531 >> 1;
        $533 = (($518) + ($532))|0;
        $534 = $533 & 255;
        $535 = $534&255;
        $536 = $k;
        $537 = $cur;
        $538 = (($537) + ($536)|0);
        HEAP8[$538>>0] = $535;
        $539 = $k;
        $540 = (($539) + 1)|0;
        $k = $540;
       }
       $541 = $i;
       $542 = (($541) + -1)|0;
       $i = $542;
       $543 = $img_n;
       $544 = $cur;
       $545 = (($544) + ($543)|0);
       HEAP8[$545>>0] = -1;
       $546 = $img_n;
       $547 = $2;
       $548 = (($547) + ($546)|0);
       $2 = $548;
       $549 = $4;
       $550 = $cur;
       $551 = (($550) + ($549)|0);
       $cur = $551;
       $552 = $4;
       $553 = $prior;
       $554 = (($553) + ($552)|0);
       $prior = $554;
      }
      break;
     }
     case 4:  {
      $555 = $5;
      $556 = (($555) - 1)|0;
      $i = $556;
      while(1) {
       $557 = $i;
       $558 = ($557>>>0)>=(1);
       if (!($558)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $559 = $k;
        $560 = $img_n;
        $561 = ($559|0)<($560|0);
        if (!($561)) {
         break;
        }
        $562 = $k;
        $563 = $2;
        $564 = (($563) + ($562)|0);
        $565 = HEAP8[$564>>0]|0;
        $566 = $565&255;
        $567 = $k;
        $568 = $4;
        $569 = (($567) - ($568))|0;
        $570 = $cur;
        $571 = (($570) + ($569)|0);
        $572 = HEAP8[$571>>0]|0;
        $573 = $572&255;
        $574 = $k;
        $575 = $prior;
        $576 = (($575) + ($574)|0);
        $577 = HEAP8[$576>>0]|0;
        $578 = $577&255;
        $579 = $k;
        $580 = $4;
        $581 = (($579) - ($580))|0;
        $582 = $prior;
        $583 = (($582) + ($581)|0);
        $584 = HEAP8[$583>>0]|0;
        $585 = $584&255;
        $586 = (__ZL11stbi__paethiii($573,$578,$585)|0);
        $587 = (($566) + ($586))|0;
        $588 = $587 & 255;
        $589 = $588&255;
        $590 = $k;
        $591 = $cur;
        $592 = (($591) + ($590)|0);
        HEAP8[$592>>0] = $589;
        $593 = $k;
        $594 = (($593) + 1)|0;
        $k = $594;
       }
       $595 = $i;
       $596 = (($595) + -1)|0;
       $i = $596;
       $597 = $img_n;
       $598 = $cur;
       $599 = (($598) + ($597)|0);
       HEAP8[$599>>0] = -1;
       $600 = $img_n;
       $601 = $2;
       $602 = (($601) + ($600)|0);
       $2 = $602;
       $603 = $4;
       $604 = $cur;
       $605 = (($604) + ($603)|0);
       $cur = $605;
       $606 = $4;
       $607 = $prior;
       $608 = (($607) + ($606)|0);
       $prior = $608;
      }
      break;
     }
     case 5:  {
      $609 = $5;
      $610 = (($609) - 1)|0;
      $i = $610;
      while(1) {
       $611 = $i;
       $612 = ($611>>>0)>=(1);
       if (!($612)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $613 = $k;
        $614 = $img_n;
        $615 = ($613|0)<($614|0);
        if (!($615)) {
         break;
        }
        $616 = $k;
        $617 = $2;
        $618 = (($617) + ($616)|0);
        $619 = HEAP8[$618>>0]|0;
        $620 = $619&255;
        $621 = $k;
        $622 = $4;
        $623 = (($621) - ($622))|0;
        $624 = $cur;
        $625 = (($624) + ($623)|0);
        $626 = HEAP8[$625>>0]|0;
        $627 = $626&255;
        $628 = $627 >> 1;
        $629 = (($620) + ($628))|0;
        $630 = $629 & 255;
        $631 = $630&255;
        $632 = $k;
        $633 = $cur;
        $634 = (($633) + ($632)|0);
        HEAP8[$634>>0] = $631;
        $635 = $k;
        $636 = (($635) + 1)|0;
        $k = $636;
       }
       $637 = $i;
       $638 = (($637) + -1)|0;
       $i = $638;
       $639 = $img_n;
       $640 = $cur;
       $641 = (($640) + ($639)|0);
       HEAP8[$641>>0] = -1;
       $642 = $img_n;
       $643 = $2;
       $644 = (($643) + ($642)|0);
       $2 = $644;
       $645 = $4;
       $646 = $cur;
       $647 = (($646) + ($645)|0);
       $cur = $647;
       $648 = $4;
       $649 = $prior;
       $650 = (($649) + ($648)|0);
       $prior = $650;
      }
      break;
     }
     case 6:  {
      $651 = $5;
      $652 = (($651) - 1)|0;
      $i = $652;
      while(1) {
       $653 = $i;
       $654 = ($653>>>0)>=(1);
       if (!($654)) {
        break L50;
       }
       $k = 0;
       while(1) {
        $655 = $k;
        $656 = $img_n;
        $657 = ($655|0)<($656|0);
        if (!($657)) {
         break;
        }
        $658 = $k;
        $659 = $2;
        $660 = (($659) + ($658)|0);
        $661 = HEAP8[$660>>0]|0;
        $662 = $661&255;
        $663 = $k;
        $664 = $4;
        $665 = (($663) - ($664))|0;
        $666 = $cur;
        $667 = (($666) + ($665)|0);
        $668 = HEAP8[$667>>0]|0;
        $669 = $668&255;
        $670 = (__ZL11stbi__paethiii($669,0,0)|0);
        $671 = (($662) + ($670))|0;
        $672 = $671 & 255;
        $673 = $672&255;
        $674 = $k;
        $675 = $cur;
        $676 = (($675) + ($674)|0);
        HEAP8[$676>>0] = $673;
        $677 = $k;
        $678 = (($677) + 1)|0;
        $k = $678;
       }
       $679 = $i;
       $680 = (($679) + -1)|0;
       $i = $680;
       $681 = $img_n;
       $682 = $cur;
       $683 = (($682) + ($681)|0);
       HEAP8[$683>>0] = -1;
       $684 = $img_n;
       $685 = $2;
       $686 = (($685) + ($684)|0);
       $2 = $686;
       $687 = $4;
       $688 = $cur;
       $689 = (($688) + ($687)|0);
       $cur = $689;
       $690 = $4;
       $691 = $prior;
       $692 = (($691) + ($690)|0);
       $prior = $692;
      }
      break;
     }
     default: {
      break L50;
     }
     }
    }
   }
  } while(0);
  if ((label|0) == 40) {
   label = 0;
   $223 = $width;
   $224 = (($223) - 1)|0;
   $225 = $img_n;
   $226 = Math_imul($224, $225)|0;
   $nk = $226;
   $227 = $filter;
   L113: do {
    switch ($227|0) {
    case 0:  {
     $228 = $cur;
     $229 = $2;
     $230 = $nk;
     _memcpy(($228|0),($229|0),($230|0))|0;
     break;
    }
    case 1:  {
     $k = 0;
     while(1) {
      $231 = $k;
      $232 = $nk;
      $233 = ($231|0)<($232|0);
      if (!($233)) {
       break L113;
      }
      $234 = $k;
      $235 = $2;
      $236 = (($235) + ($234)|0);
      $237 = HEAP8[$236>>0]|0;
      $238 = $237&255;
      $239 = $k;
      $240 = $filter_bytes;
      $241 = (($239) - ($240))|0;
      $242 = $cur;
      $243 = (($242) + ($241)|0);
      $244 = HEAP8[$243>>0]|0;
      $245 = $244&255;
      $246 = (($238) + ($245))|0;
      $247 = $246 & 255;
      $248 = $247&255;
      $249 = $k;
      $250 = $cur;
      $251 = (($250) + ($249)|0);
      HEAP8[$251>>0] = $248;
      $252 = $k;
      $253 = (($252) + 1)|0;
      $k = $253;
     }
     break;
    }
    case 2:  {
     $k = 0;
     while(1) {
      $254 = $k;
      $255 = $nk;
      $256 = ($254|0)<($255|0);
      if (!($256)) {
       break L113;
      }
      $257 = $k;
      $258 = $2;
      $259 = (($258) + ($257)|0);
      $260 = HEAP8[$259>>0]|0;
      $261 = $260&255;
      $262 = $k;
      $263 = $prior;
      $264 = (($263) + ($262)|0);
      $265 = HEAP8[$264>>0]|0;
      $266 = $265&255;
      $267 = (($261) + ($266))|0;
      $268 = $267 & 255;
      $269 = $268&255;
      $270 = $k;
      $271 = $cur;
      $272 = (($271) + ($270)|0);
      HEAP8[$272>>0] = $269;
      $273 = $k;
      $274 = (($273) + 1)|0;
      $k = $274;
     }
     break;
    }
    case 3:  {
     $k = 0;
     while(1) {
      $275 = $k;
      $276 = $nk;
      $277 = ($275|0)<($276|0);
      if (!($277)) {
       break L113;
      }
      $278 = $k;
      $279 = $2;
      $280 = (($279) + ($278)|0);
      $281 = HEAP8[$280>>0]|0;
      $282 = $281&255;
      $283 = $k;
      $284 = $prior;
      $285 = (($284) + ($283)|0);
      $286 = HEAP8[$285>>0]|0;
      $287 = $286&255;
      $288 = $k;
      $289 = $filter_bytes;
      $290 = (($288) - ($289))|0;
      $291 = $cur;
      $292 = (($291) + ($290)|0);
      $293 = HEAP8[$292>>0]|0;
      $294 = $293&255;
      $295 = (($287) + ($294))|0;
      $296 = $295 >> 1;
      $297 = (($282) + ($296))|0;
      $298 = $297 & 255;
      $299 = $298&255;
      $300 = $k;
      $301 = $cur;
      $302 = (($301) + ($300)|0);
      HEAP8[$302>>0] = $299;
      $303 = $k;
      $304 = (($303) + 1)|0;
      $k = $304;
     }
     break;
    }
    case 4:  {
     $k = 0;
     while(1) {
      $305 = $k;
      $306 = $nk;
      $307 = ($305|0)<($306|0);
      if (!($307)) {
       break L113;
      }
      $308 = $k;
      $309 = $2;
      $310 = (($309) + ($308)|0);
      $311 = HEAP8[$310>>0]|0;
      $312 = $311&255;
      $313 = $k;
      $314 = $filter_bytes;
      $315 = (($313) - ($314))|0;
      $316 = $cur;
      $317 = (($316) + ($315)|0);
      $318 = HEAP8[$317>>0]|0;
      $319 = $318&255;
      $320 = $k;
      $321 = $prior;
      $322 = (($321) + ($320)|0);
      $323 = HEAP8[$322>>0]|0;
      $324 = $323&255;
      $325 = $k;
      $326 = $filter_bytes;
      $327 = (($325) - ($326))|0;
      $328 = $prior;
      $329 = (($328) + ($327)|0);
      $330 = HEAP8[$329>>0]|0;
      $331 = $330&255;
      $332 = (__ZL11stbi__paethiii($319,$324,$331)|0);
      $333 = (($312) + ($332))|0;
      $334 = $333 & 255;
      $335 = $334&255;
      $336 = $k;
      $337 = $cur;
      $338 = (($337) + ($336)|0);
      HEAP8[$338>>0] = $335;
      $339 = $k;
      $340 = (($339) + 1)|0;
      $k = $340;
     }
     break;
    }
    case 5:  {
     $k = 0;
     while(1) {
      $341 = $k;
      $342 = $nk;
      $343 = ($341|0)<($342|0);
      if (!($343)) {
       break L113;
      }
      $344 = $k;
      $345 = $2;
      $346 = (($345) + ($344)|0);
      $347 = HEAP8[$346>>0]|0;
      $348 = $347&255;
      $349 = $k;
      $350 = $filter_bytes;
      $351 = (($349) - ($350))|0;
      $352 = $cur;
      $353 = (($352) + ($351)|0);
      $354 = HEAP8[$353>>0]|0;
      $355 = $354&255;
      $356 = $355 >> 1;
      $357 = (($348) + ($356))|0;
      $358 = $357 & 255;
      $359 = $358&255;
      $360 = $k;
      $361 = $cur;
      $362 = (($361) + ($360)|0);
      HEAP8[$362>>0] = $359;
      $363 = $k;
      $364 = (($363) + 1)|0;
      $k = $364;
     }
     break;
    }
    case 6:  {
     $k = 0;
     while(1) {
      $365 = $k;
      $366 = $nk;
      $367 = ($365|0)<($366|0);
      if (!($367)) {
       break L113;
      }
      $368 = $k;
      $369 = $2;
      $370 = (($369) + ($368)|0);
      $371 = HEAP8[$370>>0]|0;
      $372 = $371&255;
      $373 = $k;
      $374 = $filter_bytes;
      $375 = (($373) - ($374))|0;
      $376 = $cur;
      $377 = (($376) + ($375)|0);
      $378 = HEAP8[$377>>0]|0;
      $379 = $378&255;
      $380 = (__ZL11stbi__paethiii($379,0,0)|0);
      $381 = (($372) + ($380))|0;
      $382 = $381 & 255;
      $383 = $382&255;
      $384 = $k;
      $385 = $cur;
      $386 = (($385) + ($384)|0);
      HEAP8[$386>>0] = $383;
      $387 = $k;
      $388 = (($387) + 1)|0;
      $k = $388;
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   $389 = $nk;
   $390 = $2;
   $391 = (($390) + ($389)|0);
   $2 = $391;
  }
  $693 = $j;
  $694 = (($693) + 1)|0;
  $j = $694;
 }
 if ((label|0) == 15) {
  $91 = (__ZL9stbi__errPKc(3420)|0);
  $0 = $91;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 else if ((label|0) == 18) {
  ___assert_fail((3435|0),(2464|0),4011,(3375|0));
  // unreachable;
 }
 else if ((label|0) == 62) {
  ___assert_fail((3461|0),(2464|0),4064,(3375|0));
  // unreachable;
 }
 else if ((label|0) == 107) {
  $695 = $7;
  $696 = ($695|0)<(8);
  L143: do {
   if ($696) {
    $j = 0;
    L145: while(1) {
     $697 = $j;
     $698 = $6;
     $699 = ($697>>>0)<($698>>>0);
     if (!($699)) {
      break L143;
     }
     $700 = $1;
     $701 = ((($700)) + 12|0);
     $702 = HEAP32[$701>>2]|0;
     $703 = $stride;
     $704 = $j;
     $705 = Math_imul($703, $704)|0;
     $706 = (($702) + ($705)|0);
     $cur1 = $706;
     $707 = $1;
     $708 = ((($707)) + 12|0);
     $709 = HEAP32[$708>>2]|0;
     $710 = $stride;
     $711 = $j;
     $712 = Math_imul($710, $711)|0;
     $713 = (($709) + ($712)|0);
     $714 = $5;
     $715 = $4;
     $716 = Math_imul($714, $715)|0;
     $717 = (($713) + ($716)|0);
     $718 = $img_width_bytes;
     $719 = (0 - ($718))|0;
     $720 = (($717) + ($719)|0);
     $in = $720;
     $721 = $8;
     $722 = ($721|0)==(0);
     if ($722) {
      $723 = $7;
      $724 = (2935 + ($723)|0);
      $725 = HEAP8[$724>>0]|0;
      $726 = $725&255;
      $728 = $726;
     } else {
      $728 = 1;
     }
     $727 = $728&255;
     $scale = $727;
     $729 = $7;
     $730 = ($729|0)==(4);
     do {
      if ($730) {
       $731 = $5;
       $732 = $img_n;
       $733 = Math_imul($731, $732)|0;
       $k = $733;
       while(1) {
        $734 = $k;
        $735 = ($734|0)>=(2);
        if (!($735)) {
         break;
        }
        $736 = $scale;
        $737 = $736&255;
        $738 = $in;
        $739 = HEAP8[$738>>0]|0;
        $740 = $739&255;
        $741 = $740 >> 4;
        $742 = Math_imul($737, $741)|0;
        $743 = $742&255;
        $744 = $cur1;
        $745 = ((($744)) + 1|0);
        $cur1 = $745;
        HEAP8[$744>>0] = $743;
        $746 = $scale;
        $747 = $746&255;
        $748 = $in;
        $749 = HEAP8[$748>>0]|0;
        $750 = $749&255;
        $751 = $750 & 15;
        $752 = Math_imul($747, $751)|0;
        $753 = $752&255;
        $754 = $cur1;
        $755 = ((($754)) + 1|0);
        $cur1 = $755;
        HEAP8[$754>>0] = $753;
        $756 = $k;
        $757 = (($756) - 2)|0;
        $k = $757;
        $758 = $in;
        $759 = ((($758)) + 1|0);
        $in = $759;
       }
       $760 = $k;
       $761 = ($760|0)>(0);
       if ($761) {
        $762 = $scale;
        $763 = $762&255;
        $764 = $in;
        $765 = HEAP8[$764>>0]|0;
        $766 = $765&255;
        $767 = $766 >> 4;
        $768 = Math_imul($763, $767)|0;
        $769 = $768&255;
        $770 = $cur1;
        $771 = ((($770)) + 1|0);
        $cur1 = $771;
        HEAP8[$770>>0] = $769;
       }
      } else {
       $772 = $7;
       $773 = ($772|0)==(2);
       if ($773) {
        $774 = $5;
        $775 = $img_n;
        $776 = Math_imul($774, $775)|0;
        $k = $776;
        while(1) {
         $777 = $k;
         $778 = ($777|0)>=(4);
         if (!($778)) {
          break;
         }
         $779 = $scale;
         $780 = $779&255;
         $781 = $in;
         $782 = HEAP8[$781>>0]|0;
         $783 = $782&255;
         $784 = $783 >> 6;
         $785 = Math_imul($780, $784)|0;
         $786 = $785&255;
         $787 = $cur1;
         $788 = ((($787)) + 1|0);
         $cur1 = $788;
         HEAP8[$787>>0] = $786;
         $789 = $scale;
         $790 = $789&255;
         $791 = $in;
         $792 = HEAP8[$791>>0]|0;
         $793 = $792&255;
         $794 = $793 >> 4;
         $795 = $794 & 3;
         $796 = Math_imul($790, $795)|0;
         $797 = $796&255;
         $798 = $cur1;
         $799 = ((($798)) + 1|0);
         $cur1 = $799;
         HEAP8[$798>>0] = $797;
         $800 = $scale;
         $801 = $800&255;
         $802 = $in;
         $803 = HEAP8[$802>>0]|0;
         $804 = $803&255;
         $805 = $804 >> 2;
         $806 = $805 & 3;
         $807 = Math_imul($801, $806)|0;
         $808 = $807&255;
         $809 = $cur1;
         $810 = ((($809)) + 1|0);
         $cur1 = $810;
         HEAP8[$809>>0] = $808;
         $811 = $scale;
         $812 = $811&255;
         $813 = $in;
         $814 = HEAP8[$813>>0]|0;
         $815 = $814&255;
         $816 = $815 & 3;
         $817 = Math_imul($812, $816)|0;
         $818 = $817&255;
         $819 = $cur1;
         $820 = ((($819)) + 1|0);
         $cur1 = $820;
         HEAP8[$819>>0] = $818;
         $821 = $k;
         $822 = (($821) - 4)|0;
         $k = $822;
         $823 = $in;
         $824 = ((($823)) + 1|0);
         $in = $824;
        }
        $825 = $k;
        $826 = ($825|0)>(0);
        if ($826) {
         $827 = $scale;
         $828 = $827&255;
         $829 = $in;
         $830 = HEAP8[$829>>0]|0;
         $831 = $830&255;
         $832 = $831 >> 6;
         $833 = Math_imul($828, $832)|0;
         $834 = $833&255;
         $835 = $cur1;
         $836 = ((($835)) + 1|0);
         $cur1 = $836;
         HEAP8[$835>>0] = $834;
        }
        $837 = $k;
        $838 = ($837|0)>(1);
        if ($838) {
         $839 = $scale;
         $840 = $839&255;
         $841 = $in;
         $842 = HEAP8[$841>>0]|0;
         $843 = $842&255;
         $844 = $843 >> 4;
         $845 = $844 & 3;
         $846 = Math_imul($840, $845)|0;
         $847 = $846&255;
         $848 = $cur1;
         $849 = ((($848)) + 1|0);
         $cur1 = $849;
         HEAP8[$848>>0] = $847;
        }
        $850 = $k;
        $851 = ($850|0)>(2);
        if (!($851)) {
         break;
        }
        $852 = $scale;
        $853 = $852&255;
        $854 = $in;
        $855 = HEAP8[$854>>0]|0;
        $856 = $855&255;
        $857 = $856 >> 2;
        $858 = $857 & 3;
        $859 = Math_imul($853, $858)|0;
        $860 = $859&255;
        $861 = $cur1;
        $862 = ((($861)) + 1|0);
        $cur1 = $862;
        HEAP8[$861>>0] = $860;
        break;
       }
       $863 = $7;
       $864 = ($863|0)==(1);
       if ($864) {
        $865 = $5;
        $866 = $img_n;
        $867 = Math_imul($865, $866)|0;
        $k = $867;
        while(1) {
         $868 = $k;
         $869 = ($868|0)>=(8);
         if (!($869)) {
          break;
         }
         $870 = $scale;
         $871 = $870&255;
         $872 = $in;
         $873 = HEAP8[$872>>0]|0;
         $874 = $873&255;
         $875 = $874 >> 7;
         $876 = Math_imul($871, $875)|0;
         $877 = $876&255;
         $878 = $cur1;
         $879 = ((($878)) + 1|0);
         $cur1 = $879;
         HEAP8[$878>>0] = $877;
         $880 = $scale;
         $881 = $880&255;
         $882 = $in;
         $883 = HEAP8[$882>>0]|0;
         $884 = $883&255;
         $885 = $884 >> 6;
         $886 = $885 & 1;
         $887 = Math_imul($881, $886)|0;
         $888 = $887&255;
         $889 = $cur1;
         $890 = ((($889)) + 1|0);
         $cur1 = $890;
         HEAP8[$889>>0] = $888;
         $891 = $scale;
         $892 = $891&255;
         $893 = $in;
         $894 = HEAP8[$893>>0]|0;
         $895 = $894&255;
         $896 = $895 >> 5;
         $897 = $896 & 1;
         $898 = Math_imul($892, $897)|0;
         $899 = $898&255;
         $900 = $cur1;
         $901 = ((($900)) + 1|0);
         $cur1 = $901;
         HEAP8[$900>>0] = $899;
         $902 = $scale;
         $903 = $902&255;
         $904 = $in;
         $905 = HEAP8[$904>>0]|0;
         $906 = $905&255;
         $907 = $906 >> 4;
         $908 = $907 & 1;
         $909 = Math_imul($903, $908)|0;
         $910 = $909&255;
         $911 = $cur1;
         $912 = ((($911)) + 1|0);
         $cur1 = $912;
         HEAP8[$911>>0] = $910;
         $913 = $scale;
         $914 = $913&255;
         $915 = $in;
         $916 = HEAP8[$915>>0]|0;
         $917 = $916&255;
         $918 = $917 >> 3;
         $919 = $918 & 1;
         $920 = Math_imul($914, $919)|0;
         $921 = $920&255;
         $922 = $cur1;
         $923 = ((($922)) + 1|0);
         $cur1 = $923;
         HEAP8[$922>>0] = $921;
         $924 = $scale;
         $925 = $924&255;
         $926 = $in;
         $927 = HEAP8[$926>>0]|0;
         $928 = $927&255;
         $929 = $928 >> 2;
         $930 = $929 & 1;
         $931 = Math_imul($925, $930)|0;
         $932 = $931&255;
         $933 = $cur1;
         $934 = ((($933)) + 1|0);
         $cur1 = $934;
         HEAP8[$933>>0] = $932;
         $935 = $scale;
         $936 = $935&255;
         $937 = $in;
         $938 = HEAP8[$937>>0]|0;
         $939 = $938&255;
         $940 = $939 >> 1;
         $941 = $940 & 1;
         $942 = Math_imul($936, $941)|0;
         $943 = $942&255;
         $944 = $cur1;
         $945 = ((($944)) + 1|0);
         $cur1 = $945;
         HEAP8[$944>>0] = $943;
         $946 = $scale;
         $947 = $946&255;
         $948 = $in;
         $949 = HEAP8[$948>>0]|0;
         $950 = $949&255;
         $951 = $950 & 1;
         $952 = Math_imul($947, $951)|0;
         $953 = $952&255;
         $954 = $cur1;
         $955 = ((($954)) + 1|0);
         $cur1 = $955;
         HEAP8[$954>>0] = $953;
         $956 = $k;
         $957 = (($956) - 8)|0;
         $k = $957;
         $958 = $in;
         $959 = ((($958)) + 1|0);
         $in = $959;
        }
        $960 = $k;
        $961 = ($960|0)>(0);
        if ($961) {
         $962 = $scale;
         $963 = $962&255;
         $964 = $in;
         $965 = HEAP8[$964>>0]|0;
         $966 = $965&255;
         $967 = $966 >> 7;
         $968 = Math_imul($963, $967)|0;
         $969 = $968&255;
         $970 = $cur1;
         $971 = ((($970)) + 1|0);
         $cur1 = $971;
         HEAP8[$970>>0] = $969;
        }
        $972 = $k;
        $973 = ($972|0)>(1);
        if ($973) {
         $974 = $scale;
         $975 = $974&255;
         $976 = $in;
         $977 = HEAP8[$976>>0]|0;
         $978 = $977&255;
         $979 = $978 >> 6;
         $980 = $979 & 1;
         $981 = Math_imul($975, $980)|0;
         $982 = $981&255;
         $983 = $cur1;
         $984 = ((($983)) + 1|0);
         $cur1 = $984;
         HEAP8[$983>>0] = $982;
        }
        $985 = $k;
        $986 = ($985|0)>(2);
        if ($986) {
         $987 = $scale;
         $988 = $987&255;
         $989 = $in;
         $990 = HEAP8[$989>>0]|0;
         $991 = $990&255;
         $992 = $991 >> 5;
         $993 = $992 & 1;
         $994 = Math_imul($988, $993)|0;
         $995 = $994&255;
         $996 = $cur1;
         $997 = ((($996)) + 1|0);
         $cur1 = $997;
         HEAP8[$996>>0] = $995;
        }
        $998 = $k;
        $999 = ($998|0)>(3);
        if ($999) {
         $1000 = $scale;
         $1001 = $1000&255;
         $1002 = $in;
         $1003 = HEAP8[$1002>>0]|0;
         $1004 = $1003&255;
         $1005 = $1004 >> 4;
         $1006 = $1005 & 1;
         $1007 = Math_imul($1001, $1006)|0;
         $1008 = $1007&255;
         $1009 = $cur1;
         $1010 = ((($1009)) + 1|0);
         $cur1 = $1010;
         HEAP8[$1009>>0] = $1008;
        }
        $1011 = $k;
        $1012 = ($1011|0)>(4);
        if ($1012) {
         $1013 = $scale;
         $1014 = $1013&255;
         $1015 = $in;
         $1016 = HEAP8[$1015>>0]|0;
         $1017 = $1016&255;
         $1018 = $1017 >> 3;
         $1019 = $1018 & 1;
         $1020 = Math_imul($1014, $1019)|0;
         $1021 = $1020&255;
         $1022 = $cur1;
         $1023 = ((($1022)) + 1|0);
         $cur1 = $1023;
         HEAP8[$1022>>0] = $1021;
        }
        $1024 = $k;
        $1025 = ($1024|0)>(5);
        if ($1025) {
         $1026 = $scale;
         $1027 = $1026&255;
         $1028 = $in;
         $1029 = HEAP8[$1028>>0]|0;
         $1030 = $1029&255;
         $1031 = $1030 >> 2;
         $1032 = $1031 & 1;
         $1033 = Math_imul($1027, $1032)|0;
         $1034 = $1033&255;
         $1035 = $cur1;
         $1036 = ((($1035)) + 1|0);
         $cur1 = $1036;
         HEAP8[$1035>>0] = $1034;
        }
        $1037 = $k;
        $1038 = ($1037|0)>(6);
        if ($1038) {
         $1039 = $scale;
         $1040 = $1039&255;
         $1041 = $in;
         $1042 = HEAP8[$1041>>0]|0;
         $1043 = $1042&255;
         $1044 = $1043 >> 1;
         $1045 = $1044 & 1;
         $1046 = Math_imul($1040, $1045)|0;
         $1047 = $1046&255;
         $1048 = $cur1;
         $1049 = ((($1048)) + 1|0);
         $cur1 = $1049;
         HEAP8[$1048>>0] = $1047;
        }
       }
      }
     } while(0);
     $1050 = $img_n;
     $1051 = $4;
     $1052 = ($1050|0)!=($1051|0);
     L198: do {
      if ($1052) {
       $1053 = $1;
       $1054 = ((($1053)) + 12|0);
       $1055 = HEAP32[$1054>>2]|0;
       $1056 = $stride;
       $1057 = $j;
       $1058 = Math_imul($1056, $1057)|0;
       $1059 = (($1055) + ($1058)|0);
       $cur1 = $1059;
       $1060 = $img_n;
       $1061 = ($1060|0)==(1);
       if ($1061) {
        $1062 = $5;
        $1063 = (($1062) - 1)|0;
        $q = $1063;
        while(1) {
         $1064 = $q;
         $1065 = ($1064|0)>=(0);
         if (!($1065)) {
          break L198;
         }
         $1066 = $q;
         $1067 = $1066<<1;
         $1068 = (($1067) + 1)|0;
         $1069 = $cur1;
         $1070 = (($1069) + ($1068)|0);
         HEAP8[$1070>>0] = -1;
         $1071 = $q;
         $1072 = $cur1;
         $1073 = (($1072) + ($1071)|0);
         $1074 = HEAP8[$1073>>0]|0;
         $1075 = $q;
         $1076 = $1075<<1;
         $1077 = (($1076) + 0)|0;
         $1078 = $cur1;
         $1079 = (($1078) + ($1077)|0);
         HEAP8[$1079>>0] = $1074;
         $1080 = $q;
         $1081 = (($1080) + -1)|0;
         $q = $1081;
        }
       }
       $1082 = $img_n;
       $1083 = ($1082|0)==(3);
       if (!($1083)) {
        break L145;
       }
       $1084 = $5;
       $1085 = (($1084) - 1)|0;
       $q = $1085;
       while(1) {
        $1086 = $q;
        $1087 = ($1086|0)>=(0);
        if (!($1087)) {
         break L198;
        }
        $1088 = $q;
        $1089 = $1088<<2;
        $1090 = (($1089) + 3)|0;
        $1091 = $cur1;
        $1092 = (($1091) + ($1090)|0);
        HEAP8[$1092>>0] = -1;
        $1093 = $q;
        $1094 = ($1093*3)|0;
        $1095 = (($1094) + 2)|0;
        $1096 = $cur1;
        $1097 = (($1096) + ($1095)|0);
        $1098 = HEAP8[$1097>>0]|0;
        $1099 = $q;
        $1100 = $1099<<2;
        $1101 = (($1100) + 2)|0;
        $1102 = $cur1;
        $1103 = (($1102) + ($1101)|0);
        HEAP8[$1103>>0] = $1098;
        $1104 = $q;
        $1105 = ($1104*3)|0;
        $1106 = (($1105) + 1)|0;
        $1107 = $cur1;
        $1108 = (($1107) + ($1106)|0);
        $1109 = HEAP8[$1108>>0]|0;
        $1110 = $q;
        $1111 = $1110<<2;
        $1112 = (($1111) + 1)|0;
        $1113 = $cur1;
        $1114 = (($1113) + ($1112)|0);
        HEAP8[$1114>>0] = $1109;
        $1115 = $q;
        $1116 = ($1115*3)|0;
        $1117 = (($1116) + 0)|0;
        $1118 = $cur1;
        $1119 = (($1118) + ($1117)|0);
        $1120 = HEAP8[$1119>>0]|0;
        $1121 = $q;
        $1122 = $1121<<2;
        $1123 = (($1122) + 0)|0;
        $1124 = $cur1;
        $1125 = (($1124) + ($1123)|0);
        HEAP8[$1125>>0] = $1120;
        $1126 = $q;
        $1127 = (($1126) + -1)|0;
        $q = $1127;
       }
      }
     } while(0);
     $1128 = $j;
     $1129 = (($1128) + 1)|0;
     $j = $1129;
    }
    ___assert_fail((3478|0),(2464|0),4144,(3375|0));
    // unreachable;
   }
  } while(0);
  $0 = 1;
  $1130 = $0;
  STACKTOP = sp;return ($1130|0);
 }
 return (0)|0;
}
function __ZL11stbi__paethiii($a,$b,$c) {
 $a = $a|0;
 $b = $b|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $pa = 0, $pb = 0, $pc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $b;
 $3 = $c;
 $4 = $1;
 $5 = $2;
 $6 = (($4) + ($5))|0;
 $7 = $3;
 $8 = (($6) - ($7))|0;
 $p = $8;
 $9 = $p;
 $10 = $1;
 $11 = (($9) - ($10))|0;
 $12 = (Math_abs(($11|0))|0);
 $pa = $12;
 $13 = $p;
 $14 = $2;
 $15 = (($13) - ($14))|0;
 $16 = (Math_abs(($15|0))|0);
 $pb = $16;
 $17 = $p;
 $18 = $3;
 $19 = (($17) - ($18))|0;
 $20 = (Math_abs(($19|0))|0);
 $pc = $20;
 $21 = $pa;
 $22 = $pb;
 $23 = ($21|0)<=($22|0);
 if ($23) {
  $24 = $pa;
  $25 = $pc;
  $26 = ($24|0)<=($25|0);
  if ($26) {
   $27 = $1;
   $0 = $27;
   $33 = $0;
   STACKTOP = sp;return ($33|0);
  }
 }
 $28 = $pb;
 $29 = $pc;
 $30 = ($28|0)<=($29|0);
 if ($30) {
  $31 = $2;
  $0 = $31;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 } else {
  $32 = $3;
  $0 = $32;
  $33 = $0;
  STACKTOP = sp;return ($33|0);
 }
 return (0)|0;
}
function __ZL26stbi__compute_transparencyP9stbi__pngPhi($z,$tc,$out_n) {
 $z = $z|0;
 $tc = $tc|0;
 $out_n = $out_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $p = 0, $pixel_count = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $tc;
 $2 = $out_n;
 $3 = $0;
 $4 = HEAP32[$3>>2]|0;
 $s = $4;
 $5 = $s;
 $6 = HEAP32[$5>>2]|0;
 $7 = $s;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($6, $9)|0;
 $pixel_count = $10;
 $11 = $0;
 $12 = ((($11)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 $p = $13;
 $14 = $2;
 $15 = ($14|0)==(2);
 $16 = $2;
 $17 = ($16|0)==(4);
 $or$cond = $15 | $17;
 if (!($or$cond)) {
  ___assert_fail((3489|0),(2464|0),4209,(3514|0));
  // unreachable;
 }
 $18 = $2;
 $19 = ($18|0)==(2);
 $i = 0;
 if ($19) {
  while(1) {
   $20 = $i;
   $21 = $pixel_count;
   $22 = ($20>>>0)<($21>>>0);
   if (!($22)) {
    break;
   }
   $23 = $p;
   $24 = HEAP8[$23>>0]|0;
   $25 = $24&255;
   $26 = $1;
   $27 = HEAP8[$26>>0]|0;
   $28 = $27&255;
   $29 = ($25|0)==($28|0);
   $30 = $29 ? 0 : 255;
   $31 = $30&255;
   $32 = $p;
   $33 = ((($32)) + 1|0);
   HEAP8[$33>>0] = $31;
   $34 = $p;
   $35 = ((($34)) + 2|0);
   $p = $35;
   $36 = $i;
   $37 = (($36) + 1)|0;
   $i = $37;
  }
  STACKTOP = sp;return 1;
 }
 while(1) {
  $38 = $i;
  $39 = $pixel_count;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = HEAP8[$41>>0]|0;
  $43 = $42&255;
  $44 = $1;
  $45 = HEAP8[$44>>0]|0;
  $46 = $45&255;
  $47 = ($43|0)==($46|0);
  if ($47) {
   $48 = $p;
   $49 = ((($48)) + 1|0);
   $50 = HEAP8[$49>>0]|0;
   $51 = $50&255;
   $52 = $1;
   $53 = ((($52)) + 1|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = ($51|0)==($55|0);
   if ($56) {
    $57 = $p;
    $58 = ((($57)) + 2|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = $1;
    $62 = ((($61)) + 2|0);
    $63 = HEAP8[$62>>0]|0;
    $64 = $63&255;
    $65 = ($60|0)==($64|0);
    if ($65) {
     $66 = $p;
     $67 = ((($66)) + 3|0);
     HEAP8[$67>>0] = 0;
    }
   }
  }
  $68 = $p;
  $69 = ((($68)) + 4|0);
  $p = $69;
  $70 = $i;
  $71 = (($70) + 1)|0;
  $i = $71;
 }
 STACKTOP = sp;return 1;
}
function __ZL15stbi__de_iphoneP9stbi__png($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a = 0, $i = 0, $p = 0, $pixel_count = 0, $s = 0, $t = 0, $t1 = 0, $t2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $0;
 $2 = HEAP32[$1>>2]|0;
 $s = $2;
 $3 = $s;
 $4 = HEAP32[$3>>2]|0;
 $5 = $s;
 $6 = ((($5)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = Math_imul($4, $7)|0;
 $pixel_count = $8;
 $9 = $0;
 $10 = ((($9)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $p = $11;
 $12 = $s;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(3);
 if ($15) {
  $i = 0;
  while(1) {
   $16 = $i;
   $17 = $pixel_count;
   $18 = ($16>>>0)<($17>>>0);
   if (!($18)) {
    break;
   }
   $19 = $p;
   $20 = HEAP8[$19>>0]|0;
   $t = $20;
   $21 = $p;
   $22 = ((($21)) + 2|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $p;
   HEAP8[$24>>0] = $23;
   $25 = $t;
   $26 = $p;
   $27 = ((($26)) + 2|0);
   HEAP8[$27>>0] = $25;
   $28 = $p;
   $29 = ((($28)) + 3|0);
   $p = $29;
   $30 = $i;
   $31 = (($30) + 1)|0;
   $i = $31;
  }
  STACKTOP = sp;return;
 }
 $32 = $s;
 $33 = ((($32)) + 12|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ($34|0)==(4);
 if (!($35)) {
  ___assert_fail((3541|0),(2464|0),4290,(3559|0));
  // unreachable;
 }
 $36 = HEAP32[1895]|0;
 $37 = ($36|0)!=(0);
 $i = 0;
 if (!($37)) {
  while(1) {
   $86 = $i;
   $87 = $pixel_count;
   $88 = ($86>>>0)<($87>>>0);
   if (!($88)) {
    break;
   }
   $89 = $p;
   $90 = HEAP8[$89>>0]|0;
   $t2 = $90;
   $91 = $p;
   $92 = ((($91)) + 2|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $p;
   HEAP8[$94>>0] = $93;
   $95 = $t2;
   $96 = $p;
   $97 = ((($96)) + 2|0);
   HEAP8[$97>>0] = $95;
   $98 = $p;
   $99 = ((($98)) + 4|0);
   $p = $99;
   $100 = $i;
   $101 = (($100) + 1)|0;
   $i = $101;
  }
  STACKTOP = sp;return;
 }
 while(1) {
  $38 = $i;
  $39 = $pixel_count;
  $40 = ($38>>>0)<($39>>>0);
  if (!($40)) {
   break;
  }
  $41 = $p;
  $42 = ((($41)) + 3|0);
  $43 = HEAP8[$42>>0]|0;
  $a = $43;
  $44 = $p;
  $45 = HEAP8[$44>>0]|0;
  $t1 = $45;
  $46 = $a;
  $47 = ($46<<24>>24)!=(0);
  $48 = $p;
  $49 = ((($48)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  if ($47) {
   $51 = $50&255;
   $52 = ($51*255)|0;
   $53 = $a;
   $54 = $53&255;
   $55 = (($52|0) / ($54|0))&-1;
   $56 = $55&255;
   $57 = $p;
   HEAP8[$57>>0] = $56;
   $58 = $p;
   $59 = ((($58)) + 1|0);
   $60 = HEAP8[$59>>0]|0;
   $61 = $60&255;
   $62 = ($61*255)|0;
   $63 = $a;
   $64 = $63&255;
   $65 = (($62|0) / ($64|0))&-1;
   $66 = $65&255;
   $67 = $p;
   $68 = ((($67)) + 1|0);
   HEAP8[$68>>0] = $66;
   $69 = $t1;
   $70 = $69&255;
   $71 = ($70*255)|0;
   $72 = $a;
   $73 = $72&255;
   $74 = (($71|0) / ($73|0))&-1;
   $75 = $74&255;
   $76 = $p;
   $77 = ((($76)) + 2|0);
   HEAP8[$77>>0] = $75;
  } else {
   $78 = $p;
   HEAP8[$78>>0] = $50;
   $79 = $t1;
   $80 = $p;
   $81 = ((($80)) + 2|0);
   HEAP8[$81>>0] = $79;
  }
  $82 = $p;
  $83 = ((($82)) + 4|0);
  $p = $83;
  $84 = $i;
  $85 = (($84) + 1)|0;
  $i = $85;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__expand_png_paletteP9stbi__pngPhii($a,$palette,$len,$pal_img_n) {
 $a = $a|0;
 $palette = $palette|0;
 $len = $len|0;
 $pal_img_n = $pal_img_n|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $i = 0, $n = 0, $n1 = 0, $orig = 0, $p = 0, $pixel_count = 0, $temp_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $a;
 $2 = $palette;
 $3 = $len;
 $4 = $pal_img_n;
 $5 = $1;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$6>>2]|0;
 $8 = $1;
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($9)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = Math_imul($7, $11)|0;
 $pixel_count = $12;
 $13 = $1;
 $14 = ((($13)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $orig = $15;
 $16 = $pixel_count;
 $17 = $4;
 $18 = Math_imul($16, $17)|0;
 $19 = (__ZL12stbi__mallocj($18)|0);
 $p = $19;
 $20 = $p;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = (__ZL9stbi__errPKc(2292)|0);
  $0 = $22;
  $103 = $0;
  STACKTOP = sp;return ($103|0);
 }
 $23 = $p;
 $temp_out = $23;
 $24 = $4;
 $25 = ($24|0)==(3);
 $i = 0;
 L5: do {
  if ($25) {
   while(1) {
    $26 = $i;
    $27 = $pixel_count;
    $28 = ($26>>>0)<($27>>>0);
    if (!($28)) {
     break L5;
    }
    $29 = $i;
    $30 = $orig;
    $31 = (($30) + ($29)|0);
    $32 = HEAP8[$31>>0]|0;
    $33 = $32&255;
    $34 = $33<<2;
    $n = $34;
    $35 = $n;
    $36 = $2;
    $37 = (($36) + ($35)|0);
    $38 = HEAP8[$37>>0]|0;
    $39 = $p;
    HEAP8[$39>>0] = $38;
    $40 = $n;
    $41 = (($40) + 1)|0;
    $42 = $2;
    $43 = (($42) + ($41)|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $p;
    $46 = ((($45)) + 1|0);
    HEAP8[$46>>0] = $44;
    $47 = $n;
    $48 = (($47) + 2)|0;
    $49 = $2;
    $50 = (($49) + ($48)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $p;
    $53 = ((($52)) + 2|0);
    HEAP8[$53>>0] = $51;
    $54 = $p;
    $55 = ((($54)) + 3|0);
    $p = $55;
    $56 = $i;
    $57 = (($56) + 1)|0;
    $i = $57;
   }
  } else {
   while(1) {
    $58 = $i;
    $59 = $pixel_count;
    $60 = ($58>>>0)<($59>>>0);
    if (!($60)) {
     break L5;
    }
    $61 = $i;
    $62 = $orig;
    $63 = (($62) + ($61)|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = $65<<2;
    $n1 = $66;
    $67 = $n1;
    $68 = $2;
    $69 = (($68) + ($67)|0);
    $70 = HEAP8[$69>>0]|0;
    $71 = $p;
    HEAP8[$71>>0] = $70;
    $72 = $n1;
    $73 = (($72) + 1)|0;
    $74 = $2;
    $75 = (($74) + ($73)|0);
    $76 = HEAP8[$75>>0]|0;
    $77 = $p;
    $78 = ((($77)) + 1|0);
    HEAP8[$78>>0] = $76;
    $79 = $n1;
    $80 = (($79) + 2)|0;
    $81 = $2;
    $82 = (($81) + ($80)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $p;
    $85 = ((($84)) + 2|0);
    HEAP8[$85>>0] = $83;
    $86 = $n1;
    $87 = (($86) + 3)|0;
    $88 = $2;
    $89 = (($88) + ($87)|0);
    $90 = HEAP8[$89>>0]|0;
    $91 = $p;
    $92 = ((($91)) + 3|0);
    HEAP8[$92>>0] = $90;
    $93 = $p;
    $94 = ((($93)) + 4|0);
    $p = $94;
    $95 = $i;
    $96 = (($95) + 1)|0;
    $i = $96;
   }
  }
 } while(0);
 $97 = $1;
 $98 = ((($97)) + 12|0);
 $99 = HEAP32[$98>>2]|0;
 _free($99);
 $100 = $temp_out;
 $101 = $1;
 $102 = ((($101)) + 12|0);
 HEAP32[$102>>2] = $100;
 $0 = 1;
 $103 = $0;
 STACKTOP = sp;return ($103|0);
}
function __ZL20stbi__convert_formatPhiijj($data,$img_n,$req_comp,$x,$y) {
 $data = $data|0;
 $img_n = $img_n|0;
 $req_comp = $req_comp|0;
 $x = $x|0;
 $y = $y|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $dest = 0, $good = 0, $i = 0, $j = 0, $or$cond = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $img_n;
 $3 = $req_comp;
 $4 = $x;
 $5 = $y;
 $6 = $3;
 $7 = $2;
 $8 = ($6|0)==($7|0);
 if ($8) {
  $9 = $1;
  $0 = $9;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $10 = $3;
 $11 = ($10|0)>=(1);
 $12 = $3;
 $13 = ($12|0)<=(4);
 $or$cond = $11 & $13;
 if (!($or$cond)) {
  ___assert_fail((3600|0),(2464|0),1348,(3631|0));
  // unreachable;
 }
 $14 = $3;
 $15 = $4;
 $16 = Math_imul($14, $15)|0;
 $17 = $5;
 $18 = Math_imul($16, $17)|0;
 $19 = (__ZL12stbi__mallocj($18)|0);
 $good = $19;
 $20 = $good;
 $21 = ($20|0)==(0|0);
 if ($21) {
  $22 = $1;
  _free($22);
  $23 = (__ZL9stbi__errPKc(2292)|0);
  $24 = ($23|0)!=(0);
  $25 = $24 ? 0 : 0;
  $26 = $25;
  $0 = $26;
  $301 = $0;
  STACKTOP = sp;return ($301|0);
 }
 $j = 0;
 L12: while(1) {
  $27 = $j;
  $28 = $5;
  $29 = ($27|0)<($28|0);
  $30 = $1;
  if (!($29)) {
   break;
  }
  $31 = $j;
  $32 = $4;
  $33 = Math_imul($31, $32)|0;
  $34 = $2;
  $35 = Math_imul($33, $34)|0;
  $36 = (($30) + ($35)|0);
  $src = $36;
  $37 = $good;
  $38 = $j;
  $39 = $4;
  $40 = Math_imul($38, $39)|0;
  $41 = $3;
  $42 = Math_imul($40, $41)|0;
  $43 = (($37) + ($42)|0);
  $dest = $43;
  $44 = $2;
  $45 = $44<<3;
  $46 = $3;
  $47 = (($45) + ($46))|0;
  L15: do {
   switch ($47|0) {
   case 10:  {
    $48 = $4;
    $49 = (($48) - 1)|0;
    $i = $49;
    while(1) {
     $50 = $i;
     $51 = ($50|0)>=(0);
     if (!($51)) {
      break L15;
     }
     $52 = $src;
     $53 = HEAP8[$52>>0]|0;
     $54 = $dest;
     HEAP8[$54>>0] = $53;
     $55 = $dest;
     $56 = ((($55)) + 1|0);
     HEAP8[$56>>0] = -1;
     $57 = $i;
     $58 = (($57) + -1)|0;
     $i = $58;
     $59 = $src;
     $60 = ((($59)) + 1|0);
     $src = $60;
     $61 = $dest;
     $62 = ((($61)) + 2|0);
     $dest = $62;
    }
    break;
   }
   case 11:  {
    $63 = $4;
    $64 = (($63) - 1)|0;
    $i = $64;
    while(1) {
     $65 = $i;
     $66 = ($65|0)>=(0);
     if (!($66)) {
      break L15;
     }
     $67 = $src;
     $68 = HEAP8[$67>>0]|0;
     $69 = $dest;
     $70 = ((($69)) + 2|0);
     HEAP8[$70>>0] = $68;
     $71 = $dest;
     $72 = ((($71)) + 1|0);
     HEAP8[$72>>0] = $68;
     $73 = $dest;
     HEAP8[$73>>0] = $68;
     $74 = $i;
     $75 = (($74) + -1)|0;
     $i = $75;
     $76 = $src;
     $77 = ((($76)) + 1|0);
     $src = $77;
     $78 = $dest;
     $79 = ((($78)) + 3|0);
     $dest = $79;
    }
    break;
   }
   case 12:  {
    $80 = $4;
    $81 = (($80) - 1)|0;
    $i = $81;
    while(1) {
     $82 = $i;
     $83 = ($82|0)>=(0);
     if (!($83)) {
      break L15;
     }
     $84 = $src;
     $85 = HEAP8[$84>>0]|0;
     $86 = $dest;
     $87 = ((($86)) + 2|0);
     HEAP8[$87>>0] = $85;
     $88 = $dest;
     $89 = ((($88)) + 1|0);
     HEAP8[$89>>0] = $85;
     $90 = $dest;
     HEAP8[$90>>0] = $85;
     $91 = $dest;
     $92 = ((($91)) + 3|0);
     HEAP8[$92>>0] = -1;
     $93 = $i;
     $94 = (($93) + -1)|0;
     $i = $94;
     $95 = $src;
     $96 = ((($95)) + 1|0);
     $src = $96;
     $97 = $dest;
     $98 = ((($97)) + 4|0);
     $dest = $98;
    }
    break;
   }
   case 17:  {
    $99 = $4;
    $100 = (($99) - 1)|0;
    $i = $100;
    while(1) {
     $101 = $i;
     $102 = ($101|0)>=(0);
     if (!($102)) {
      break L15;
     }
     $103 = $src;
     $104 = HEAP8[$103>>0]|0;
     $105 = $dest;
     HEAP8[$105>>0] = $104;
     $106 = $i;
     $107 = (($106) + -1)|0;
     $i = $107;
     $108 = $src;
     $109 = ((($108)) + 2|0);
     $src = $109;
     $110 = $dest;
     $111 = ((($110)) + 1|0);
     $dest = $111;
    }
    break;
   }
   case 19:  {
    $112 = $4;
    $113 = (($112) - 1)|0;
    $i = $113;
    while(1) {
     $114 = $i;
     $115 = ($114|0)>=(0);
     if (!($115)) {
      break L15;
     }
     $116 = $src;
     $117 = HEAP8[$116>>0]|0;
     $118 = $dest;
     $119 = ((($118)) + 2|0);
     HEAP8[$119>>0] = $117;
     $120 = $dest;
     $121 = ((($120)) + 1|0);
     HEAP8[$121>>0] = $117;
     $122 = $dest;
     HEAP8[$122>>0] = $117;
     $123 = $i;
     $124 = (($123) + -1)|0;
     $i = $124;
     $125 = $src;
     $126 = ((($125)) + 2|0);
     $src = $126;
     $127 = $dest;
     $128 = ((($127)) + 3|0);
     $dest = $128;
    }
    break;
   }
   case 20:  {
    $129 = $4;
    $130 = (($129) - 1)|0;
    $i = $130;
    while(1) {
     $131 = $i;
     $132 = ($131|0)>=(0);
     if (!($132)) {
      break L15;
     }
     $133 = $src;
     $134 = HEAP8[$133>>0]|0;
     $135 = $dest;
     $136 = ((($135)) + 2|0);
     HEAP8[$136>>0] = $134;
     $137 = $dest;
     $138 = ((($137)) + 1|0);
     HEAP8[$138>>0] = $134;
     $139 = $dest;
     HEAP8[$139>>0] = $134;
     $140 = $src;
     $141 = ((($140)) + 1|0);
     $142 = HEAP8[$141>>0]|0;
     $143 = $dest;
     $144 = ((($143)) + 3|0);
     HEAP8[$144>>0] = $142;
     $145 = $i;
     $146 = (($145) + -1)|0;
     $i = $146;
     $147 = $src;
     $148 = ((($147)) + 2|0);
     $src = $148;
     $149 = $dest;
     $150 = ((($149)) + 4|0);
     $dest = $150;
    }
    break;
   }
   case 28:  {
    $151 = $4;
    $152 = (($151) - 1)|0;
    $i = $152;
    while(1) {
     $153 = $i;
     $154 = ($153|0)>=(0);
     if (!($154)) {
      break L15;
     }
     $155 = $src;
     $156 = HEAP8[$155>>0]|0;
     $157 = $dest;
     HEAP8[$157>>0] = $156;
     $158 = $src;
     $159 = ((($158)) + 1|0);
     $160 = HEAP8[$159>>0]|0;
     $161 = $dest;
     $162 = ((($161)) + 1|0);
     HEAP8[$162>>0] = $160;
     $163 = $src;
     $164 = ((($163)) + 2|0);
     $165 = HEAP8[$164>>0]|0;
     $166 = $dest;
     $167 = ((($166)) + 2|0);
     HEAP8[$167>>0] = $165;
     $168 = $dest;
     $169 = ((($168)) + 3|0);
     HEAP8[$169>>0] = -1;
     $170 = $i;
     $171 = (($170) + -1)|0;
     $i = $171;
     $172 = $src;
     $173 = ((($172)) + 3|0);
     $src = $173;
     $174 = $dest;
     $175 = ((($174)) + 4|0);
     $dest = $175;
    }
    break;
   }
   case 25:  {
    $176 = $4;
    $177 = (($176) - 1)|0;
    $i = $177;
    while(1) {
     $178 = $i;
     $179 = ($178|0)>=(0);
     if (!($179)) {
      break L15;
     }
     $180 = $src;
     $181 = HEAP8[$180>>0]|0;
     $182 = $181&255;
     $183 = $src;
     $184 = ((($183)) + 1|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = $src;
     $188 = ((($187)) + 2|0);
     $189 = HEAP8[$188>>0]|0;
     $190 = $189&255;
     $191 = (__ZL15stbi__compute_yiii($182,$186,$190)|0);
     $192 = $dest;
     HEAP8[$192>>0] = $191;
     $193 = $i;
     $194 = (($193) + -1)|0;
     $i = $194;
     $195 = $src;
     $196 = ((($195)) + 3|0);
     $src = $196;
     $197 = $dest;
     $198 = ((($197)) + 1|0);
     $dest = $198;
    }
    break;
   }
   case 26:  {
    $199 = $4;
    $200 = (($199) - 1)|0;
    $i = $200;
    while(1) {
     $201 = $i;
     $202 = ($201|0)>=(0);
     if (!($202)) {
      break L15;
     }
     $203 = $src;
     $204 = HEAP8[$203>>0]|0;
     $205 = $204&255;
     $206 = $src;
     $207 = ((($206)) + 1|0);
     $208 = HEAP8[$207>>0]|0;
     $209 = $208&255;
     $210 = $src;
     $211 = ((($210)) + 2|0);
     $212 = HEAP8[$211>>0]|0;
     $213 = $212&255;
     $214 = (__ZL15stbi__compute_yiii($205,$209,$213)|0);
     $215 = $dest;
     HEAP8[$215>>0] = $214;
     $216 = $dest;
     $217 = ((($216)) + 1|0);
     HEAP8[$217>>0] = -1;
     $218 = $i;
     $219 = (($218) + -1)|0;
     $i = $219;
     $220 = $src;
     $221 = ((($220)) + 3|0);
     $src = $221;
     $222 = $dest;
     $223 = ((($222)) + 2|0);
     $dest = $223;
    }
    break;
   }
   case 33:  {
    $224 = $4;
    $225 = (($224) - 1)|0;
    $i = $225;
    while(1) {
     $226 = $i;
     $227 = ($226|0)>=(0);
     if (!($227)) {
      break L15;
     }
     $228 = $src;
     $229 = HEAP8[$228>>0]|0;
     $230 = $229&255;
     $231 = $src;
     $232 = ((($231)) + 1|0);
     $233 = HEAP8[$232>>0]|0;
     $234 = $233&255;
     $235 = $src;
     $236 = ((($235)) + 2|0);
     $237 = HEAP8[$236>>0]|0;
     $238 = $237&255;
     $239 = (__ZL15stbi__compute_yiii($230,$234,$238)|0);
     $240 = $dest;
     HEAP8[$240>>0] = $239;
     $241 = $i;
     $242 = (($241) + -1)|0;
     $i = $242;
     $243 = $src;
     $244 = ((($243)) + 4|0);
     $src = $244;
     $245 = $dest;
     $246 = ((($245)) + 1|0);
     $dest = $246;
    }
    break;
   }
   case 34:  {
    $247 = $4;
    $248 = (($247) - 1)|0;
    $i = $248;
    while(1) {
     $249 = $i;
     $250 = ($249|0)>=(0);
     if (!($250)) {
      break L15;
     }
     $251 = $src;
     $252 = HEAP8[$251>>0]|0;
     $253 = $252&255;
     $254 = $src;
     $255 = ((($254)) + 1|0);
     $256 = HEAP8[$255>>0]|0;
     $257 = $256&255;
     $258 = $src;
     $259 = ((($258)) + 2|0);
     $260 = HEAP8[$259>>0]|0;
     $261 = $260&255;
     $262 = (__ZL15stbi__compute_yiii($253,$257,$261)|0);
     $263 = $dest;
     HEAP8[$263>>0] = $262;
     $264 = $src;
     $265 = ((($264)) + 3|0);
     $266 = HEAP8[$265>>0]|0;
     $267 = $dest;
     $268 = ((($267)) + 1|0);
     HEAP8[$268>>0] = $266;
     $269 = $i;
     $270 = (($269) + -1)|0;
     $i = $270;
     $271 = $src;
     $272 = ((($271)) + 4|0);
     $src = $272;
     $273 = $dest;
     $274 = ((($273)) + 2|0);
     $dest = $274;
    }
    break;
   }
   case 35:  {
    $275 = $4;
    $276 = (($275) - 1)|0;
    $i = $276;
    while(1) {
     $277 = $i;
     $278 = ($277|0)>=(0);
     if (!($278)) {
      break L15;
     }
     $279 = $src;
     $280 = HEAP8[$279>>0]|0;
     $281 = $dest;
     HEAP8[$281>>0] = $280;
     $282 = $src;
     $283 = ((($282)) + 1|0);
     $284 = HEAP8[$283>>0]|0;
     $285 = $dest;
     $286 = ((($285)) + 1|0);
     HEAP8[$286>>0] = $284;
     $287 = $src;
     $288 = ((($287)) + 2|0);
     $289 = HEAP8[$288>>0]|0;
     $290 = $dest;
     $291 = ((($290)) + 2|0);
     HEAP8[$291>>0] = $289;
     $292 = $i;
     $293 = (($292) + -1)|0;
     $i = $293;
     $294 = $src;
     $295 = ((($294)) + 4|0);
     $src = $295;
     $296 = $dest;
     $297 = ((($296)) + 3|0);
     $dest = $297;
    }
    break;
   }
   default: {
    label = 46;
    break L12;
   }
   }
  } while(0);
  $298 = $j;
  $299 = (($298) + 1)|0;
  $j = $299;
 }
 if ((label|0) == 46) {
  ___assert_fail((3652|0),(2464|0),1377,(3631|0));
  // unreachable;
 }
 _free($30);
 $300 = $good;
 $0 = $300;
 $301 = $0;
 STACKTOP = sp;return ($301|0);
}
function __ZL15stbi__compute_yiii($r,$g,$b) {
 $r = $r|0;
 $g = $g|0;
 $b = $b|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $0;
 $4 = ($3*77)|0;
 $5 = $1;
 $6 = ($5*150)|0;
 $7 = (($4) + ($6))|0;
 $8 = $2;
 $9 = ($8*29)|0;
 $10 = (($7) + ($9))|0;
 $11 = $10 >> 8;
 $12 = $11&255;
 STACKTOP = sp;return ($12|0);
}
function __ZL14stbi__bmp_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL18stbi__bmp_test_rawP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL18stbi__bmp_test_rawP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $r = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $4 = $3&255;
 $5 = ($4|0)!=(66);
 if ($5) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = ($8|0)!=(77);
 if ($9) {
  $0 = 0;
  $29 = $0;
  STACKTOP = sp;return ($29|0);
 }
 $10 = $1;
 (__ZL13stbi__get32leP13stbi__context($10)|0);
 $11 = $1;
 (__ZL13stbi__get16leP13stbi__context($11)|0);
 $12 = $1;
 (__ZL13stbi__get16leP13stbi__context($12)|0);
 $13 = $1;
 (__ZL13stbi__get32leP13stbi__context($13)|0);
 $14 = $1;
 $15 = (__ZL13stbi__get32leP13stbi__context($14)|0);
 $sz = $15;
 $16 = $sz;
 $17 = ($16|0)==(12);
 $18 = $sz;
 $19 = ($18|0)==(40);
 $or$cond = $17 | $19;
 $20 = $sz;
 $21 = ($20|0)==(56);
 $or$cond3 = $or$cond | $21;
 $22 = $sz;
 $23 = ($22|0)==(108);
 $or$cond5 = $or$cond3 | $23;
 if ($or$cond5) {
  $27 = 1;
 } else {
  $24 = $sz;
  $25 = ($24|0)==(124);
  $27 = $25;
 }
 $26 = $27&1;
 $r = $26;
 $28 = $r;
 $0 = $28;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL13stbi__get32leP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get16leP13stbi__context($1)|0);
 $z = $2;
 $3 = $z;
 $4 = $0;
 $5 = (__ZL13stbi__get16leP13stbi__context($4)|0);
 $6 = $5 << 16;
 $7 = (($3) + ($6))|0;
 STACKTOP = sp;return ($7|0);
}
function __ZL13stbi__get16leP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL10stbi__get8P13stbi__context($1)|0);
 $3 = $2&255;
 $z = $3;
 $4 = $z;
 $5 = $0;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $7 = $6&255;
 $8 = $7 << 8;
 $9 = (($4) + ($8))|0;
 STACKTOP = sp;return ($9|0);
}
function __ZL14stbi__bmp_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a4 = 0, $acount = 0, $all_a = 0, $ashift = 0, $bcount = 0, $bpp = 0, $bshift = 0, $compress = 0;
 var $easy = 0, $flip_vertically = 0, $gcount = 0, $gshift = 0, $hsz = 0, $i = 0, $j = 0, $ma = 0, $mb = 0, $mg = 0, $mr = 0, $offset = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond19 = 0, $or$cond21 = 0, $or$cond23 = 0;
 var $or$cond25 = 0, $or$cond27 = 0, $or$cond29 = 0, $or$cond3 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $out = 0, $p1 = 0, $p2 = 0, $pad = 0, $pal = 0, $psize = 0, $rcount = 0, $rshift = 0, $t = 0, $target = 0, $v = 0, $v2 = 0;
 var $v3 = 0, $width = 0, $z = 0, $z1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1200|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pal = sp + 168|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $mr = 0;
 $mg = 0;
 $mb = 0;
 $ma = 0;
 $all_a = 255;
 $psize = 0;
 $compress = 0;
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $9 = ($8|0)!=(66);
 if (!($9)) {
  $10 = $1;
  $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
  $12 = $11&255;
  $13 = ($12|0)!=(77);
  if (!($13)) {
   $18 = $1;
   (__ZL13stbi__get32leP13stbi__context($18)|0);
   $19 = $1;
   (__ZL13stbi__get16leP13stbi__context($19)|0);
   $20 = $1;
   (__ZL13stbi__get16leP13stbi__context($20)|0);
   $21 = $1;
   $22 = (__ZL13stbi__get32leP13stbi__context($21)|0);
   $offset = $22;
   $23 = $1;
   $24 = (__ZL13stbi__get32leP13stbi__context($23)|0);
   $hsz = $24;
   $25 = $hsz;
   $26 = ($25|0)!=(12);
   $27 = $hsz;
   $28 = ($27|0)!=(40);
   $or$cond = $26 & $28;
   $29 = $hsz;
   $30 = ($29|0)!=(56);
   $or$cond3 = $or$cond & $30;
   $31 = $hsz;
   $32 = ($31|0)!=(108);
   $or$cond5 = $or$cond3 & $32;
   $33 = $hsz;
   $34 = ($33|0)!=(124);
   $or$cond7 = $or$cond5 & $34;
   if ($or$cond7) {
    $35 = (__ZL9stbi__errPKc(3662)|0);
    $36 = ($35|0)!=(0);
    $37 = $36 ? 0 : 0;
    $38 = $37;
    $0 = $38;
    $650 = $0;
    STACKTOP = sp;return ($650|0);
   }
   $39 = $hsz;
   $40 = ($39|0)==(12);
   $41 = $1;
   if ($40) {
    $42 = (__ZL13stbi__get16leP13stbi__context($41)|0);
    $43 = $1;
    HEAP32[$43>>2] = $42;
    $44 = $1;
    $45 = (__ZL13stbi__get16leP13stbi__context($44)|0);
    $46 = $1;
    $47 = ((($46)) + 4|0);
    HEAP32[$47>>2] = $45;
   } else {
    $48 = (__ZL13stbi__get32leP13stbi__context($41)|0);
    $49 = $1;
    HEAP32[$49>>2] = $48;
    $50 = $1;
    $51 = (__ZL13stbi__get32leP13stbi__context($50)|0);
    $52 = $1;
    $53 = ((($52)) + 4|0);
    HEAP32[$53>>2] = $51;
   }
   $54 = $1;
   $55 = (__ZL13stbi__get16leP13stbi__context($54)|0);
   $56 = ($55|0)!=(1);
   if ($56) {
    $57 = (__ZL9stbi__errPKc(3674)|0);
    $58 = ($57|0)!=(0);
    $59 = $58 ? 0 : 0;
    $60 = $59;
    $0 = $60;
    $650 = $0;
    STACKTOP = sp;return ($650|0);
   }
   $61 = $1;
   $62 = (__ZL13stbi__get16leP13stbi__context($61)|0);
   $bpp = $62;
   $63 = $bpp;
   $64 = ($63|0)==(1);
   if ($64) {
    $65 = (__ZL9stbi__errPKc(3682)|0);
    $66 = ($65|0)!=(0);
    $67 = $66 ? 0 : 0;
    $68 = $67;
    $0 = $68;
    $650 = $0;
    STACKTOP = sp;return ($650|0);
   }
   $69 = $1;
   $70 = ((($69)) + 4|0);
   $71 = HEAP32[$70>>2]|0;
   $72 = ($71|0)>(0);
   $73 = $72&1;
   $flip_vertically = $73;
   $74 = $1;
   $75 = ((($74)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = (Math_abs(($76|0))|0);
   $78 = $1;
   $79 = ((($78)) + 4|0);
   HEAP32[$79>>2] = $77;
   $80 = $hsz;
   $81 = ($80|0)==(12);
   if ($81) {
    $82 = $bpp;
    $83 = ($82|0)<(24);
    if ($83) {
     $84 = $offset;
     $85 = (($84) - 14)|0;
     $86 = (($85) - 24)|0;
     $87 = (($86|0) / 3)&-1;
     $psize = $87;
    }
   } else {
    $88 = $1;
    $89 = (__ZL13stbi__get32leP13stbi__context($88)|0);
    $compress = $89;
    $90 = $compress;
    $91 = ($90|0)==(1);
    $92 = $compress;
    $93 = ($92|0)==(2);
    $or$cond9 = $91 | $93;
    if ($or$cond9) {
     $94 = (__ZL9stbi__errPKc(3693)|0);
     $95 = ($94|0)!=(0);
     $96 = $95 ? 0 : 0;
     $97 = $96;
     $0 = $97;
     $650 = $0;
     STACKTOP = sp;return ($650|0);
    }
    $98 = $1;
    (__ZL13stbi__get32leP13stbi__context($98)|0);
    $99 = $1;
    (__ZL13stbi__get32leP13stbi__context($99)|0);
    $100 = $1;
    (__ZL13stbi__get32leP13stbi__context($100)|0);
    $101 = $1;
    (__ZL13stbi__get32leP13stbi__context($101)|0);
    $102 = $1;
    (__ZL13stbi__get32leP13stbi__context($102)|0);
    $103 = $hsz;
    $104 = ($103|0)==(40);
    $105 = $hsz;
    $106 = ($105|0)==(56);
    $or$cond11 = $104 | $106;
    $107 = $hsz;
    do {
     if ($or$cond11) {
      $108 = ($107|0)==(56);
      if ($108) {
       $109 = $1;
       (__ZL13stbi__get32leP13stbi__context($109)|0);
       $110 = $1;
       (__ZL13stbi__get32leP13stbi__context($110)|0);
       $111 = $1;
       (__ZL13stbi__get32leP13stbi__context($111)|0);
       $112 = $1;
       (__ZL13stbi__get32leP13stbi__context($112)|0);
      }
      $113 = $bpp;
      $114 = ($113|0)==(16);
      $115 = $bpp;
      $116 = ($115|0)==(32);
      $or$cond13 = $114 | $116;
      if ($or$cond13) {
       $mb = 0;
       $mg = 0;
       $mr = 0;
       $117 = $compress;
       $118 = ($117|0)==(0);
       if ($118) {
        $119 = $bpp;
        $120 = ($119|0)==(32);
        if ($120) {
         $mr = 16711680;
         $mg = 65280;
         $mb = 255;
         $ma = -16777216;
         $all_a = 0;
         break;
        } else {
         $mr = 31744;
         $mg = 992;
         $mb = 31;
         break;
        }
       }
       $121 = $compress;
       $122 = ($121|0)==(3);
       if (!($122)) {
        $139 = (__ZL9stbi__errPKc(3674)|0);
        $140 = ($139|0)!=(0);
        $141 = $140 ? 0 : 0;
        $142 = $141;
        $0 = $142;
        $650 = $0;
        STACKTOP = sp;return ($650|0);
       }
       $123 = $1;
       $124 = (__ZL13stbi__get32leP13stbi__context($123)|0);
       $mr = $124;
       $125 = $1;
       $126 = (__ZL13stbi__get32leP13stbi__context($125)|0);
       $mg = $126;
       $127 = $1;
       $128 = (__ZL13stbi__get32leP13stbi__context($127)|0);
       $mb = $128;
       $129 = $mr;
       $130 = $mg;
       $131 = ($129|0)==($130|0);
       if ($131) {
        $132 = $mg;
        $133 = $mb;
        $134 = ($132|0)==($133|0);
        if ($134) {
         $135 = (__ZL9stbi__errPKc(3674)|0);
         $136 = ($135|0)!=(0);
         $137 = $136 ? 0 : 0;
         $138 = $137;
         $0 = $138;
         $650 = $0;
         STACKTOP = sp;return ($650|0);
        }
       }
      }
     } else {
      $143 = ($107|0)==(108);
      $144 = $hsz;
      $145 = ($144|0)==(124);
      $or$cond15 = $143 | $145;
      if (!($or$cond15)) {
       ___assert_fail((3701|0),(2464|0),4672,(3726|0));
       // unreachable;
      }
      $146 = $1;
      $147 = (__ZL13stbi__get32leP13stbi__context($146)|0);
      $mr = $147;
      $148 = $1;
      $149 = (__ZL13stbi__get32leP13stbi__context($148)|0);
      $mg = $149;
      $150 = $1;
      $151 = (__ZL13stbi__get32leP13stbi__context($150)|0);
      $mb = $151;
      $152 = $1;
      $153 = (__ZL13stbi__get32leP13stbi__context($152)|0);
      $ma = $153;
      $154 = $1;
      (__ZL13stbi__get32leP13stbi__context($154)|0);
      $i = 0;
      while(1) {
       $155 = $i;
       $156 = ($155|0)<(12);
       if (!($156)) {
        break;
       }
       $157 = $1;
       (__ZL13stbi__get32leP13stbi__context($157)|0);
       $158 = $i;
       $159 = (($158) + 1)|0;
       $i = $159;
      }
      $160 = $hsz;
      $161 = ($160|0)==(124);
      if ($161) {
       $162 = $1;
       (__ZL13stbi__get32leP13stbi__context($162)|0);
       $163 = $1;
       (__ZL13stbi__get32leP13stbi__context($163)|0);
       $164 = $1;
       (__ZL13stbi__get32leP13stbi__context($164)|0);
       $165 = $1;
       (__ZL13stbi__get32leP13stbi__context($165)|0);
      }
     }
    } while(0);
    $166 = $bpp;
    $167 = ($166|0)<(16);
    if ($167) {
     $168 = $offset;
     $169 = (($168) - 14)|0;
     $170 = $hsz;
     $171 = (($169) - ($170))|0;
     $172 = $171 >> 2;
     $psize = $172;
    }
   }
   $173 = $ma;
   $174 = ($173|0)!=(0);
   $175 = $174 ? 4 : 3;
   $176 = $1;
   $177 = ((($176)) + 8|0);
   HEAP32[$177>>2] = $175;
   $178 = $5;
   $179 = ($178|0)!=(0);
   $180 = $5;
   $181 = ($180|0)>=(3);
   $or$cond17 = $179 & $181;
   if ($or$cond17) {
    $182 = $5;
    $target = $182;
   } else {
    $183 = $1;
    $184 = ((($183)) + 8|0);
    $185 = HEAP32[$184>>2]|0;
    $target = $185;
   }
   $186 = $target;
   $187 = $1;
   $188 = HEAP32[$187>>2]|0;
   $189 = Math_imul($186, $188)|0;
   $190 = $1;
   $191 = ((($190)) + 4|0);
   $192 = HEAP32[$191>>2]|0;
   $193 = Math_imul($189, $192)|0;
   $194 = (__ZL12stbi__mallocj($193)|0);
   $out = $194;
   $195 = $out;
   $196 = ($195|0)!=(0|0);
   if (!($196)) {
    $197 = (__ZL9stbi__errPKc(2292)|0);
    $198 = ($197|0)!=(0);
    $199 = $198 ? 0 : 0;
    $200 = $199;
    $0 = $200;
    $650 = $0;
    STACKTOP = sp;return ($650|0);
   }
   $201 = $bpp;
   $202 = ($201|0)<(16);
   L67: do {
    if ($202) {
     $z = 0;
     $203 = $psize;
     $204 = ($203|0)==(0);
     $205 = $psize;
     $206 = ($205|0)>(256);
     $or$cond19 = $204 | $206;
     if ($or$cond19) {
      $207 = $out;
      _free($207);
      $208 = (__ZL9stbi__errPKc(3741)|0);
      $209 = ($208|0)!=(0);
      $210 = $209 ? 0 : 0;
      $211 = $210;
      $0 = $211;
      $650 = $0;
      STACKTOP = sp;return ($650|0);
     }
     $i = 0;
     while(1) {
      $212 = $i;
      $213 = $psize;
      $214 = ($212|0)<($213|0);
      $215 = $1;
      if (!($214)) {
       break;
      }
      $216 = (__ZL10stbi__get8P13stbi__context($215)|0);
      $217 = $i;
      $218 = (($pal) + ($217<<2)|0);
      $219 = ((($218)) + 2|0);
      HEAP8[$219>>0] = $216;
      $220 = $1;
      $221 = (__ZL10stbi__get8P13stbi__context($220)|0);
      $222 = $i;
      $223 = (($pal) + ($222<<2)|0);
      $224 = ((($223)) + 1|0);
      HEAP8[$224>>0] = $221;
      $225 = $1;
      $226 = (__ZL10stbi__get8P13stbi__context($225)|0);
      $227 = $i;
      $228 = (($pal) + ($227<<2)|0);
      HEAP8[$228>>0] = $226;
      $229 = $hsz;
      $230 = ($229|0)!=(12);
      if ($230) {
       $231 = $1;
       (__ZL10stbi__get8P13stbi__context($231)|0);
      }
      $232 = $i;
      $233 = (($pal) + ($232<<2)|0);
      $234 = ((($233)) + 3|0);
      HEAP8[$234>>0] = -1;
      $235 = $i;
      $236 = (($235) + 1)|0;
      $i = $236;
     }
     $237 = $offset;
     $238 = (($237) - 14)|0;
     $239 = $hsz;
     $240 = (($238) - ($239))|0;
     $241 = $psize;
     $242 = $hsz;
     $243 = ($242|0)==(12);
     $244 = $243 ? 3 : 4;
     $245 = Math_imul($241, $244)|0;
     $246 = (($240) - ($245))|0;
     __ZL10stbi__skipP13stbi__contexti($215,$246);
     $247 = $bpp;
     $248 = ($247|0)==(4);
     do {
      if ($248) {
       $249 = $1;
       $250 = HEAP32[$249>>2]|0;
       $251 = (($250) + 1)|0;
       $252 = $251 >>> 1;
       $width = $252;
      } else {
       $253 = $bpp;
       $254 = ($253|0)==(8);
       if ($254) {
        $255 = $1;
        $256 = HEAP32[$255>>2]|0;
        $width = $256;
        break;
       }
       $257 = $out;
       _free($257);
       $258 = (__ZL9stbi__errPKc(3749)|0);
       $259 = ($258|0)!=(0);
       $260 = $259 ? 0 : 0;
       $261 = $260;
       $0 = $261;
       $650 = $0;
       STACKTOP = sp;return ($650|0);
      }
     } while(0);
     $262 = $width;
     $263 = (0 - ($262))|0;
     $264 = $263 & 3;
     $pad = $264;
     $j = 0;
     while(1) {
      $265 = $j;
      $266 = $1;
      $267 = ((($266)) + 4|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ($265|0)<($268|0);
      if (!($269)) {
       break L67;
      }
      $i = 0;
      while(1) {
       $270 = $i;
       $271 = $1;
       $272 = HEAP32[$271>>2]|0;
       $273 = ($270|0)<($272|0);
       if (!($273)) {
        break;
       }
       $274 = $1;
       $275 = (__ZL10stbi__get8P13stbi__context($274)|0);
       $276 = $275&255;
       $v = $276;
       $v2 = 0;
       $277 = $bpp;
       $278 = ($277|0)==(4);
       if ($278) {
        $279 = $v;
        $280 = $279 & 15;
        $v2 = $280;
        $281 = $v;
        $282 = $281 >> 4;
        $v = $282;
       }
       $283 = $v;
       $284 = (($pal) + ($283<<2)|0);
       $285 = HEAP8[$284>>0]|0;
       $286 = $z;
       $287 = (($286) + 1)|0;
       $z = $287;
       $288 = $out;
       $289 = (($288) + ($286)|0);
       HEAP8[$289>>0] = $285;
       $290 = $v;
       $291 = (($pal) + ($290<<2)|0);
       $292 = ((($291)) + 1|0);
       $293 = HEAP8[$292>>0]|0;
       $294 = $z;
       $295 = (($294) + 1)|0;
       $z = $295;
       $296 = $out;
       $297 = (($296) + ($294)|0);
       HEAP8[$297>>0] = $293;
       $298 = $v;
       $299 = (($pal) + ($298<<2)|0);
       $300 = ((($299)) + 2|0);
       $301 = HEAP8[$300>>0]|0;
       $302 = $z;
       $303 = (($302) + 1)|0;
       $z = $303;
       $304 = $out;
       $305 = (($304) + ($302)|0);
       HEAP8[$305>>0] = $301;
       $306 = $target;
       $307 = ($306|0)==(4);
       if ($307) {
        $308 = $z;
        $309 = (($308) + 1)|0;
        $z = $309;
        $310 = $out;
        $311 = (($310) + ($308)|0);
        HEAP8[$311>>0] = -1;
       }
       $312 = $i;
       $313 = (($312) + 1)|0;
       $314 = $1;
       $315 = HEAP32[$314>>2]|0;
       $316 = ($313|0)==($315|0);
       if ($316) {
        break;
       }
       $317 = $bpp;
       $318 = ($317|0)==(8);
       if ($318) {
        $319 = $1;
        $320 = (__ZL10stbi__get8P13stbi__context($319)|0);
        $321 = $320&255;
        $323 = $321;
       } else {
        $322 = $v2;
        $323 = $322;
       }
       $v = $323;
       $324 = $v;
       $325 = (($pal) + ($324<<2)|0);
       $326 = HEAP8[$325>>0]|0;
       $327 = $z;
       $328 = (($327) + 1)|0;
       $z = $328;
       $329 = $out;
       $330 = (($329) + ($327)|0);
       HEAP8[$330>>0] = $326;
       $331 = $v;
       $332 = (($pal) + ($331<<2)|0);
       $333 = ((($332)) + 1|0);
       $334 = HEAP8[$333>>0]|0;
       $335 = $z;
       $336 = (($335) + 1)|0;
       $z = $336;
       $337 = $out;
       $338 = (($337) + ($335)|0);
       HEAP8[$338>>0] = $334;
       $339 = $v;
       $340 = (($pal) + ($339<<2)|0);
       $341 = ((($340)) + 2|0);
       $342 = HEAP8[$341>>0]|0;
       $343 = $z;
       $344 = (($343) + 1)|0;
       $z = $344;
       $345 = $out;
       $346 = (($345) + ($343)|0);
       HEAP8[$346>>0] = $342;
       $347 = $target;
       $348 = ($347|0)==(4);
       if ($348) {
        $349 = $z;
        $350 = (($349) + 1)|0;
        $z = $350;
        $351 = $out;
        $352 = (($351) + ($349)|0);
        HEAP8[$352>>0] = -1;
       }
       $353 = $i;
       $354 = (($353) + 2)|0;
       $i = $354;
      }
      $355 = $1;
      $356 = $pad;
      __ZL10stbi__skipP13stbi__contexti($355,$356);
      $357 = $j;
      $358 = (($357) + 1)|0;
      $j = $358;
     }
    } else {
     $rshift = 0;
     $gshift = 0;
     $bshift = 0;
     $ashift = 0;
     $rcount = 0;
     $gcount = 0;
     $bcount = 0;
     $acount = 0;
     $z1 = 0;
     $easy = 0;
     $359 = $1;
     $360 = $offset;
     $361 = (($360) - 14)|0;
     $362 = $hsz;
     $363 = (($361) - ($362))|0;
     __ZL10stbi__skipP13stbi__contexti($359,$363);
     $364 = $bpp;
     $365 = ($364|0)==(24);
     do {
      if ($365) {
       $366 = $1;
       $367 = HEAP32[$366>>2]|0;
       $368 = ($367*3)|0;
       $width = $368;
      } else {
       $369 = $bpp;
       $370 = ($369|0)==(16);
       if ($370) {
        $371 = $1;
        $372 = HEAP32[$371>>2]|0;
        $373 = $372<<1;
        $width = $373;
        break;
       } else {
        $width = 0;
        break;
       }
      }
     } while(0);
     $374 = $width;
     $375 = (0 - ($374))|0;
     $376 = $375 & 3;
     $pad = $376;
     $377 = $bpp;
     $378 = ($377|0)==(24);
     if ($378) {
      $easy = 1;
     } else {
      $379 = $bpp;
      $380 = ($379|0)==(32);
      if ($380) {
       $381 = $mb;
       $382 = ($381|0)==(255);
       $383 = $mg;
       $384 = ($383|0)==(65280);
       $or$cond21 = $382 & $384;
       $385 = $mr;
       $386 = ($385|0)==(16711680);
       $or$cond23 = $or$cond21 & $386;
       $387 = $ma;
       $388 = ($387|0)==(-16777216);
       $or$cond25 = $or$cond23 & $388;
       if ($or$cond25) {
        $easy = 2;
       }
      }
     }
     $389 = $easy;
     $390 = ($389|0)!=(0);
     do {
      if (!($390)) {
       $391 = $mr;
       $392 = ($391|0)!=(0);
       $393 = $mg;
       $394 = ($393|0)!=(0);
       $or$cond27 = $392 & $394;
       $395 = $mb;
       $396 = ($395|0)!=(0);
       $or$cond29 = $or$cond27 & $396;
       if ($or$cond29) {
        $402 = $mr;
        $403 = (__ZL14stbi__high_bitj($402)|0);
        $404 = (($403) - 7)|0;
        $rshift = $404;
        $405 = $mr;
        $406 = (__ZL14stbi__bitcountj($405)|0);
        $rcount = $406;
        $407 = $mg;
        $408 = (__ZL14stbi__high_bitj($407)|0);
        $409 = (($408) - 7)|0;
        $gshift = $409;
        $410 = $mg;
        $411 = (__ZL14stbi__bitcountj($410)|0);
        $gcount = $411;
        $412 = $mb;
        $413 = (__ZL14stbi__high_bitj($412)|0);
        $414 = (($413) - 7)|0;
        $bshift = $414;
        $415 = $mb;
        $416 = (__ZL14stbi__bitcountj($415)|0);
        $bcount = $416;
        $417 = $ma;
        $418 = (__ZL14stbi__high_bitj($417)|0);
        $419 = (($418) - 7)|0;
        $ashift = $419;
        $420 = $ma;
        $421 = (__ZL14stbi__bitcountj($420)|0);
        $acount = $421;
        break;
       }
       $397 = $out;
       _free($397);
       $398 = (__ZL9stbi__errPKc(3757)|0);
       $399 = ($398|0)!=(0);
       $400 = $399 ? 0 : 0;
       $401 = $400;
       $0 = $401;
       $650 = $0;
       STACKTOP = sp;return ($650|0);
      }
     } while(0);
     $j = 0;
     while(1) {
      $422 = $j;
      $423 = $1;
      $424 = ((($423)) + 4|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = ($422|0)<($425|0);
      if (!($426)) {
       break L67;
      }
      $427 = $easy;
      $428 = ($427|0)!=(0);
      $i = 0;
      L133: do {
       if ($428) {
        while(1) {
         $429 = $i;
         $430 = $1;
         $431 = HEAP32[$430>>2]|0;
         $432 = ($429|0)<($431|0);
         if (!($432)) {
          break L133;
         }
         $433 = $1;
         $434 = (__ZL10stbi__get8P13stbi__context($433)|0);
         $435 = $z1;
         $436 = (($435) + 2)|0;
         $437 = $out;
         $438 = (($437) + ($436)|0);
         HEAP8[$438>>0] = $434;
         $439 = $1;
         $440 = (__ZL10stbi__get8P13stbi__context($439)|0);
         $441 = $z1;
         $442 = (($441) + 1)|0;
         $443 = $out;
         $444 = (($443) + ($442)|0);
         HEAP8[$444>>0] = $440;
         $445 = $1;
         $446 = (__ZL10stbi__get8P13stbi__context($445)|0);
         $447 = $z1;
         $448 = (($447) + 0)|0;
         $449 = $out;
         $450 = (($449) + ($448)|0);
         HEAP8[$450>>0] = $446;
         $451 = $z1;
         $452 = (($451) + 3)|0;
         $z1 = $452;
         $453 = $easy;
         $454 = ($453|0)==(2);
         if ($454) {
          $455 = $1;
          $456 = (__ZL10stbi__get8P13stbi__context($455)|0);
          $457 = $456&255;
          $459 = $457;
         } else {
          $459 = 255;
         }
         $458 = $459&255;
         $a = $458;
         $460 = $a;
         $461 = $460&255;
         $462 = $all_a;
         $463 = $462 | $461;
         $all_a = $463;
         $464 = $target;
         $465 = ($464|0)==(4);
         if ($465) {
          $466 = $a;
          $467 = $z1;
          $468 = (($467) + 1)|0;
          $z1 = $468;
          $469 = $out;
          $470 = (($469) + ($467)|0);
          HEAP8[$470>>0] = $466;
         }
         $471 = $i;
         $472 = (($471) + 1)|0;
         $i = $472;
        }
       } else {
        while(1) {
         $473 = $i;
         $474 = $1;
         $475 = HEAP32[$474>>2]|0;
         $476 = ($473|0)<($475|0);
         if (!($476)) {
          break L133;
         }
         $477 = $bpp;
         $478 = ($477|0)==(16);
         $479 = $1;
         if ($478) {
          $480 = (__ZL13stbi__get16leP13stbi__context($479)|0);
          $482 = $480;
         } else {
          $481 = (__ZL13stbi__get32leP13stbi__context($479)|0);
          $482 = $481;
         }
         $v3 = $482;
         $483 = $v3;
         $484 = $mr;
         $485 = $483 & $484;
         $486 = $rshift;
         $487 = $rcount;
         $488 = (__ZL17stbi__shiftsignediii($485,$486,$487)|0);
         $489 = $488 & 255;
         $490 = $489&255;
         $491 = $z1;
         $492 = (($491) + 1)|0;
         $z1 = $492;
         $493 = $out;
         $494 = (($493) + ($491)|0);
         HEAP8[$494>>0] = $490;
         $495 = $v3;
         $496 = $mg;
         $497 = $495 & $496;
         $498 = $gshift;
         $499 = $gcount;
         $500 = (__ZL17stbi__shiftsignediii($497,$498,$499)|0);
         $501 = $500 & 255;
         $502 = $501&255;
         $503 = $z1;
         $504 = (($503) + 1)|0;
         $z1 = $504;
         $505 = $out;
         $506 = (($505) + ($503)|0);
         HEAP8[$506>>0] = $502;
         $507 = $v3;
         $508 = $mb;
         $509 = $507 & $508;
         $510 = $bshift;
         $511 = $bcount;
         $512 = (__ZL17stbi__shiftsignediii($509,$510,$511)|0);
         $513 = $512 & 255;
         $514 = $513&255;
         $515 = $z1;
         $516 = (($515) + 1)|0;
         $z1 = $516;
         $517 = $out;
         $518 = (($517) + ($515)|0);
         HEAP8[$518>>0] = $514;
         $519 = $ma;
         $520 = ($519|0)!=(0);
         if ($520) {
          $521 = $v3;
          $522 = $ma;
          $523 = $521 & $522;
          $524 = $ashift;
          $525 = $acount;
          $526 = (__ZL17stbi__shiftsignediii($523,$524,$525)|0);
          $527 = $526;
         } else {
          $527 = 255;
         }
         $a4 = $527;
         $528 = $a4;
         $529 = $all_a;
         $530 = $529 | $528;
         $all_a = $530;
         $531 = $target;
         $532 = ($531|0)==(4);
         if ($532) {
          $533 = $a4;
          $534 = $533 & 255;
          $535 = $534&255;
          $536 = $z1;
          $537 = (($536) + 1)|0;
          $z1 = $537;
          $538 = $out;
          $539 = (($538) + ($536)|0);
          HEAP8[$539>>0] = $535;
         }
         $540 = $i;
         $541 = (($540) + 1)|0;
         $i = $541;
        }
       }
      } while(0);
      $542 = $1;
      $543 = $pad;
      __ZL10stbi__skipP13stbi__contexti($542,$543);
      $544 = $j;
      $545 = (($544) + 1)|0;
      $j = $545;
     }
    }
   } while(0);
   $546 = $target;
   $547 = ($546|0)==(4);
   $548 = $all_a;
   $549 = ($548|0)==(0);
   $or$cond31 = $547 & $549;
   L158: do {
    if ($or$cond31) {
     $550 = $1;
     $551 = HEAP32[$550>>2]|0;
     $552 = $551<<2;
     $553 = $1;
     $554 = ((($553)) + 4|0);
     $555 = HEAP32[$554>>2]|0;
     $556 = Math_imul($552, $555)|0;
     $557 = (($556) - 1)|0;
     $i = $557;
     while(1) {
      $558 = $i;
      $559 = ($558|0)>=(0);
      if (!($559)) {
       break L158;
      }
      $560 = $i;
      $561 = $out;
      $562 = (($561) + ($560)|0);
      HEAP8[$562>>0] = -1;
      $563 = $i;
      $564 = (($563) - 4)|0;
      $i = $564;
     }
    }
   } while(0);
   $565 = $flip_vertically;
   $566 = ($565|0)!=(0);
   L164: do {
    if ($566) {
     $j = 0;
     while(1) {
      $567 = $j;
      $568 = $1;
      $569 = ((($568)) + 4|0);
      $570 = HEAP32[$569>>2]|0;
      $571 = $570 >> 1;
      $572 = ($567|0)<($571|0);
      if (!($572)) {
       break L164;
      }
      $573 = $out;
      $574 = $j;
      $575 = $1;
      $576 = HEAP32[$575>>2]|0;
      $577 = Math_imul($574, $576)|0;
      $578 = $target;
      $579 = Math_imul($577, $578)|0;
      $580 = (($573) + ($579)|0);
      $p1 = $580;
      $581 = $out;
      $582 = $1;
      $583 = ((($582)) + 4|0);
      $584 = HEAP32[$583>>2]|0;
      $585 = (($584) - 1)|0;
      $586 = $j;
      $587 = (($585) - ($586))|0;
      $588 = $1;
      $589 = HEAP32[$588>>2]|0;
      $590 = Math_imul($587, $589)|0;
      $591 = $target;
      $592 = Math_imul($590, $591)|0;
      $593 = (($581) + ($592)|0);
      $p2 = $593;
      $i = 0;
      while(1) {
       $594 = $i;
       $595 = $1;
       $596 = HEAP32[$595>>2]|0;
       $597 = $target;
       $598 = Math_imul($596, $597)|0;
       $599 = ($594|0)<($598|0);
       if (!($599)) {
        break;
       }
       $600 = $i;
       $601 = $p1;
       $602 = (($601) + ($600)|0);
       $603 = HEAP8[$602>>0]|0;
       $t = $603;
       $604 = $i;
       $605 = $p2;
       $606 = (($605) + ($604)|0);
       $607 = HEAP8[$606>>0]|0;
       $608 = $i;
       $609 = $p1;
       $610 = (($609) + ($608)|0);
       HEAP8[$610>>0] = $607;
       $611 = $t;
       $612 = $i;
       $613 = $p2;
       $614 = (($613) + ($612)|0);
       HEAP8[$614>>0] = $611;
       $615 = $i;
       $616 = (($615) + 1)|0;
       $i = $616;
      }
      $617 = $j;
      $618 = (($617) + 1)|0;
      $j = $618;
     }
    }
   } while(0);
   $619 = $5;
   $620 = ($619|0)!=(0);
   if ($620) {
    $621 = $5;
    $622 = $target;
    $623 = ($621|0)!=($622|0);
    if ($623) {
     $624 = $out;
     $625 = $target;
     $626 = $5;
     $627 = $1;
     $628 = HEAP32[$627>>2]|0;
     $629 = $1;
     $630 = ((($629)) + 4|0);
     $631 = HEAP32[$630>>2]|0;
     $632 = (__ZL20stbi__convert_formatPhiijj($624,$625,$626,$628,$631)|0);
     $out = $632;
     $633 = $out;
     $634 = ($633|0)==(0|0);
     if ($634) {
      $635 = $out;
      $0 = $635;
      $650 = $0;
      STACKTOP = sp;return ($650|0);
     }
    }
   }
   $636 = $1;
   $637 = HEAP32[$636>>2]|0;
   $638 = $2;
   HEAP32[$638>>2] = $637;
   $639 = $1;
   $640 = ((($639)) + 4|0);
   $641 = HEAP32[$640>>2]|0;
   $642 = $3;
   HEAP32[$642>>2] = $641;
   $643 = $4;
   $644 = ($643|0)!=(0|0);
   if ($644) {
    $645 = $1;
    $646 = ((($645)) + 8|0);
    $647 = HEAP32[$646>>2]|0;
    $648 = $4;
    HEAP32[$648>>2] = $647;
   }
   $649 = $out;
   $0 = $649;
   $650 = $0;
   STACKTOP = sp;return ($650|0);
  }
 }
 $14 = (__ZL9stbi__errPKc(3654)|0);
 $15 = ($14|0)!=(0);
 $16 = $15 ? 0 : 0;
 $17 = $16;
 $0 = $17;
 $650 = $0;
 STACKTOP = sp;return ($650|0);
}
function __ZL14stbi__high_bitj($z) {
 $z = $z|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $z;
 $n = 0;
 $2 = $1;
 $3 = ($2|0)==(0);
 if ($3) {
  $0 = -1;
  $35 = $0;
  STACKTOP = sp;return ($35|0);
 }
 $4 = $1;
 $5 = ($4>>>0)>=(65536);
 if ($5) {
  $6 = $n;
  $7 = (($6) + 16)|0;
  $n = $7;
  $8 = $1;
  $9 = $8 >>> 16;
  $1 = $9;
 }
 $10 = $1;
 $11 = ($10>>>0)>=(256);
 if ($11) {
  $12 = $n;
  $13 = (($12) + 8)|0;
  $n = $13;
  $14 = $1;
  $15 = $14 >>> 8;
  $1 = $15;
 }
 $16 = $1;
 $17 = ($16>>>0)>=(16);
 if ($17) {
  $18 = $n;
  $19 = (($18) + 4)|0;
  $n = $19;
  $20 = $1;
  $21 = $20 >>> 4;
  $1 = $21;
 }
 $22 = $1;
 $23 = ($22>>>0)>=(4);
 if ($23) {
  $24 = $n;
  $25 = (($24) + 2)|0;
  $n = $25;
  $26 = $1;
  $27 = $26 >>> 2;
  $1 = $27;
 }
 $28 = $1;
 $29 = ($28>>>0)>=(2);
 if ($29) {
  $30 = $n;
  $31 = (($30) + 1)|0;
  $n = $31;
  $32 = $1;
  $33 = $32 >>> 1;
  $1 = $33;
 }
 $34 = $n;
 $0 = $34;
 $35 = $0;
 STACKTOP = sp;return ($35|0);
}
function __ZL14stbi__bitcountj($a) {
 $a = $a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $a;
 $1 = $0;
 $2 = $1 & 1431655765;
 $3 = $0;
 $4 = $3 >>> 1;
 $5 = $4 & 1431655765;
 $6 = (($2) + ($5))|0;
 $0 = $6;
 $7 = $0;
 $8 = $7 & 858993459;
 $9 = $0;
 $10 = $9 >>> 2;
 $11 = $10 & 858993459;
 $12 = (($8) + ($11))|0;
 $0 = $12;
 $13 = $0;
 $14 = $0;
 $15 = $14 >>> 4;
 $16 = (($13) + ($15))|0;
 $17 = $16 & 252645135;
 $0 = $17;
 $18 = $0;
 $19 = $0;
 $20 = $19 >>> 8;
 $21 = (($18) + ($20))|0;
 $0 = $21;
 $22 = $0;
 $23 = $0;
 $24 = $23 >>> 16;
 $25 = (($22) + ($24))|0;
 $0 = $25;
 $26 = $0;
 $27 = $26 & 255;
 STACKTOP = sp;return ($27|0);
}
function __ZL17stbi__shiftsignediii($v,$shift,$bits) {
 $v = $v|0;
 $shift = $shift|0;
 $bits = $bits|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $result = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $v;
 $1 = $shift;
 $2 = $bits;
 $z = 0;
 $3 = $1;
 $4 = ($3|0)<(0);
 $5 = $1;
 if ($4) {
  $6 = (0 - ($5))|0;
  $7 = $0;
  $8 = $7 << $6;
  $0 = $8;
 } else {
  $9 = $0;
  $10 = $9 >> $5;
  $0 = $10;
 }
 $11 = $0;
 $result = $11;
 $12 = $2;
 $z = $12;
 while(1) {
  $13 = $z;
  $14 = ($13|0)<(8);
  if (!($14)) {
   break;
  }
  $15 = $0;
  $16 = $z;
  $17 = $15 >> $16;
  $18 = $result;
  $19 = (($18) + ($17))|0;
  $result = $19;
  $20 = $2;
  $21 = $z;
  $22 = (($21) + ($20))|0;
  $z = $22;
 }
 $23 = $result;
 STACKTOP = sp;return ($23|0);
}
function __ZL14stbi__gif_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL18stbi__gif_test_rawP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL18stbi__gif_test_rawP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $4 = $3&255;
 $5 = ($4|0)!=(71);
 if (!($5)) {
  $6 = $1;
  $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
  $8 = $7&255;
  $9 = ($8|0)!=(73);
  if (!($9)) {
   $10 = $1;
   $11 = (__ZL10stbi__get8P13stbi__context($10)|0);
   $12 = $11&255;
   $13 = ($12|0)!=(70);
   if (!($13)) {
    $14 = $1;
    $15 = (__ZL10stbi__get8P13stbi__context($14)|0);
    $16 = $15&255;
    $17 = ($16|0)!=(56);
    if (!($17)) {
     $18 = $1;
     $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
     $20 = $19&255;
     $sz = $20;
     $21 = $sz;
     $22 = ($21|0)!=(57);
     $23 = $sz;
     $24 = ($23|0)!=(55);
     $or$cond = $22 & $24;
     if ($or$cond) {
      $0 = 0;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
     $25 = $1;
     $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
     $27 = $26&255;
     $28 = ($27|0)!=(97);
     if ($28) {
      $0 = 0;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     } else {
      $0 = 1;
      $29 = $0;
      STACKTOP = sp;return ($29|0);
     }
    }
   }
  }
 }
 $0 = 0;
 $29 = $0;
 STACKTOP = sp;return ($29|0);
}
function __ZL14stbi__gif_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, $or$cond = 0, $u = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 18544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $g = sp;
 $0 = $s;
 $1 = $x;
 $2 = $y;
 $3 = $comp;
 $4 = $req_comp;
 $u = 0;
 _memset(($g|0),0,18516)|0;
 $5 = $0;
 $6 = $3;
 $7 = $4;
 $8 = (__ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPii($5,$g,$6,$7)|0);
 $u = $8;
 $9 = $u;
 $10 = $0;
 $11 = ($9|0)==($10|0);
 $$ = $11 ? 0 : $8;
 $u = $$;
 $12 = $u;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = HEAP32[$g>>2]|0;
  $15 = $1;
  HEAP32[$15>>2] = $14;
  $16 = ((($g)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = $2;
  HEAP32[$18>>2] = $17;
  $19 = $4;
  $20 = ($19|0)!=(0);
  $21 = $4;
  $22 = ($21|0)!=(4);
  $or$cond = $20 & $22;
  if (!($or$cond)) {
   $34 = $u;
   STACKTOP = sp;return ($34|0);
  }
  $23 = $u;
  $24 = $4;
  $25 = HEAP32[$g>>2]|0;
  $26 = ((($g)) + 4|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = (__ZL20stbi__convert_formatPhiijj($23,4,$24,$25,$27)|0);
  $u = $28;
  $34 = $u;
  STACKTOP = sp;return ($34|0);
 } else {
  $29 = ((($g)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ($30|0)!=(0|0);
  if (!($31)) {
   $34 = $u;
   STACKTOP = sp;return ($34|0);
  }
  $32 = ((($g)) + 8|0);
  $33 = HEAP32[$32>>2]|0;
  _free($33);
  $34 = $u;
  STACKTOP = sp;return ($34|0);
 }
 return (0)|0;
}
function __ZL19stbi__gif_load_nextP13stbi__contextP9stbi__gifPii($s,$g,$comp,$req_comp) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $h = 0, $i = 0, $len = 0, $o = 0, $prev_out = 0, $prev_trans = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $req_comp;
 $prev_out = 0;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = (__ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($9,$10,$11,0)|0);
  $13 = ($12|0)!=(0);
  if (!($13)) {
   $0 = 0;
   $346 = $0;
   STACKTOP = sp;return ($346|0);
  }
 }
 $14 = $2;
 $15 = ((($14)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $prev_out = $16;
 $17 = $2;
 $18 = HEAP32[$17>>2]|0;
 $19 = $18<<2;
 $20 = $2;
 $21 = ((($20)) + 4|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = Math_imul($19, $22)|0;
 $24 = (__ZL12stbi__mallocj($23)|0);
 $25 = $2;
 $26 = ((($25)) + 8|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $31 = (__ZL9stbi__errPKc(2292)|0);
  $32 = ($31|0)!=(0);
  $33 = $32 ? 0 : 0;
  $34 = $33;
  $0 = $34;
  $346 = $0;
  STACKTOP = sp;return ($346|0);
 }
 $35 = $2;
 $36 = ((($35)) + 32|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = $37 & 28;
 $39 = $38 >> 2;
 L10: do {
  switch ($39|0) {
  case 0:  {
   $40 = $2;
   $41 = $2;
   $42 = HEAP32[$41>>2]|0;
   $43 = $42<<2;
   $44 = $2;
   $45 = HEAP32[$44>>2]|0;
   $46 = $45<<2;
   $47 = $2;
   $48 = ((($47)) + 4|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = Math_imul($46, $49)|0;
   __ZL25stbi__fill_gif_backgroundP9stbi__gifiiii($40,0,0,$43,$50);
   break;
  }
  case 1:  {
   $51 = $prev_out;
   $52 = ($51|0)!=(0|0);
   if ($52) {
    $53 = $2;
    $54 = ((($53)) + 8|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = $prev_out;
    $57 = $2;
    $58 = HEAP32[$57>>2]|0;
    $59 = $58<<2;
    $60 = $2;
    $61 = ((($60)) + 4|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = Math_imul($59, $62)|0;
    _memcpy(($55|0),($56|0),($63|0))|0;
   }
   $64 = $prev_out;
   $65 = $2;
   $66 = ((($65)) + 12|0);
   HEAP32[$66>>2] = $64;
   break;
  }
  case 2:  {
   $67 = $prev_out;
   $68 = ($67|0)!=(0|0);
   if ($68) {
    $69 = $2;
    $70 = ((($69)) + 8|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = $prev_out;
    $73 = $2;
    $74 = HEAP32[$73>>2]|0;
    $75 = $74<<2;
    $76 = $2;
    $77 = ((($76)) + 4|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = Math_imul($75, $78)|0;
    _memcpy(($71|0),($72|0),($79|0))|0;
   }
   $80 = $2;
   $81 = $2;
   $82 = ((($81)) + 18488|0);
   $83 = HEAP32[$82>>2]|0;
   $84 = $2;
   $85 = ((($84)) + 18492|0);
   $86 = HEAP32[$85>>2]|0;
   $87 = $2;
   $88 = ((($87)) + 18496|0);
   $89 = HEAP32[$88>>2]|0;
   $90 = $2;
   $91 = ((($90)) + 18500|0);
   $92 = HEAP32[$91>>2]|0;
   __ZL25stbi__fill_gif_backgroundP9stbi__gifiiii($80,$83,$86,$89,$92);
   break;
  }
  case 3:  {
   $93 = $2;
   $94 = ((($93)) + 12|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = ($95|0)!=(0|0);
   if ($96) {
    $97 = $2;
    $98 = ((($97)) + 18492|0);
    $99 = HEAP32[$98>>2]|0;
    $i = $99;
    while(1) {
     $100 = $i;
     $101 = $2;
     $102 = ((($101)) + 18500|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($100|0)<($103|0);
     if (!($104)) {
      break L10;
     }
     $105 = $i;
     $106 = $2;
     $107 = ((($106)) + 18488|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = (($105) + ($108))|0;
     $110 = $2;
     $111 = ((($110)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = (($112) + ($109)|0);
     $114 = $i;
     $115 = $2;
     $116 = ((($115)) + 18488|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = (($114) + ($117))|0;
     $119 = $2;
     $120 = ((($119)) + 12|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = (($121) + ($118)|0);
     $123 = $2;
     $124 = ((($123)) + 18496|0);
     $125 = HEAP32[$124>>2]|0;
     $126 = $2;
     $127 = ((($126)) + 18488|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (($125) - ($128))|0;
     _memcpy(($113|0),($122|0),($129|0))|0;
     $130 = $2;
     $131 = HEAP32[$130>>2]|0;
     $132 = $131<<2;
     $133 = $i;
     $134 = (($133) + ($132))|0;
     $i = $134;
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 L25: while(1) {
  $135 = $1;
  $136 = (__ZL10stbi__get8P13stbi__context($135)|0);
  $137 = $136&255;
  switch ($137|0) {
  case 44:  {
   label = 19;
   break L25;
   break;
  }
  case 59:  {
   label = 46;
   break L25;
   break;
  }
  case 33:  {
   break;
  }
  default: {
   label = 47;
   break L25;
  }
  }
  $311 = $1;
  $312 = (__ZL10stbi__get8P13stbi__context($311)|0);
  $313 = $312&255;
  $314 = ($313|0)==(249);
  do {
   if ($314) {
    $315 = $1;
    $316 = (__ZL10stbi__get8P13stbi__context($315)|0);
    $317 = $316&255;
    $len = $317;
    $318 = $len;
    $319 = ($318|0)==(4);
    $320 = $1;
    if ($319) {
     $321 = (__ZL10stbi__get8P13stbi__context($320)|0);
     $322 = $321&255;
     $323 = $2;
     $324 = ((($323)) + 32|0);
     HEAP32[$324>>2] = $322;
     $325 = $1;
     $326 = (__ZL13stbi__get16leP13stbi__context($325)|0);
     $327 = $2;
     $328 = ((($327)) + 36|0);
     HEAP32[$328>>2] = $326;
     $329 = $1;
     $330 = (__ZL10stbi__get8P13stbi__context($329)|0);
     $331 = $330&255;
     $332 = $2;
     $333 = ((($332)) + 28|0);
     HEAP32[$333>>2] = $331;
     break;
    } else {
     $334 = $len;
     __ZL10stbi__skipP13stbi__contexti($320,$334);
     continue L25;
    }
   }
  } while(0);
  while(1) {
   $335 = $1;
   $336 = (__ZL10stbi__get8P13stbi__context($335)|0);
   $337 = $336&255;
   $len = $337;
   $338 = ($337|0)!=(0);
   if (!($338)) {
    continue L25;
   }
   $339 = $1;
   $340 = $len;
   __ZL10stbi__skipP13stbi__contexti($339,$340);
  }
 }
 if ((label|0) == 19) {
  $prev_trans = -1;
  $138 = $1;
  $139 = (__ZL13stbi__get16leP13stbi__context($138)|0);
  $x = $139;
  $140 = $1;
  $141 = (__ZL13stbi__get16leP13stbi__context($140)|0);
  $y = $141;
  $142 = $1;
  $143 = (__ZL13stbi__get16leP13stbi__context($142)|0);
  $w = $143;
  $144 = $1;
  $145 = (__ZL13stbi__get16leP13stbi__context($144)|0);
  $h = $145;
  $146 = $x;
  $147 = $w;
  $148 = (($146) + ($147))|0;
  $149 = $2;
  $150 = HEAP32[$149>>2]|0;
  $151 = ($148|0)>($150|0);
  if (!($151)) {
   $152 = $y;
   $153 = $h;
   $154 = (($152) + ($153))|0;
   $155 = $2;
   $156 = ((($155)) + 4|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ($154|0)>($157|0);
   if (!($158)) {
    $163 = $2;
    $164 = HEAP32[$163>>2]|0;
    $165 = $164<<2;
    $166 = $2;
    $167 = ((($166)) + 18512|0);
    HEAP32[$167>>2] = $165;
    $168 = $x;
    $169 = $168<<2;
    $170 = $2;
    $171 = ((($170)) + 18488|0);
    HEAP32[$171>>2] = $169;
    $172 = $y;
    $173 = $2;
    $174 = ((($173)) + 18512|0);
    $175 = HEAP32[$174>>2]|0;
    $176 = Math_imul($172, $175)|0;
    $177 = $2;
    $178 = ((($177)) + 18492|0);
    HEAP32[$178>>2] = $176;
    $179 = $2;
    $180 = ((($179)) + 18488|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = $w;
    $183 = $182<<2;
    $184 = (($181) + ($183))|0;
    $185 = $2;
    $186 = ((($185)) + 18496|0);
    HEAP32[$186>>2] = $184;
    $187 = $2;
    $188 = ((($187)) + 18492|0);
    $189 = HEAP32[$188>>2]|0;
    $190 = $h;
    $191 = $2;
    $192 = ((($191)) + 18512|0);
    $193 = HEAP32[$192>>2]|0;
    $194 = Math_imul($190, $193)|0;
    $195 = (($189) + ($194))|0;
    $196 = $2;
    $197 = ((($196)) + 18500|0);
    HEAP32[$197>>2] = $195;
    $198 = $2;
    $199 = ((($198)) + 18488|0);
    $200 = HEAP32[$199>>2]|0;
    $201 = $2;
    $202 = ((($201)) + 18504|0);
    HEAP32[$202>>2] = $200;
    $203 = $2;
    $204 = ((($203)) + 18492|0);
    $205 = HEAP32[$204>>2]|0;
    $206 = $2;
    $207 = ((($206)) + 18508|0);
    HEAP32[$207>>2] = $205;
    $208 = $1;
    $209 = (__ZL10stbi__get8P13stbi__context($208)|0);
    $210 = $209&255;
    $211 = $2;
    $212 = ((($211)) + 18484|0);
    HEAP32[$212>>2] = $210;
    $213 = $2;
    $214 = ((($213)) + 18484|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = $215 & 64;
    $217 = ($216|0)!=(0);
    $218 = $2;
    $219 = ((($218)) + 18512|0);
    $220 = HEAP32[$219>>2]|0;
    if ($217) {
     $221 = $220<<3;
     $222 = $2;
     $223 = ((($222)) + 18480|0);
     HEAP32[$223>>2] = $221;
     $224 = $2;
     $225 = ((($224)) + 18476|0);
     HEAP32[$225>>2] = 3;
    } else {
     $226 = $2;
     $227 = ((($226)) + 18480|0);
     HEAP32[$227>>2] = $220;
     $228 = $2;
     $229 = ((($228)) + 18476|0);
     HEAP32[$229>>2] = 0;
    }
    $230 = $2;
    $231 = ((($230)) + 18484|0);
    $232 = HEAP32[$231>>2]|0;
    $233 = $232 & 128;
    $234 = ($233|0)!=(0);
    if ($234) {
     $235 = $1;
     $236 = $2;
     $237 = ((($236)) + 1064|0);
     $238 = $2;
     $239 = ((($238)) + 18484|0);
     $240 = HEAP32[$239>>2]|0;
     $241 = $240 & 7;
     $242 = 2 << $241;
     $243 = $2;
     $244 = ((($243)) + 32|0);
     $245 = HEAP32[$244>>2]|0;
     $246 = $245 & 1;
     $247 = ($246|0)!=(0);
     if ($247) {
      $248 = $2;
      $249 = ((($248)) + 28|0);
      $250 = HEAP32[$249>>2]|0;
      $251 = $250;
     } else {
      $251 = -1;
     }
     __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($235,$237,$242,$251);
     $252 = $2;
     $253 = ((($252)) + 1064|0);
     $254 = $2;
     $255 = ((($254)) + 18472|0);
     HEAP32[$255>>2] = $253;
    } else {
     $256 = $2;
     $257 = ((($256)) + 16|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = $258 & 128;
     $260 = ($259|0)!=(0);
     if (!($260)) {
      $290 = (__ZL9stbi__errPKc(3796)|0);
      $291 = ($290|0)!=(0);
      $292 = $291 ? 0 : 0;
      $293 = $292;
      $0 = $293;
      $346 = $0;
      STACKTOP = sp;return ($346|0);
     }
     $261 = $2;
     $262 = ((($261)) + 28|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = ($263|0)>=(0);
     if ($264) {
      $265 = $2;
      $266 = ((($265)) + 32|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = $267 & 1;
      $269 = ($268|0)!=(0);
      if ($269) {
       $270 = $2;
       $271 = ((($270)) + 28|0);
       $272 = HEAP32[$271>>2]|0;
       $273 = $2;
       $274 = ((($273)) + 40|0);
       $275 = (($274) + ($272<<2)|0);
       $276 = ((($275)) + 3|0);
       $277 = HEAP8[$276>>0]|0;
       $278 = $277&255;
       $prev_trans = $278;
       $279 = $2;
       $280 = ((($279)) + 28|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = $2;
       $283 = ((($282)) + 40|0);
       $284 = (($283) + ($281<<2)|0);
       $285 = ((($284)) + 3|0);
       HEAP8[$285>>0] = 0;
      }
     }
     $286 = $2;
     $287 = ((($286)) + 40|0);
     $288 = $2;
     $289 = ((($288)) + 18472|0);
     HEAP32[$289>>2] = $287;
    }
    $294 = $1;
    $295 = $2;
    $296 = (__ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($294,$295)|0);
    $o = $296;
    $297 = $o;
    $298 = ($297|0)==(0|0);
    if ($298) {
     $0 = 0;
     $346 = $0;
     STACKTOP = sp;return ($346|0);
    }
    $299 = $prev_trans;
    $300 = ($299|0)!=(-1);
    if ($300) {
     $301 = $prev_trans;
     $302 = $301&255;
     $303 = $2;
     $304 = ((($303)) + 28|0);
     $305 = HEAP32[$304>>2]|0;
     $306 = $2;
     $307 = ((($306)) + 40|0);
     $308 = (($307) + ($305<<2)|0);
     $309 = ((($308)) + 3|0);
     HEAP8[$309>>0] = $302;
    }
    $310 = $o;
    $0 = $310;
    $346 = $0;
    STACKTOP = sp;return ($346|0);
   }
  }
  $159 = (__ZL9stbi__errPKc(3775)|0);
  $160 = ($159|0)!=(0);
  $161 = $160 ? 0 : 0;
  $162 = $161;
  $0 = $162;
  $346 = $0;
  STACKTOP = sp;return ($346|0);
 }
 else if ((label|0) == 46) {
  $341 = $1;
  $0 = $341;
  $346 = $0;
  STACKTOP = sp;return ($346|0);
 }
 else if ((label|0) == 47) {
  $342 = (__ZL9stbi__errPKc(3868)|0);
  $343 = ($342|0)!=(0);
  $344 = $343 ? 0 : 0;
  $345 = $344;
  $0 = $345;
  $346 = $0;
  STACKTOP = sp;return ($346|0);
 }
 return (0)|0;
}
function __ZL16stbi__gif_headerP13stbi__contextP9stbi__gifPii($s,$g,$comp,$is_info) {
 $s = $s|0;
 $g = $g|0;
 $comp = $comp|0;
 $is_info = $is_info|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $version = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $comp;
 $4 = $is_info;
 $5 = $1;
 $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
 $7 = $6&255;
 $8 = ($7|0)!=(71);
 if (!($8)) {
  $9 = $1;
  $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
  $11 = $10&255;
  $12 = ($11|0)!=(73);
  if (!($12)) {
   $13 = $1;
   $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
   $15 = $14&255;
   $16 = ($15|0)!=(70);
   if (!($16)) {
    $17 = $1;
    $18 = (__ZL10stbi__get8P13stbi__context($17)|0);
    $19 = $18&255;
    $20 = ($19|0)!=(56);
    if (!($20)) {
     $22 = $1;
     $23 = (__ZL10stbi__get8P13stbi__context($22)|0);
     $version = $23;
     $24 = $version;
     $25 = $24&255;
     $26 = ($25|0)!=(55);
     if ($26) {
      $27 = $version;
      $28 = $27&255;
      $29 = ($28|0)!=(57);
      if ($29) {
       $30 = (__ZL9stbi__errPKc(3767)|0);
       $0 = $30;
       $78 = $0;
       STACKTOP = sp;return ($78|0);
      }
     }
     $31 = $1;
     $32 = (__ZL10stbi__get8P13stbi__context($31)|0);
     $33 = $32&255;
     $34 = ($33|0)!=(97);
     if ($34) {
      $35 = (__ZL9stbi__errPKc(3767)|0);
      $0 = $35;
      $78 = $0;
      STACKTOP = sp;return ($78|0);
     }
     HEAP32[1892] = 8461;
     $36 = $1;
     $37 = (__ZL13stbi__get16leP13stbi__context($36)|0);
     $38 = $2;
     HEAP32[$38>>2] = $37;
     $39 = $1;
     $40 = (__ZL13stbi__get16leP13stbi__context($39)|0);
     $41 = $2;
     $42 = ((($41)) + 4|0);
     HEAP32[$42>>2] = $40;
     $43 = $1;
     $44 = (__ZL10stbi__get8P13stbi__context($43)|0);
     $45 = $44&255;
     $46 = $2;
     $47 = ((($46)) + 16|0);
     HEAP32[$47>>2] = $45;
     $48 = $1;
     $49 = (__ZL10stbi__get8P13stbi__context($48)|0);
     $50 = $49&255;
     $51 = $2;
     $52 = ((($51)) + 20|0);
     HEAP32[$52>>2] = $50;
     $53 = $1;
     $54 = (__ZL10stbi__get8P13stbi__context($53)|0);
     $55 = $54&255;
     $56 = $2;
     $57 = ((($56)) + 24|0);
     HEAP32[$57>>2] = $55;
     $58 = $2;
     $59 = ((($58)) + 28|0);
     HEAP32[$59>>2] = -1;
     $60 = $3;
     $61 = ($60|0)!=(0|0);
     if ($61) {
      $62 = $3;
      HEAP32[$62>>2] = 4;
     }
     $63 = $4;
     $64 = ($63|0)!=(0);
     if ($64) {
      $0 = 1;
      $78 = $0;
      STACKTOP = sp;return ($78|0);
     }
     $65 = $2;
     $66 = ((($65)) + 16|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = $67 & 128;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = $1;
      $71 = $2;
      $72 = ((($71)) + 40|0);
      $73 = $2;
      $74 = ((($73)) + 16|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = $75 & 7;
      $77 = 2 << $76;
      __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($70,$72,$77,-1);
     }
     $0 = 1;
     $78 = $0;
     STACKTOP = sp;return ($78|0);
    }
   }
  }
 }
 $21 = (__ZL9stbi__errPKc(3767)|0);
 $0 = $21;
 $78 = $0;
 STACKTOP = sp;return ($78|0);
}
function __ZL26stbi__gif_parse_colortableP13stbi__contextPA4_hii($s,$pal,$num_entries,$transp) {
 $s = $s|0;
 $pal = $pal|0;
 $num_entries = $num_entries|0;
 $transp = $transp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $pal;
 $2 = $num_entries;
 $3 = $transp;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = $2;
  $6 = ($4|0)<($5|0);
  if (!($6)) {
   break;
  }
  $7 = $0;
  $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
  $9 = $i;
  $10 = $1;
  $11 = (($10) + ($9<<2)|0);
  $12 = ((($11)) + 2|0);
  HEAP8[$12>>0] = $8;
  $13 = $0;
  $14 = (__ZL10stbi__get8P13stbi__context($13)|0);
  $15 = $i;
  $16 = $1;
  $17 = (($16) + ($15<<2)|0);
  $18 = ((($17)) + 1|0);
  HEAP8[$18>>0] = $14;
  $19 = $0;
  $20 = (__ZL10stbi__get8P13stbi__context($19)|0);
  $21 = $i;
  $22 = $1;
  $23 = (($22) + ($21<<2)|0);
  HEAP8[$23>>0] = $20;
  $24 = $3;
  $25 = $i;
  $26 = ($24|0)==($25|0);
  $27 = $26 ? 0 : 255;
  $28 = $27&255;
  $29 = $i;
  $30 = $1;
  $31 = (($30) + ($29<<2)|0);
  $32 = ((($31)) + 3|0);
  HEAP8[$32>>0] = $28;
  $33 = $i;
  $34 = (($33) + 1)|0;
  $i = $34;
 }
 STACKTOP = sp;return;
}
function __ZL25stbi__fill_gif_backgroundP9stbi__gifiiii($g,$x0,$y0,$x1,$y1) {
 $g = $g|0;
 $x0 = $x0|0;
 $y0 = $y0|0;
 $x1 = $x1|0;
 $y1 = $y1|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $p = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $x0;
 $2 = $y0;
 $3 = $x1;
 $4 = $y1;
 $5 = $0;
 $6 = ((($5)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $0;
 $9 = ((($8)) + 40|0);
 $10 = (($9) + ($7<<2)|0);
 $c = $10;
 $11 = $2;
 $y = $11;
 while(1) {
  $12 = $y;
  $13 = $4;
  $14 = ($12|0)<($13|0);
  if (!($14)) {
   break;
  }
  $15 = $1;
  $x = $15;
  while(1) {
   $16 = $x;
   $17 = $3;
   $18 = ($16|0)<($17|0);
   if (!($18)) {
    break;
   }
   $19 = $y;
   $20 = $x;
   $21 = (($19) + ($20))|0;
   $22 = $0;
   $23 = ((($22)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = (($24) + ($21)|0);
   $p = $25;
   $26 = $c;
   $27 = ((($26)) + 2|0);
   $28 = HEAP8[$27>>0]|0;
   $29 = $p;
   HEAP8[$29>>0] = $28;
   $30 = $c;
   $31 = ((($30)) + 1|0);
   $32 = HEAP8[$31>>0]|0;
   $33 = $p;
   $34 = ((($33)) + 1|0);
   HEAP8[$34>>0] = $32;
   $35 = $c;
   $36 = HEAP8[$35>>0]|0;
   $37 = $p;
   $38 = ((($37)) + 2|0);
   HEAP8[$38>>0] = $36;
   $39 = $p;
   $40 = ((($39)) + 3|0);
   HEAP8[$40>>0] = 0;
   $41 = $x;
   $42 = (($41) + 4)|0;
   $x = $42;
  }
  $43 = $0;
  $44 = HEAP32[$43>>2]|0;
  $45 = $44<<2;
  $46 = $y;
  $47 = (($46) + ($45))|0;
  $y = $47;
 }
 STACKTOP = sp;return;
}
function __ZL24stbi__process_gif_rasterP13stbi__contextP9stbi__gif($s,$g) {
 $s = $s|0;
 $g = $g|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avail = 0, $bits = 0, $clear = 0, $code = 0;
 var $codemask = 0, $codesize = 0, $first = 0, $init_code = 0, $len = 0, $lzw_cs = 0, $oldcode = 0, $or$cond = 0, $p = 0, $valid_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $g;
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $lzw_cs = $4;
 $5 = $lzw_cs;
 $6 = $5&255;
 $7 = ($6|0)>(12);
 if ($7) {
  $0 = 0;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 $8 = $lzw_cs;
 $9 = $8&255;
 $10 = 1 << $9;
 $clear = $10;
 $first = 1;
 $11 = $lzw_cs;
 $12 = $11&255;
 $13 = (($12) + 1)|0;
 $codesize = $13;
 $14 = $codesize;
 $15 = 1 << $14;
 $16 = (($15) - 1)|0;
 $codemask = $16;
 $bits = 0;
 $valid_bits = 0;
 $init_code = 0;
 while(1) {
  $17 = $init_code;
  $18 = $clear;
  $19 = ($17|0)<($18|0);
  if (!($19)) {
   break;
  }
  $20 = $init_code;
  $21 = $2;
  $22 = ((($21)) + 2088|0);
  $23 = (($22) + ($20<<2)|0);
  HEAP16[$23>>1] = -1;
  $24 = $init_code;
  $25 = $24&255;
  $26 = $init_code;
  $27 = $2;
  $28 = ((($27)) + 2088|0);
  $29 = (($28) + ($26<<2)|0);
  $30 = ((($29)) + 2|0);
  HEAP8[$30>>0] = $25;
  $31 = $init_code;
  $32 = $31&255;
  $33 = $init_code;
  $34 = $2;
  $35 = ((($34)) + 2088|0);
  $36 = (($35) + ($33<<2)|0);
  $37 = ((($36)) + 3|0);
  HEAP8[$37>>0] = $32;
  $38 = $init_code;
  $39 = (($38) + 1)|0;
  $init_code = $39;
 }
 $40 = $clear;
 $41 = (($40) + 2)|0;
 $avail = $41;
 $oldcode = -1;
 $len = 0;
 while(1) {
  $42 = $valid_bits;
  $43 = $codesize;
  $44 = ($42|0)<($43|0);
  if ($44) {
   $45 = $len;
   $46 = ($45|0)==(0);
   if ($46) {
    $47 = $1;
    $48 = (__ZL10stbi__get8P13stbi__context($47)|0);
    $49 = $48&255;
    $len = $49;
    $50 = $len;
    $51 = ($50|0)==(0);
    if ($51) {
     label = 10;
     break;
    }
   }
   $55 = $len;
   $56 = (($55) + -1)|0;
   $len = $56;
   $57 = $1;
   $58 = (__ZL10stbi__get8P13stbi__context($57)|0);
   $59 = $58&255;
   $60 = $valid_bits;
   $61 = $59 << $60;
   $62 = $bits;
   $63 = $62 | $61;
   $bits = $63;
   $64 = $valid_bits;
   $65 = (($64) + 8)|0;
   $valid_bits = $65;
   continue;
  }
  $66 = $bits;
  $67 = $codemask;
  $68 = $66 & $67;
  $code = $68;
  $69 = $codesize;
  $70 = $bits;
  $71 = $70 >> $69;
  $bits = $71;
  $72 = $codesize;
  $73 = $valid_bits;
  $74 = (($73) - ($72))|0;
  $valid_bits = $74;
  $75 = $code;
  $76 = $clear;
  $77 = ($75|0)==($76|0);
  if ($77) {
   $78 = $lzw_cs;
   $79 = $78&255;
   $80 = (($79) + 1)|0;
   $codesize = $80;
   $81 = $codesize;
   $82 = 1 << $81;
   $83 = (($82) - 1)|0;
   $codemask = $83;
   $84 = $clear;
   $85 = (($84) + 2)|0;
   $avail = $85;
   $oldcode = -1;
   $first = 0;
   continue;
  }
  $86 = $code;
  $87 = $clear;
  $88 = (($87) + 1)|0;
  $89 = ($86|0)==($88|0);
  if ($89) {
   label = 15;
   break;
  }
  $101 = $code;
  $102 = $avail;
  $103 = ($101|0)<=($102|0);
  if (!($103)) {
   label = 34;
   break;
  }
  $104 = $first;
  $105 = ($104|0)!=(0);
  if ($105) {
   label = 21;
   break;
  }
  $110 = $oldcode;
  $111 = ($110|0)>=(0);
  if ($111) {
   $112 = $avail;
   $113 = (($112) + 1)|0;
   $avail = $113;
   $114 = $2;
   $115 = ((($114)) + 2088|0);
   $116 = (($115) + ($112<<2)|0);
   $p = $116;
   $117 = $avail;
   $118 = ($117|0)>(4096);
   if ($118) {
    label = 24;
    break;
   }
   $123 = $oldcode;
   $124 = $123&65535;
   $125 = $p;
   HEAP16[$125>>1] = $124;
   $126 = $oldcode;
   $127 = $2;
   $128 = ((($127)) + 2088|0);
   $129 = (($128) + ($126<<2)|0);
   $130 = ((($129)) + 2|0);
   $131 = HEAP8[$130>>0]|0;
   $132 = $p;
   $133 = ((($132)) + 2|0);
   HEAP8[$133>>0] = $131;
   $134 = $code;
   $135 = $avail;
   $136 = ($134|0)==($135|0);
   if ($136) {
    $137 = $p;
    $138 = ((($137)) + 2|0);
    $139 = HEAP8[$138>>0]|0;
    $148 = $139;
   } else {
    $140 = $code;
    $141 = $2;
    $142 = ((($141)) + 2088|0);
    $143 = (($142) + ($140<<2)|0);
    $144 = ((($143)) + 2|0);
    $145 = HEAP8[$144>>0]|0;
    $148 = $145;
   }
   $146 = $p;
   $147 = ((($146)) + 3|0);
   HEAP8[$147>>0] = $148;
  } else {
   $149 = $code;
   $150 = $avail;
   $151 = ($149|0)==($150|0);
   if ($151) {
    label = 30;
    break;
   }
  }
  $156 = $2;
  $157 = $code;
  $158 = $157&65535;
  __ZL18stbi__out_gif_codeP9stbi__gift($156,$158);
  $159 = $avail;
  $160 = $codemask;
  $161 = $159 & $160;
  $162 = ($161|0)==(0);
  $163 = $avail;
  $164 = ($163|0)<=(4095);
  $or$cond = $162 & $164;
  if ($or$cond) {
   $165 = $codesize;
   $166 = (($165) + 1)|0;
   $codesize = $166;
   $167 = $codesize;
   $168 = 1 << $167;
   $169 = (($168) - 1)|0;
   $codemask = $169;
  }
  $170 = $code;
  $oldcode = $170;
 }
 if ((label|0) == 10) {
  $52 = $2;
  $53 = ((($52)) + 8|0);
  $54 = HEAP32[$53>>2]|0;
  $0 = $54;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 15) {
  $90 = $1;
  $91 = $len;
  __ZL10stbi__skipP13stbi__contexti($90,$91);
  while(1) {
   $92 = $1;
   $93 = (__ZL10stbi__get8P13stbi__context($92)|0);
   $94 = $93&255;
   $len = $94;
   $95 = ($94|0)>(0);
   if (!($95)) {
    break;
   }
   $96 = $1;
   $97 = $len;
   __ZL10stbi__skipP13stbi__contexti($96,$97);
  }
  $98 = $2;
  $99 = ((($98)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  $0 = $100;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 21) {
  $106 = (__ZL9stbi__errPKc(3816)|0);
  $107 = ($106|0)!=(0);
  $108 = $107 ? 0 : 0;
  $109 = $108;
  $0 = $109;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 24) {
  $119 = (__ZL9stbi__errPKc(3830)|0);
  $120 = ($119|0)!=(0);
  $121 = $120 ? 0 : 0;
  $122 = $121;
  $0 = $122;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 30) {
  $152 = (__ZL9stbi__errPKc(3845)|0);
  $153 = ($152|0)!=(0);
  $154 = $153 ? 0 : 0;
  $155 = $154;
  $0 = $155;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 else if ((label|0) == 34) {
  $171 = (__ZL9stbi__errPKc(3845)|0);
  $172 = ($171|0)!=(0);
  $173 = $172 ? 0 : 0;
  $174 = $173;
  $0 = $174;
  $175 = $0;
  STACKTOP = sp;return ($175|0);
 }
 return (0)|0;
}
function __ZL18stbi__out_gif_codeP9stbi__gift($g,$code) {
 $g = $g|0;
 $code = $code|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $g;
 $1 = $code;
 $2 = $1;
 $3 = $2&65535;
 $4 = $0;
 $5 = ((($4)) + 2088|0);
 $6 = (($5) + ($3<<2)|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7 << 16 >> 16;
 $9 = ($8|0)>=(0);
 if ($9) {
  $10 = $0;
  $11 = $1;
  $12 = $11&65535;
  $13 = $0;
  $14 = ((($13)) + 2088|0);
  $15 = (($14) + ($12<<2)|0);
  $16 = HEAP16[$15>>1]|0;
  __ZL18stbi__out_gif_codeP9stbi__gift($10,$16);
 }
 $17 = $0;
 $18 = ((($17)) + 18508|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $0;
 $21 = ((($20)) + 18500|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($19|0)>=($22|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = $0;
 $25 = ((($24)) + 18504|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $0;
 $28 = ((($27)) + 18508|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = (($26) + ($29))|0;
 $31 = $0;
 $32 = ((($31)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = (($33) + ($30)|0);
 $p = $34;
 $35 = $1;
 $36 = $35&65535;
 $37 = $0;
 $38 = ((($37)) + 2088|0);
 $39 = (($38) + ($36<<2)|0);
 $40 = ((($39)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42<<2;
 $44 = $0;
 $45 = ((($44)) + 18472|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = (($46) + ($43)|0);
 $c = $47;
 $48 = $c;
 $49 = ((($48)) + 3|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = ($51|0)>=(128);
 if ($52) {
  $53 = $c;
  $54 = ((($53)) + 2|0);
  $55 = HEAP8[$54>>0]|0;
  $56 = $p;
  HEAP8[$56>>0] = $55;
  $57 = $c;
  $58 = ((($57)) + 1|0);
  $59 = HEAP8[$58>>0]|0;
  $60 = $p;
  $61 = ((($60)) + 1|0);
  HEAP8[$61>>0] = $59;
  $62 = $c;
  $63 = HEAP8[$62>>0]|0;
  $64 = $p;
  $65 = ((($64)) + 2|0);
  HEAP8[$65>>0] = $63;
  $66 = $c;
  $67 = ((($66)) + 3|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $p;
  $70 = ((($69)) + 3|0);
  HEAP8[$70>>0] = $68;
 }
 $71 = $0;
 $72 = ((($71)) + 18504|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = (($73) + 4)|0;
 HEAP32[$72>>2] = $74;
 $75 = $0;
 $76 = ((($75)) + 18504|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $0;
 $79 = ((($78)) + 18496|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($77|0)>=($80|0);
 if (!($81)) {
  STACKTOP = sp;return;
 }
 $82 = $0;
 $83 = ((($82)) + 18488|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = $0;
 $86 = ((($85)) + 18504|0);
 HEAP32[$86>>2] = $84;
 $87 = $0;
 $88 = ((($87)) + 18480|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = $0;
 $91 = ((($90)) + 18508|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = (($92) + ($89))|0;
 HEAP32[$91>>2] = $93;
 while(1) {
  $94 = $0;
  $95 = ((($94)) + 18508|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = $0;
  $98 = ((($97)) + 18500|0);
  $99 = HEAP32[$98>>2]|0;
  $100 = ($96|0)>=($99|0);
  if (!($100)) {
   label = 11;
   break;
  }
  $101 = $0;
  $102 = ((($101)) + 18476|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ($103|0)>(0);
  if (!($104)) {
   label = 11;
   break;
  }
  $105 = $0;
  $106 = ((($105)) + 18476|0);
  $107 = HEAP32[$106>>2]|0;
  $108 = 1 << $107;
  $109 = $0;
  $110 = ((($109)) + 18512|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = Math_imul($108, $111)|0;
  $113 = $0;
  $114 = ((($113)) + 18480|0);
  HEAP32[$114>>2] = $112;
  $115 = $0;
  $116 = ((($115)) + 18492|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = $0;
  $119 = ((($118)) + 18480|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = $120 >> 1;
  $122 = (($117) + ($121))|0;
  $123 = $0;
  $124 = ((($123)) + 18508|0);
  HEAP32[$124>>2] = $122;
  $125 = $0;
  $126 = ((($125)) + 18476|0);
  $127 = HEAP32[$126>>2]|0;
  $128 = (($127) + -1)|0;
  HEAP32[$126>>2] = $128;
 }
 if ((label|0) == 11) {
  STACKTOP = sp;return;
 }
}
function __ZL14stbi__psd_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL13stbi__get32beP13stbi__context($1)|0);
 $3 = ($2|0)==(943870035);
 $4 = $3&1;
 $r = $4;
 $5 = $0;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $r;
 STACKTOP = sp;return ($6|0);
}
function __ZL14stbi__psd_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $bitdepth = 0, $channel = 0, $channelCount = 0, $compression = 0, $count = 0, $h = 0, $i = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $out = 0, $p = 0, $p1 = 0, $pixelCount = 0, $val = 0, $val2 = 0, $w = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL13stbi__get32beP13stbi__context($6)|0);
 $8 = ($7|0)!=(943870035);
 if ($8) {
  $9 = (__ZL9stbi__errPKc(3881)|0);
  $10 = ($9|0)!=(0);
  $11 = $10 ? 0 : 0;
  $12 = $11;
  $0 = $12;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $13 = $1;
 $14 = (__ZL13stbi__get16beP13stbi__context($13)|0);
 $15 = ($14|0)!=(1);
 if ($15) {
  $16 = (__ZL9stbi__errPKc(3889)|0);
  $17 = ($16|0)!=(0);
  $18 = $17 ? 0 : 0;
  $19 = $18;
  $0 = $19;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $20 = $1;
 __ZL10stbi__skipP13stbi__contexti($20,6);
 $21 = $1;
 $22 = (__ZL13stbi__get16beP13stbi__context($21)|0);
 $channelCount = $22;
 $23 = $channelCount;
 $24 = ($23|0)<(0);
 $25 = $channelCount;
 $26 = ($25|0)>(16);
 $or$cond = $24 | $26;
 if ($or$cond) {
  $27 = (__ZL9stbi__errPKc(3903)|0);
  $28 = ($27|0)!=(0);
  $29 = $28 ? 0 : 0;
  $30 = $29;
  $0 = $30;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $31 = $1;
 $32 = (__ZL13stbi__get32beP13stbi__context($31)|0);
 $h = $32;
 $33 = $1;
 $34 = (__ZL13stbi__get32beP13stbi__context($33)|0);
 $w = $34;
 $35 = $1;
 $36 = (__ZL13stbi__get16beP13stbi__context($35)|0);
 $bitdepth = $36;
 $37 = $bitdepth;
 $38 = ($37|0)!=(8);
 $39 = $bitdepth;
 $40 = ($39|0)!=(16);
 $or$cond3 = $38 & $40;
 if ($or$cond3) {
  $41 = (__ZL9stbi__errPKc(3923)|0);
  $42 = ($41|0)!=(0);
  $43 = $42 ? 0 : 0;
  $44 = $43;
  $0 = $44;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $45 = $1;
 $46 = (__ZL13stbi__get16beP13stbi__context($45)|0);
 $47 = ($46|0)!=(3);
 if ($47) {
  $48 = (__ZL9stbi__errPKc(3945)|0);
  $49 = ($48|0)!=(0);
  $50 = $49 ? 0 : 0;
  $51 = $50;
  $0 = $51;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $52 = $1;
 $53 = $1;
 $54 = (__ZL13stbi__get32beP13stbi__context($53)|0);
 __ZL10stbi__skipP13stbi__contexti($52,$54);
 $55 = $1;
 $56 = $1;
 $57 = (__ZL13stbi__get32beP13stbi__context($56)|0);
 __ZL10stbi__skipP13stbi__contexti($55,$57);
 $58 = $1;
 $59 = $1;
 $60 = (__ZL13stbi__get32beP13stbi__context($59)|0);
 __ZL10stbi__skipP13stbi__contexti($58,$60);
 $61 = $1;
 $62 = (__ZL13stbi__get16beP13stbi__context($61)|0);
 $compression = $62;
 $63 = $compression;
 $64 = ($63|0)>(1);
 if ($64) {
  $65 = (__ZL9stbi__errPKc(3001)|0);
  $66 = ($65|0)!=(0);
  $67 = $66 ? 0 : 0;
  $68 = $67;
  $0 = $68;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $69 = $w;
 $70 = $69<<2;
 $71 = $h;
 $72 = Math_imul($70, $71)|0;
 $73 = (__ZL12stbi__mallocj($72)|0);
 $out = $73;
 $74 = $out;
 $75 = ($74|0)!=(0|0);
 if (!($75)) {
  $76 = (__ZL9stbi__errPKc(2292)|0);
  $77 = ($76|0)!=(0);
  $78 = $77 ? 0 : 0;
  $79 = $78;
  $0 = $79;
  $221 = $0;
  STACKTOP = sp;return ($221|0);
 }
 $80 = $w;
 $81 = $h;
 $82 = Math_imul($80, $81)|0;
 $pixelCount = $82;
 $83 = $compression;
 $84 = ($83|0)!=(0);
 L29: do {
  if ($84) {
   $85 = $1;
   $86 = $h;
   $87 = $channelCount;
   $88 = Math_imul($86, $87)|0;
   $89 = $88<<1;
   __ZL10stbi__skipP13stbi__contexti($85,$89);
   $channel = 0;
   while(1) {
    $90 = $channel;
    $91 = ($90|0)<(4);
    if (!($91)) {
     break L29;
    }
    $92 = $out;
    $93 = $channel;
    $94 = (($92) + ($93)|0);
    $p = $94;
    $95 = $channel;
    $96 = $channelCount;
    $97 = ($95|0)>=($96|0);
    L34: do {
     if ($97) {
      $i = 0;
      while(1) {
       $98 = $i;
       $99 = $pixelCount;
       $100 = ($98|0)<($99|0);
       if (!($100)) {
        break L34;
       }
       $101 = $channel;
       $102 = ($101|0)==(3);
       $103 = $102 ? 255 : 0;
       $104 = $103&255;
       $105 = $p;
       HEAP8[$105>>0] = $104;
       $106 = $i;
       $107 = (($106) + 1)|0;
       $i = $107;
       $108 = $p;
       $109 = ((($108)) + 4|0);
       $p = $109;
      }
     } else {
      $count = 0;
      L40: while(1) {
       $110 = $count;
       $111 = $pixelCount;
       $112 = ($110|0)<($111|0);
       if (!($112)) {
        break L34;
       }
       $113 = $1;
       $114 = (__ZL10stbi__get8P13stbi__context($113)|0);
       $115 = $114&255;
       $len = $115;
       $116 = $len;
       $117 = ($116|0)==(128);
       if ($117) {
        continue;
       }
       $118 = $len;
       $119 = ($118|0)<(128);
       $120 = $len;
       if ($119) {
        $121 = (($120) + 1)|0;
        $len = $121;
        $122 = $len;
        $123 = $count;
        $124 = (($123) + ($122))|0;
        $count = $124;
        while(1) {
         $125 = $len;
         $126 = ($125|0)!=(0);
         if (!($126)) {
          continue L40;
         }
         $127 = $1;
         $128 = (__ZL10stbi__get8P13stbi__context($127)|0);
         $129 = $p;
         HEAP8[$129>>0] = $128;
         $130 = $p;
         $131 = ((($130)) + 4|0);
         $p = $131;
         $132 = $len;
         $133 = (($132) + -1)|0;
         $len = $133;
        }
       }
       $134 = ($120|0)>(128);
       if (!($134)) {
        continue;
       }
       $135 = $len;
       $136 = $135 ^ 255;
       $len = $136;
       $137 = $len;
       $138 = (($137) + 2)|0;
       $len = $138;
       $139 = $1;
       $140 = (__ZL10stbi__get8P13stbi__context($139)|0);
       $val = $140;
       $141 = $len;
       $142 = $count;
       $143 = (($142) + ($141))|0;
       $count = $143;
       while(1) {
        $144 = $len;
        $145 = ($144|0)!=(0);
        if (!($145)) {
         continue L40;
        }
        $146 = $val;
        $147 = $p;
        HEAP8[$147>>0] = $146;
        $148 = $p;
        $149 = ((($148)) + 4|0);
        $p = $149;
        $150 = $len;
        $151 = (($150) + -1)|0;
        $len = $151;
       }
      }
     }
    } while(0);
    $152 = $channel;
    $153 = (($152) + 1)|0;
    $channel = $153;
   }
  } else {
   $channel = 0;
   while(1) {
    $154 = $channel;
    $155 = ($154|0)<(4);
    if (!($155)) {
     break L29;
    }
    $156 = $out;
    $157 = $channel;
    $158 = (($156) + ($157)|0);
    $p1 = $158;
    $159 = $channel;
    $160 = $channelCount;
    $161 = ($159|0)>=($160|0);
    L59: do {
     if ($161) {
      $162 = $channel;
      $163 = ($162|0)==(3);
      $164 = $163 ? 255 : 0;
      $165 = $164&255;
      $val2 = $165;
      $i = 0;
      while(1) {
       $166 = $i;
       $167 = $pixelCount;
       $168 = ($166|0)<($167|0);
       if (!($168)) {
        break L59;
       }
       $169 = $val2;
       $170 = $p1;
       HEAP8[$170>>0] = $169;
       $171 = $i;
       $172 = (($171) + 1)|0;
       $i = $172;
       $173 = $p1;
       $174 = ((($173)) + 4|0);
       $p1 = $174;
      }
     } else {
      $175 = $bitdepth;
      $176 = ($175|0)==(16);
      $i = 0;
      if ($176) {
       while(1) {
        $177 = $i;
        $178 = $pixelCount;
        $179 = ($177|0)<($178|0);
        if (!($179)) {
         break L59;
        }
        $180 = $1;
        $181 = (__ZL13stbi__get16beP13stbi__context($180)|0);
        $182 = $181 >> 8;
        $183 = $182&255;
        $184 = $p1;
        HEAP8[$184>>0] = $183;
        $185 = $i;
        $186 = (($185) + 1)|0;
        $i = $186;
        $187 = $p1;
        $188 = ((($187)) + 4|0);
        $p1 = $188;
       }
      } else {
       while(1) {
        $189 = $i;
        $190 = $pixelCount;
        $191 = ($189|0)<($190|0);
        if (!($191)) {
         break L59;
        }
        $192 = $1;
        $193 = (__ZL10stbi__get8P13stbi__context($192)|0);
        $194 = $p1;
        HEAP8[$194>>0] = $193;
        $195 = $i;
        $196 = (($195) + 1)|0;
        $i = $196;
        $197 = $p1;
        $198 = ((($197)) + 4|0);
        $p1 = $198;
       }
      }
     }
    } while(0);
    $199 = $channel;
    $200 = (($199) + 1)|0;
    $channel = $200;
   }
  }
 } while(0);
 $201 = $5;
 $202 = ($201|0)!=(0);
 $203 = $5;
 $204 = ($203|0)!=(4);
 $or$cond5 = $202 & $204;
 if ($or$cond5) {
  $205 = $out;
  $206 = $5;
  $207 = $w;
  $208 = $h;
  $209 = (__ZL20stbi__convert_formatPhiijj($205,4,$206,$207,$208)|0);
  $out = $209;
  $210 = $out;
  $211 = ($210|0)==(0|0);
  if ($211) {
   $212 = $out;
   $0 = $212;
   $221 = $0;
   STACKTOP = sp;return ($221|0);
  }
 }
 $213 = $4;
 $214 = ($213|0)!=(0|0);
 if ($214) {
  $215 = $4;
  HEAP32[$215>>2] = 4;
 }
 $216 = $h;
 $217 = $3;
 HEAP32[$217>>2] = $216;
 $218 = $w;
 $219 = $2;
 HEAP32[$219>>2] = $218;
 $220 = $out;
 $0 = $220;
 $221 = $0;
 STACKTOP = sp;return ($221|0);
}
function __ZL14stbi__pic_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL19stbi__pic_test_coreP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL19stbi__pic_test_coreP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL13stbi__pic_is4P13stbi__contextPKc($2,3964)|0);
 $4 = ($3|0)!=(0);
 do {
  if ($4) {
   $i = 0;
   while(1) {
    $5 = $i;
    $6 = ($5|0)<(84);
    $7 = $1;
    if (!($6)) {
     break;
    }
    (__ZL10stbi__get8P13stbi__context($7)|0);
    $8 = $i;
    $9 = (($8) + 1)|0;
    $i = $9;
   }
   $10 = (__ZL13stbi__pic_is4P13stbi__contextPKc($7,3969)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while(0);
 $12 = $0;
 STACKTOP = sp;return ($12|0);
}
function __ZL13stbi__pic_is4P13stbi__contextPKc($s,$str) {
 $s = $s|0;
 $str = $str|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $str;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   label = 6;
   break;
  }
  $5 = $1;
  $6 = (__ZL10stbi__get8P13stbi__context($5)|0);
  $7 = $6&255;
  $8 = $i;
  $9 = $2;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = ($7|0)!=($12|0);
  if ($13) {
   label = 4;
   break;
  }
  $14 = $i;
  $15 = (($14) + 1)|0;
  $i = $15;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $16 = $0;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function __ZL14stbi__pic_loadP13stbi__contextPiS1_S1_i($s,$px,$py,$comp,$req_comp) {
 $s = $s|0;
 $px = $px|0;
 $py = $py|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $result = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $px;
 $3 = $py;
 $4 = $comp;
 $5 = $req_comp;
 $i = 0;
 while(1) {
  $6 = $i;
  $7 = ($6|0)<(92);
  $8 = $1;
  if (!($7)) {
   break;
  }
  (__ZL10stbi__get8P13stbi__context($8)|0);
  $9 = $i;
  $10 = (($9) + 1)|0;
  $i = $10;
 }
 $11 = (__ZL13stbi__get16beP13stbi__context($8)|0);
 $x = $11;
 $12 = $1;
 $13 = (__ZL13stbi__get16beP13stbi__context($12)|0);
 $y = $13;
 $14 = $1;
 $15 = (__ZL12stbi__at_eofP13stbi__context($14)|0);
 $16 = ($15|0)!=(0);
 if ($16) {
  $17 = (__ZL9stbi__errPKc(3974)|0);
  $18 = ($17|0)!=(0);
  $19 = $18 ? 0 : 0;
  $20 = $19;
  $0 = $20;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $21 = $x;
 $22 = (268435456 / ($21|0))&-1;
 $23 = $y;
 $24 = ($22|0)<($23|0);
 if ($24) {
  $25 = (__ZL9stbi__errPKc(2282)|0);
  $26 = ($25|0)!=(0);
  $27 = $26 ? 0 : 0;
  $28 = $27;
  $0 = $28;
  $64 = $0;
  STACKTOP = sp;return ($64|0);
 }
 $29 = $1;
 (__ZL13stbi__get32beP13stbi__context($29)|0);
 $30 = $1;
 (__ZL13stbi__get16beP13stbi__context($30)|0);
 $31 = $1;
 (__ZL13stbi__get16beP13stbi__context($31)|0);
 $32 = $x;
 $33 = $y;
 $34 = Math_imul($32, $33)|0;
 $35 = $34<<2;
 $36 = (__ZL12stbi__mallocj($35)|0);
 $result = $36;
 $37 = $result;
 $38 = $x;
 $39 = $y;
 $40 = Math_imul($38, $39)|0;
 $41 = $40<<2;
 _memset(($37|0),-1,($41|0))|0;
 $42 = $1;
 $43 = $x;
 $44 = $y;
 $45 = $4;
 $46 = $result;
 $47 = (__ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($42,$43,$44,$45,$46)|0);
 $48 = ($47|0)!=(0|0);
 if (!($48)) {
  $49 = $result;
  _free($49);
  $result = 0;
 }
 $50 = $x;
 $51 = $2;
 HEAP32[$51>>2] = $50;
 $52 = $y;
 $53 = $3;
 HEAP32[$53>>2] = $52;
 $54 = $5;
 $55 = ($54|0)==(0);
 if ($55) {
  $56 = $4;
  $57 = HEAP32[$56>>2]|0;
  $5 = $57;
 }
 $58 = $result;
 $59 = $5;
 $60 = $x;
 $61 = $y;
 $62 = (__ZL20stbi__convert_formatPhiijj($58,4,$59,$60,$61)|0);
 $result = $62;
 $63 = $result;
 $0 = $63;
 $64 = $0;
 STACKTOP = sp;return ($64|0);
}
function __ZL19stbi__pic_load_coreP13stbi__contextiiPiPh($s,$width,$height,$comp,$result) {
 $s = $s|0;
 $width = $width|0;
 $height = $height|0;
 $comp = $comp|0;
 $result = $result|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $act_comp = 0, $chained = 0, $count = 0, $count3 = 0, $dest = 0;
 var $i = 0, $i4 = 0, $left = 0, $left2 = 0, $num_packets = 0, $packet = 0, $packet1 = 0, $packet_idx = 0, $packets = 0, $value = 0, $value5 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $packets = sp + 90|0;
 $value = sp + 84|0;
 $value5 = sp + 80|0;
 $1 = $s;
 $2 = $width;
 $3 = $height;
 $4 = $comp;
 $5 = $result;
 $act_comp = 0;
 $num_packets = 0;
 while(1) {
  $6 = $num_packets;
  $7 = ($6|0)==(10);
  if ($7) {
   label = 3;
   break;
  }
  $12 = $num_packets;
  $13 = (($12) + 1)|0;
  $num_packets = $13;
  $14 = (($packets) + (($12*3)|0)|0);
  $packet = $14;
  $15 = $1;
  $16 = (__ZL10stbi__get8P13stbi__context($15)|0);
  $17 = $16&255;
  $chained = $17;
  $18 = $1;
  $19 = (__ZL10stbi__get8P13stbi__context($18)|0);
  $20 = $packet;
  HEAP8[$20>>0] = $19;
  $21 = $1;
  $22 = (__ZL10stbi__get8P13stbi__context($21)|0);
  $23 = $packet;
  $24 = ((($23)) + 1|0);
  HEAP8[$24>>0] = $22;
  $25 = $1;
  $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
  $27 = $packet;
  $28 = ((($27)) + 2|0);
  HEAP8[$28>>0] = $26;
  $29 = $packet;
  $30 = ((($29)) + 2|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31&255;
  $33 = $act_comp;
  $34 = $33 | $32;
  $act_comp = $34;
  $35 = $1;
  $36 = (__ZL12stbi__at_eofP13stbi__context($35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   label = 5;
   break;
  }
  $42 = $packet;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = ($44|0)!=(8);
  if ($45) {
   label = 7;
   break;
  }
  $50 = $chained;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   label = 9;
   break;
  }
 }
 if ((label|0) == 3) {
  $8 = (__ZL9stbi__errPKc(3983)|0);
  $9 = ($8|0)!=(0);
  $10 = $9 ? 0 : 0;
  $11 = $10;
  $0 = $11;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 5) {
  $38 = (__ZL9stbi__errPKc(3974)|0);
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 0;
  $41 = $40;
  $0 = $41;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 7) {
  $46 = (__ZL9stbi__errPKc(3983)|0);
  $47 = ($46|0)!=(0);
  $48 = $47 ? 0 : 0;
  $49 = $48;
  $0 = $49;
  $214 = $0;
  STACKTOP = sp;return ($214|0);
 }
 else if ((label|0) == 9) {
  $52 = $act_comp;
  $53 = $52 & 16;
  $54 = ($53|0)!=(0);
  $55 = $54 ? 4 : 3;
  $56 = $4;
  HEAP32[$56>>2] = $55;
  $y = 0;
  L10: while(1) {
   $57 = $y;
   $58 = $3;
   $59 = ($57|0)<($58|0);
   if (!($59)) {
    label = 57;
    break;
   }
   $packet_idx = 0;
   while(1) {
    $60 = $packet_idx;
    $61 = $num_packets;
    $62 = ($60|0)<($61|0);
    if (!($62)) {
     break;
    }
    $63 = $packet_idx;
    $64 = (($packets) + (($63*3)|0)|0);
    $packet1 = $64;
    $65 = $5;
    $66 = $y;
    $67 = $2;
    $68 = Math_imul($66, $67)|0;
    $69 = $68<<2;
    $70 = (($65) + ($69)|0);
    $dest = $70;
    $71 = $packet1;
    $72 = ((($71)) + 1|0);
    $73 = HEAP8[$72>>0]|0;
    $74 = $73&255;
    L16: do {
     switch ($74|0) {
     case 0:  {
      $x = 0;
      while(1) {
       $79 = $x;
       $80 = $2;
       $81 = ($79|0)<($80|0);
       if (!($81)) {
        break L16;
       }
       $82 = $1;
       $83 = $packet1;
       $84 = ((($83)) + 2|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = $85&255;
       $87 = $dest;
       $88 = (__ZL13stbi__readvalP13stbi__contextiPh($82,$86,$87)|0);
       $89 = ($88|0)!=(0|0);
       if (!($89)) {
        label = 18;
        break L10;
       }
       $90 = $x;
       $91 = (($90) + 1)|0;
       $x = $91;
       $92 = $dest;
       $93 = ((($92)) + 4|0);
       $dest = $93;
      }
      break;
     }
     case 1:  {
      $94 = $2;
      $left = $94;
      while(1) {
       $95 = $left;
       $96 = ($95|0)>(0);
       if (!($96)) {
        break L16;
       }
       $97 = $1;
       $98 = (__ZL10stbi__get8P13stbi__context($97)|0);
       $count = $98;
       $99 = $1;
       $100 = (__ZL12stbi__at_eofP13stbi__context($99)|0);
       $101 = ($100|0)!=(0);
       if ($101) {
        label = 23;
        break L10;
       }
       $106 = $count;
       $107 = $106&255;
       $108 = $left;
       $109 = ($107|0)>($108|0);
       if ($109) {
        $110 = $left;
        $111 = $110&255;
        $count = $111;
       }
       $112 = $1;
       $113 = $packet1;
       $114 = ((($113)) + 2|0);
       $115 = HEAP8[$114>>0]|0;
       $116 = $115&255;
       $117 = (__ZL13stbi__readvalP13stbi__contextiPh($112,$116,$value)|0);
       $118 = ($117|0)!=(0|0);
       if (!($118)) {
        label = 27;
        break L10;
       }
       $i = 0;
       while(1) {
        $119 = $i;
        $120 = $count;
        $121 = $120&255;
        $122 = ($119|0)<($121|0);
        if (!($122)) {
         break;
        }
        $123 = $packet1;
        $124 = ((($123)) + 2|0);
        $125 = HEAP8[$124>>0]|0;
        $126 = $125&255;
        $127 = $dest;
        __ZL13stbi__copyvaliPhPKh($126,$127,$value);
        $128 = $i;
        $129 = (($128) + 1)|0;
        $i = $129;
        $130 = $dest;
        $131 = ((($130)) + 4|0);
        $dest = $131;
       }
       $132 = $count;
       $133 = $132&255;
       $134 = $left;
       $135 = (($134) - ($133))|0;
       $left = $135;
      }
      break;
     }
     case 2:  {
      $136 = $2;
      $left2 = $136;
      while(1) {
       $137 = $left2;
       $138 = ($137|0)>(0);
       if (!($138)) {
        break L16;
       }
       $139 = $1;
       $140 = (__ZL10stbi__get8P13stbi__context($139)|0);
       $141 = $140&255;
       $count3 = $141;
       $142 = $1;
       $143 = (__ZL12stbi__at_eofP13stbi__context($142)|0);
       $144 = ($143|0)!=(0);
       if ($144) {
        label = 35;
        break L10;
       }
       $149 = $count3;
       $150 = ($149|0)>=(128);
       $151 = $count3;
       L40: do {
        if ($150) {
         $152 = ($151|0)==(128);
         if ($152) {
          $153 = $1;
          $154 = (__ZL13stbi__get16beP13stbi__context($153)|0);
          $count3 = $154;
         } else {
          $155 = $count3;
          $156 = (($155) - 127)|0;
          $count3 = $156;
         }
         $157 = $count3;
         $158 = $left2;
         $159 = ($157|0)>($158|0);
         if ($159) {
          label = 41;
          break L10;
         }
         $164 = $1;
         $165 = $packet1;
         $166 = ((($165)) + 2|0);
         $167 = HEAP8[$166>>0]|0;
         $168 = $167&255;
         $169 = (__ZL13stbi__readvalP13stbi__contextiPh($164,$168,$value5)|0);
         $170 = ($169|0)!=(0|0);
         if (!($170)) {
          label = 43;
          break L10;
         }
         $i4 = 0;
         while(1) {
          $171 = $i4;
          $172 = $count3;
          $173 = ($171|0)<($172|0);
          if (!($173)) {
           break L40;
          }
          $174 = $packet1;
          $175 = ((($174)) + 2|0);
          $176 = HEAP8[$175>>0]|0;
          $177 = $176&255;
          $178 = $dest;
          __ZL13stbi__copyvaliPhPKh($177,$178,$value5);
          $179 = $i4;
          $180 = (($179) + 1)|0;
          $i4 = $180;
          $181 = $dest;
          $182 = ((($181)) + 4|0);
          $dest = $182;
         }
        } else {
         $183 = (($151) + 1)|0;
         $count3 = $183;
         $184 = $count3;
         $185 = $left2;
         $186 = ($184|0)>($185|0);
         if ($186) {
          label = 48;
          break L10;
         }
         $i4 = 0;
         while(1) {
          $191 = $i4;
          $192 = $count3;
          $193 = ($191|0)<($192|0);
          if (!($193)) {
           break L40;
          }
          $194 = $1;
          $195 = $packet1;
          $196 = ((($195)) + 2|0);
          $197 = HEAP8[$196>>0]|0;
          $198 = $197&255;
          $199 = $dest;
          $200 = (__ZL13stbi__readvalP13stbi__contextiPh($194,$198,$199)|0);
          $201 = ($200|0)!=(0|0);
          if (!($201)) {
           label = 52;
           break L10;
          }
          $202 = $i4;
          $203 = (($202) + 1)|0;
          $i4 = $203;
          $204 = $dest;
          $205 = ((($204)) + 4|0);
          $dest = $205;
         }
        }
       } while(0);
       $206 = $count3;
       $207 = $left2;
       $208 = (($207) - ($206))|0;
       $left2 = $208;
      }
      break;
     }
     default: {
      label = 14;
      break L10;
     }
     }
    } while(0);
    $209 = $packet_idx;
    $210 = (($209) + 1)|0;
    $packet_idx = $210;
   }
   $211 = $y;
   $212 = (($211) + 1)|0;
   $y = $212;
  }
  switch (label|0) {
   case 14: {
    $75 = (__ZL9stbi__errPKc(3983)|0);
    $76 = ($75|0)!=(0);
    $77 = $76 ? 0 : 0;
    $78 = $77;
    $0 = $78;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 18: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 23: {
    $102 = (__ZL9stbi__errPKc(3974)|0);
    $103 = ($102|0)!=(0);
    $104 = $103 ? 0 : 0;
    $105 = $104;
    $0 = $105;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 27: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 35: {
    $145 = (__ZL9stbi__errPKc(3974)|0);
    $146 = ($145|0)!=(0);
    $147 = $146 ? 0 : 0;
    $148 = $147;
    $0 = $148;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 41: {
    $160 = (__ZL9stbi__errPKc(3974)|0);
    $161 = ($160|0)!=(0);
    $162 = $161 ? 0 : 0;
    $163 = $162;
    $0 = $163;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 43: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 48: {
    $187 = (__ZL9stbi__errPKc(3974)|0);
    $188 = ($187|0)!=(0);
    $189 = $188 ? 0 : 0;
    $190 = $189;
    $0 = $190;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 52: {
    $0 = 0;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
   case 57: {
    $213 = $5;
    $0 = $213;
    $214 = $0;
    STACKTOP = sp;return ($214|0);
    break;
   }
  }
 }
 return (0)|0;
}
function __ZL13stbi__readvalP13stbi__contextiPh($s,$channel,$dest) {
 $s = $s|0;
 $channel = $channel|0;
 $dest = $dest|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $channel;
 $3 = $dest;
 $mask = 128;
 $i = 0;
 while(1) {
  $4 = $i;
  $5 = ($4|0)<(4);
  if (!($5)) {
   label = 8;
   break;
  }
  $6 = $2;
  $7 = $mask;
  $8 = $6 & $7;
  $9 = ($8|0)!=(0);
  if ($9) {
   $10 = $1;
   $11 = (__ZL12stbi__at_eofP13stbi__context($10)|0);
   $12 = ($11|0)!=(0);
   if ($12) {
    label = 5;
    break;
   }
   $17 = $1;
   $18 = (__ZL10stbi__get8P13stbi__context($17)|0);
   $19 = $i;
   $20 = $3;
   $21 = (($20) + ($19)|0);
   HEAP8[$21>>0] = $18;
  }
  $22 = $i;
  $23 = (($22) + 1)|0;
  $i = $23;
  $24 = $mask;
  $25 = $24 >> 1;
  $mask = $25;
 }
 if ((label|0) == 5) {
  $13 = (__ZL9stbi__errPKc(3974)|0);
  $14 = ($13|0)!=(0);
  $15 = $14 ? 0 : 0;
  $16 = $15;
  $0 = $16;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 else if ((label|0) == 8) {
  $26 = $3;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;return ($27|0);
 }
 return (0)|0;
}
function __ZL13stbi__copyvaliPhPKh($channel,$dest,$src) {
 $channel = $channel|0;
 $dest = $dest|0;
 $src = $src|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $i = 0, $mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $channel;
 $1 = $dest;
 $2 = $src;
 $mask = 128;
 $i = 0;
 while(1) {
  $3 = $i;
  $4 = ($3|0)<(4);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = $mask;
  $7 = $5 & $6;
  $8 = ($7|0)!=(0);
  if ($8) {
   $9 = $i;
   $10 = $2;
   $11 = (($10) + ($9)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $i;
   $14 = $1;
   $15 = (($14) + ($13)|0);
   HEAP8[$15>>0] = $12;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
  $18 = $mask;
  $19 = $18 >> 1;
  $mask = $19;
 }
 STACKTOP = sp;return;
}
function __ZL14stbi__pnm_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $p = 0, $t = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $p = $3;
 $4 = $1;
 $5 = (__ZL10stbi__get8P13stbi__context($4)|0);
 $t = $5;
 $6 = $p;
 $7 = $6 << 24 >> 24;
 $8 = ($7|0)!=(80);
 do {
  if (!($8)) {
   $9 = $t;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)!=(53);
   if ($11) {
    $12 = $t;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)!=(54);
    if ($14) {
     break;
    }
   }
   $0 = 1;
   $16 = $0;
   STACKTOP = sp;return ($16|0);
  }
 } while(0);
 $15 = $1;
 __ZL12stbi__rewindP13stbi__context($15);
 $0 = 0;
 $16 = $0;
 STACKTOP = sp;return ($16|0);
}
function __ZL14stbi__pnm_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = $1;
 $8 = $1;
 $9 = ((($8)) + 4|0);
 $10 = $1;
 $11 = ((($10)) + 8|0);
 $12 = (__ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($6,$7,$9,$11)|0);
 $13 = ($12|0)!=(0);
 if (!($13)) {
  $0 = 0;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $14 = $1;
 $15 = HEAP32[$14>>2]|0;
 $16 = $2;
 HEAP32[$16>>2] = $15;
 $17 = $1;
 $18 = ((($17)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $3;
 HEAP32[$20>>2] = $19;
 $21 = $1;
 $22 = ((($21)) + 8|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $4;
 HEAP32[$24>>2] = $23;
 $25 = $1;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = $1;
 $29 = HEAP32[$28>>2]|0;
 $30 = Math_imul($27, $29)|0;
 $31 = $1;
 $32 = ((($31)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = Math_imul($30, $33)|0;
 $35 = (__ZL12stbi__mallocj($34)|0);
 $out = $35;
 $36 = $out;
 $37 = ($36|0)!=(0|0);
 if (!($37)) {
  $38 = (__ZL9stbi__errPKc(2292)|0);
  $39 = ($38|0)!=(0);
  $40 = $39 ? 0 : 0;
  $41 = $40;
  $0 = $41;
  $76 = $0;
  STACKTOP = sp;return ($76|0);
 }
 $42 = $1;
 $43 = $out;
 $44 = $1;
 $45 = ((($44)) + 8|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $1;
 $48 = HEAP32[$47>>2]|0;
 $49 = Math_imul($46, $48)|0;
 $50 = $1;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = Math_imul($49, $52)|0;
 (__ZL10stbi__getnP13stbi__contextPhi($42,$43,$53)|0);
 $54 = $5;
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = $5;
  $57 = $1;
  $58 = ((($57)) + 8|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($56|0)!=($59|0);
  if ($60) {
   $61 = $out;
   $62 = $1;
   $63 = ((($62)) + 8|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $5;
   $66 = $1;
   $67 = HEAP32[$66>>2]|0;
   $68 = $1;
   $69 = ((($68)) + 4|0);
   $70 = HEAP32[$69>>2]|0;
   $71 = (__ZL20stbi__convert_formatPhiijj($61,$64,$65,$67,$70)|0);
   $out = $71;
   $72 = $out;
   $73 = ($72|0)==(0|0);
   if ($73) {
    $74 = $out;
    $0 = $74;
    $76 = $0;
    STACKTOP = sp;return ($76|0);
   }
  }
 }
 $75 = $out;
 $0 = $75;
 $76 = $0;
 STACKTOP = sp;return ($76|0);
}
function __ZL14stbi__pnm_infoP13stbi__contextPiS1_S1_($s,$x,$y,$comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $c = 0, $maxv = 0, $p = 0, $t = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp + 26|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $1;
 __ZL12stbi__rewindP13stbi__context($5);
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $p = $7;
 $8 = $1;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $t = $9;
 $10 = $p;
 $11 = $10 << 24 >> 24;
 $12 = ($11|0)!=(80);
 do {
  if (!($12)) {
   $13 = $t;
   $14 = $13 << 24 >> 24;
   $15 = ($14|0)!=(53);
   if ($15) {
    $16 = $t;
    $17 = $16 << 24 >> 24;
    $18 = ($17|0)!=(54);
    if ($18) {
     break;
    }
   }
   $20 = $t;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)==(54);
   $23 = $22 ? 3 : 1;
   $24 = $4;
   HEAP32[$24>>2] = $23;
   $25 = $1;
   $26 = (__ZL10stbi__get8P13stbi__context($25)|0);
   HEAP8[$c>>0] = $26;
   $27 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($27,$c);
   $28 = $1;
   $29 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($28,$c)|0);
   $30 = $2;
   HEAP32[$30>>2] = $29;
   $31 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($31,$c);
   $32 = $1;
   $33 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($32,$c)|0);
   $34 = $3;
   HEAP32[$34>>2] = $33;
   $35 = $1;
   __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($35,$c);
   $36 = $1;
   $37 = (__ZL20stbi__pnm_getintegerP13stbi__contextPc($36,$c)|0);
   $maxv = $37;
   $38 = $maxv;
   $39 = ($38|0)>(255);
   if ($39) {
    $40 = (__ZL9stbi__errPKc(3994)|0);
    $0 = $40;
    $41 = $0;
    STACKTOP = sp;return ($41|0);
   } else {
    $0 = 1;
    $41 = $0;
    STACKTOP = sp;return ($41|0);
   }
  }
 } while(0);
 $19 = $1;
 __ZL12stbi__rewindP13stbi__context($19);
 $0 = 0;
 $41 = $0;
 STACKTOP = sp;return ($41|0);
}
function __ZL25stbi__pnm_skip_whitespaceP13stbi__contextPc($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 while(1) {
  $2 = $0;
  $3 = (__ZL12stbi__at_eofP13stbi__context($2)|0);
  $4 = ($3|0)!=(0);
  if ($4) {
   label = 5;
   break;
  }
  $5 = $1;
  $6 = HEAP8[$5>>0]|0;
  $7 = (__ZL17stbi__pnm_isspacec($6)|0);
  $8 = ($7|0)!=(0);
  if (!($8)) {
   label = 5;
   break;
  }
  $9 = $0;
  $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
  $11 = $1;
  HEAP8[$11>>0] = $10;
 }
 if ((label|0) == 5) {
  STACKTOP = sp;return;
 }
}
function __ZL17stbi__pnm_isspacec($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)==(32);
 if ($3) {
  $20 = 1;
 } else {
  $4 = $0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)==(9);
  if ($6) {
   $20 = 1;
  } else {
   $7 = $0;
   $8 = $7 << 24 >> 24;
   $9 = ($8|0)==(10);
   if ($9) {
    $20 = 1;
   } else {
    $10 = $0;
    $11 = $10 << 24 >> 24;
    $12 = ($11|0)==(11);
    if ($12) {
     $20 = 1;
    } else {
     $13 = $0;
     $14 = $13 << 24 >> 24;
     $15 = ($14|0)==(12);
     if ($15) {
      $20 = 1;
     } else {
      $16 = $0;
      $17 = $16 << 24 >> 24;
      $18 = ($17|0)==(13);
      $20 = $18;
     }
    }
   }
  }
 }
 $19 = $20&1;
 STACKTOP = sp;return ($19|0);
}
function __ZL20stbi__pnm_getintegerP13stbi__contextPc($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $c;
 $value = 0;
 while(1) {
  $2 = $0;
  $3 = (__ZL12stbi__at_eofP13stbi__context($2)|0);
  $4 = ($3|0)!=(0);
  if ($4) {
   $19 = 0;
  } else {
   $5 = $1;
   $6 = HEAP8[$5>>0]|0;
   $7 = (__ZL17stbi__pnm_isdigitc($6)|0);
   $8 = ($7|0)!=(0);
   $19 = $8;
  }
  $9 = $value;
  if (!($19)) {
   break;
  }
  $10 = ($9*10)|0;
  $11 = $1;
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = (($13) - 48)|0;
  $15 = (($10) + ($14))|0;
  $value = $15;
  $16 = $0;
  $17 = (__ZL10stbi__get8P13stbi__context($16)|0);
  $18 = $1;
  HEAP8[$18>>0] = $17;
 }
 STACKTOP = sp;return ($9|0);
}
function __ZL17stbi__pnm_isdigitc($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $c;
 $1 = $0;
 $2 = $1 << 24 >> 24;
 $3 = ($2|0)>=(48);
 if ($3) {
  $4 = $0;
  $5 = $4 << 24 >> 24;
  $6 = ($5|0)<=(57);
  $8 = $6;
 } else {
  $8 = 0;
 }
 $7 = $8&1;
 STACKTOP = sp;return ($7|0);
}
function __ZL14stbi__hdr_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $0;
 $2 = (__ZL19stbi__hdr_test_coreP13stbi__context($1)|0);
 $r = $2;
 $3 = $0;
 __ZL12stbi__rewindP13stbi__context($3);
 $4 = $r;
 STACKTOP = sp;return ($4|0);
}
function __ZL19stbi__hdr_test_coreP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0;
 var $signature = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $signature = 4010;
 $i = 0;
 while(1) {
  $2 = $i;
  $3 = $signature;
  $4 = (($3) + ($2)|0);
  $5 = HEAP8[$4>>0]|0;
  $6 = ($5<<24>>24)!=(0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = $1;
  $8 = (__ZL10stbi__get8P13stbi__context($7)|0);
  $9 = $8&255;
  $10 = $i;
  $11 = $signature;
  $12 = (($11) + ($10)|0);
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($9|0)!=($14|0);
  if ($15) {
   label = 4;
   break;
  }
  $16 = $i;
  $17 = (($16) + 1)|0;
  $i = $17;
 }
 if ((label|0) == 4) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 else if ((label|0) == 6) {
  $0 = 1;
  $18 = $0;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function __ZL14stbi__hdr_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buffer = 0, $c1 = 0, $c2 = 0, $count = 0, $hdr_data = 0, $height = 0, $i = 0, $j = 0, $k = 0, $len = 0, $or$cond = 0, $or$cond3 = 0, $rgbe = 0, $rgbe1 = 0;
 var $scanline = 0, $token = 0, $valid = 0, $value = 0, $width = 0, $z = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1120|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $buffer = sp + 88|0;
 $token = sp + 48|0;
 $rgbe = sp + 80|0;
 $rgbe1 = sp + 76|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $valid = 0;
 $6 = $1;
 $7 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($6,$buffer)|0);
 $8 = (_strcmp($7,4022)|0);
 $9 = ($8|0)!=(0);
 if ($9) {
  $10 = (__ZL9stbi__errPKc(4033)|0);
  $11 = ($10|0)!=(0);
  $12 = $11 ? 0 : 0;
  $13 = $12;
  $0 = $13;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 while(1) {
  $14 = $1;
  $15 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($14,$buffer)|0);
  HEAP32[$token>>2] = $15;
  $16 = HEAP32[$token>>2]|0;
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(0);
  if ($19) {
   break;
  }
  $20 = HEAP32[$token>>2]|0;
  $21 = (_strcmp($20,4041)|0);
  $22 = ($21|0)==(0);
  if (!($22)) {
   continue;
  }
  $valid = 1;
 }
 $23 = $valid;
 $24 = ($23|0)!=(0);
 if (!($24)) {
  $25 = (__ZL9stbi__errPKc(4064)|0);
  $26 = ($25|0)!=(0);
  $27 = $26 ? 0 : 0;
  $28 = $27;
  $0 = $28;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $29 = $1;
 $30 = (__ZL18stbi__hdr_gettokenP13stbi__contextPc($29,$buffer)|0);
 HEAP32[$token>>2] = $30;
 $31 = HEAP32[$token>>2]|0;
 $32 = (_strncmp($31,4083,3)|0);
 $33 = ($32|0)!=(0);
 if ($33) {
  $34 = (__ZL9stbi__errPKc(4087)|0);
  $35 = ($34|0)!=(0);
  $36 = $35 ? 0 : 0;
  $37 = $36;
  $0 = $37;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $38 = HEAP32[$token>>2]|0;
 $39 = ((($38)) + 3|0);
 HEAP32[$token>>2] = $39;
 $40 = HEAP32[$token>>2]|0;
 $41 = (_strtol($40,$token,10)|0);
 $height = $41;
 while(1) {
  $42 = HEAP32[$token>>2]|0;
  $43 = HEAP8[$42>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(32);
  $46 = HEAP32[$token>>2]|0;
  if (!($45)) {
   break;
  }
  $47 = ((($46)) + 1|0);
  HEAP32[$token>>2] = $47;
 }
 $48 = (_strncmp($46,4111,3)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = (__ZL9stbi__errPKc(4087)|0);
  $51 = ($50|0)!=(0);
  $52 = $51 ? 0 : 0;
  $53 = $52;
  $0 = $53;
  $225 = $0;
  STACKTOP = sp;return ($225|0);
 }
 $54 = HEAP32[$token>>2]|0;
 $55 = ((($54)) + 3|0);
 HEAP32[$token>>2] = $55;
 $56 = HEAP32[$token>>2]|0;
 $57 = (_strtol($56,0,10)|0);
 $width = $57;
 $58 = $width;
 $59 = $2;
 HEAP32[$59>>2] = $58;
 $60 = $height;
 $61 = $3;
 HEAP32[$61>>2] = $60;
 $62 = $4;
 $63 = ($62|0)!=(0|0);
 if ($63) {
  $64 = $4;
  HEAP32[$64>>2] = 3;
 }
 $65 = $5;
 $66 = ($65|0)==(0);
 if ($66) {
  $5 = 3;
 }
 $67 = $height;
 $68 = $width;
 $69 = Math_imul($67, $68)|0;
 $70 = $5;
 $71 = Math_imul($69, $70)|0;
 $72 = $71<<2;
 $73 = (__ZL12stbi__mallocj($72)|0);
 $hdr_data = $73;
 $74 = $width;
 $75 = ($74|0)<(8);
 $76 = $width;
 $77 = ($76|0)>=(32768);
 $or$cond = $75 | $77;
 do {
  if ($or$cond) {
   $j = 0;
   label = 21;
  } else {
   $scanline = 0;
   $j = 0;
   while(1) {
    $101 = $j;
    $102 = $height;
    $103 = ($101|0)<($102|0);
    if (!($103)) {
     label = 49;
     break;
    }
    $104 = $1;
    $105 = (__ZL10stbi__get8P13stbi__context($104)|0);
    $106 = $105&255;
    $c1 = $106;
    $107 = $1;
    $108 = (__ZL10stbi__get8P13stbi__context($107)|0);
    $109 = $108&255;
    $c2 = $109;
    $110 = $1;
    $111 = (__ZL10stbi__get8P13stbi__context($110)|0);
    $112 = $111&255;
    $len = $112;
    $113 = $c1;
    $114 = ($113|0)!=(2);
    $115 = $c2;
    $116 = ($115|0)!=(2);
    $or$cond3 = $114 | $116;
    if ($or$cond3) {
     label = 30;
     break;
    }
    $117 = $len;
    $118 = $117 & 128;
    $119 = ($118|0)!=(0);
    if ($119) {
     label = 30;
     break;
    }
    $134 = $len;
    $135 = $134 << 8;
    $len = $135;
    $136 = $1;
    $137 = (__ZL10stbi__get8P13stbi__context($136)|0);
    $138 = $137&255;
    $139 = $len;
    $140 = $139 | $138;
    $len = $140;
    $141 = $len;
    $142 = $width;
    $143 = ($141|0)!=($142|0);
    if ($143) {
     label = 32;
     break;
    }
    $150 = $scanline;
    $151 = ($150|0)==(0|0);
    if ($151) {
     $152 = $width;
     $153 = $152<<2;
     $154 = (__ZL12stbi__mallocj($153)|0);
     $scanline = $154;
    }
    $k = 0;
    while(1) {
     $155 = $k;
     $156 = ($155|0)<(4);
     $i = 0;
     if (!($156)) {
      break;
     }
     L45: while(1) {
      $157 = $i;
      $158 = $width;
      $159 = ($157|0)<($158|0);
      if (!($159)) {
       break;
      }
      $160 = $1;
      $161 = (__ZL10stbi__get8P13stbi__context($160)|0);
      $count = $161;
      $162 = $count;
      $163 = $162&255;
      $164 = ($163|0)>(128);
      if ($164) {
       $165 = $1;
       $166 = (__ZL10stbi__get8P13stbi__context($165)|0);
       $value = $166;
       $167 = $count;
       $168 = $167&255;
       $169 = (($168) - 128)|0;
       $170 = $169&255;
       $count = $170;
       $z = 0;
       while(1) {
        $171 = $z;
        $172 = $count;
        $173 = $172&255;
        $174 = ($171|0)<($173|0);
        if (!($174)) {
         continue L45;
        }
        $175 = $value;
        $176 = $i;
        $177 = (($176) + 1)|0;
        $i = $177;
        $178 = $176<<2;
        $179 = $k;
        $180 = (($178) + ($179))|0;
        $181 = $scanline;
        $182 = (($181) + ($180)|0);
        HEAP8[$182>>0] = $175;
        $183 = $z;
        $184 = (($183) + 1)|0;
        $z = $184;
       }
      } else {
       $z = 0;
       while(1) {
        $185 = $z;
        $186 = $count;
        $187 = $186&255;
        $188 = ($185|0)<($187|0);
        if (!($188)) {
         continue L45;
        }
        $189 = $1;
        $190 = (__ZL10stbi__get8P13stbi__context($189)|0);
        $191 = $i;
        $192 = (($191) + 1)|0;
        $i = $192;
        $193 = $191<<2;
        $194 = $k;
        $195 = (($193) + ($194))|0;
        $196 = $scanline;
        $197 = (($196) + ($195)|0);
        HEAP8[$197>>0] = $190;
        $198 = $z;
        $199 = (($198) + 1)|0;
        $z = $199;
       }
      }
     }
     $200 = $k;
     $201 = (($200) + 1)|0;
     $k = $201;
    }
    while(1) {
     $202 = $i;
     $203 = $width;
     $204 = ($202|0)<($203|0);
     if (!($204)) {
      break;
     }
     $205 = $hdr_data;
     $206 = $j;
     $207 = $width;
     $208 = Math_imul($206, $207)|0;
     $209 = $i;
     $210 = (($208) + ($209))|0;
     $211 = $5;
     $212 = Math_imul($210, $211)|0;
     $213 = (($205) + ($212<<2)|0);
     $214 = $scanline;
     $215 = $i;
     $216 = $215<<2;
     $217 = (($214) + ($216)|0);
     $218 = $5;
     __ZL17stbi__hdr_convertPfPhi($213,$217,$218);
     $219 = $i;
     $220 = (($219) + 1)|0;
     $i = $220;
    }
    $221 = $j;
    $222 = (($221) + 1)|0;
    $j = $222;
   }
   if ((label|0) == 30) {
    $120 = $c1;
    $121 = $120&255;
    HEAP8[$rgbe1>>0] = $121;
    $122 = $c2;
    $123 = $122&255;
    $124 = ((($rgbe1)) + 1|0);
    HEAP8[$124>>0] = $123;
    $125 = $len;
    $126 = $125&255;
    $127 = ((($rgbe1)) + 2|0);
    HEAP8[$127>>0] = $126;
    $128 = $1;
    $129 = (__ZL10stbi__get8P13stbi__context($128)|0);
    $130 = ((($rgbe1)) + 3|0);
    HEAP8[$130>>0] = $129;
    $131 = $hdr_data;
    $132 = $5;
    __ZL17stbi__hdr_convertPfPhi($131,$rgbe1,$132);
    $i = 1;
    $j = 0;
    $133 = $scanline;
    _free($133);
    label = 24;
    break;
   }
   else if ((label|0) == 32) {
    $144 = $hdr_data;
    _free($144);
    $145 = $scanline;
    _free($145);
    $146 = (__ZL9stbi__errPKc(4115)|0);
    $147 = ($146|0)!=(0);
    $148 = $147 ? 0 : 0;
    $149 = $148;
    $0 = $149;
    $225 = $0;
    STACKTOP = sp;return ($225|0);
   }
   else if ((label|0) == 49) {
    $223 = $scanline;
    _free($223);
    label = 50;
    break;
   }
  }
 } while(0);
 while(1) {
  if ((label|0) == 21) {
   label = 0;
   $78 = $j;
   $79 = $height;
   $80 = ($78|0)<($79|0);
   if (!($80)) {
    label = 50;
    continue;
   }
   $i = 0;
  }
  else if ((label|0) == 24) {
   label = 0;
   $84 = $1;
   (__ZL10stbi__getnP13stbi__contextPhi($84,$rgbe,4)|0);
   $85 = $hdr_data;
   $86 = $j;
   $87 = $width;
   $88 = Math_imul($86, $87)|0;
   $89 = $5;
   $90 = Math_imul($88, $89)|0;
   $91 = (($85) + ($90<<2)|0);
   $92 = $i;
   $93 = $5;
   $94 = Math_imul($92, $93)|0;
   $95 = (($91) + ($94<<2)|0);
   $96 = $5;
   __ZL17stbi__hdr_convertPfPhi($95,$rgbe,$96);
   $97 = $i;
   $98 = (($97) + 1)|0;
   $i = $98;
  }
  else if ((label|0) == 50) {
   label = 0;
   $224 = $hdr_data;
   $0 = $224;
   break;
  }
  $81 = $i;
  $82 = $width;
  $83 = ($81|0)<($82|0);
  if ($83) {
   label = 24;
   continue;
  }
  $99 = $j;
  $100 = (($99) + 1)|0;
  $j = $100;
  label = 21;
 }
 $225 = $0;
 STACKTOP = sp;return ($225|0);
}
function __ZL18stbi__hdr_gettokenP13stbi__contextPc($z,$buffer) {
 $z = $z|0;
 $buffer = $buffer|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $len = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $z;
 $1 = $buffer;
 $len = 0;
 $c = 0;
 $2 = $0;
 $3 = (__ZL10stbi__get8P13stbi__context($2)|0);
 $c = $3;
 while(1) {
  $4 = $0;
  $5 = (__ZL12stbi__at_eofP13stbi__context($4)|0);
  $6 = ($5|0)!=(0);
  if ($6) {
   break;
  }
  $7 = $c;
  $8 = $7 << 24 >> 24;
  $9 = ($8|0)!=(10);
  if (!($9)) {
   break;
  }
  $10 = $c;
  $11 = $len;
  $12 = (($11) + 1)|0;
  $len = $12;
  $13 = $1;
  $14 = (($13) + ($11)|0);
  HEAP8[$14>>0] = $10;
  $15 = $len;
  $16 = ($15|0)==(1023);
  if ($16) {
   label = 5;
   break;
  }
  $24 = $0;
  $25 = (__ZL10stbi__get8P13stbi__context($24)|0);
  $c = $25;
 }
 L6: do {
  if ((label|0) == 5) {
   while(1) {
    label = 0;
    $17 = $0;
    $18 = (__ZL12stbi__at_eofP13stbi__context($17)|0);
    $19 = ($18|0)!=(0);
    if ($19) {
     break L6;
    }
    $20 = $0;
    $21 = (__ZL10stbi__get8P13stbi__context($20)|0);
    $22 = $21&255;
    $23 = ($22|0)!=(10);
    if ($23) {
     label = 5;
    } else {
     break;
    }
   }
  }
 } while(0);
 $26 = $len;
 $27 = $1;
 $28 = (($27) + ($26)|0);
 HEAP8[$28>>0] = 0;
 $29 = $1;
 STACKTOP = sp;return ($29|0);
}
function __ZL17stbi__hdr_convertPfPhi($output,$input,$req_comp) {
 $output = $output|0;
 $input = $input|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $f1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $output;
 $1 = $input;
 $2 = $req_comp;
 $3 = $1;
 $4 = ((($3)) + 3|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $65 = $2;
  switch ($65|0) {
  case 4:  {
   $66 = $0;
   $67 = ((($66)) + 12|0);
   HEAPF32[$67>>2] = 1.0;
   label = 11;
   break;
  }
  case 3:  {
   label = 11;
   break;
  }
  case 2:  {
   $73 = $0;
   $74 = ((($73)) + 4|0);
   HEAPF32[$74>>2] = 1.0;
   label = 13;
   break;
  }
  case 1:  {
   label = 13;
   break;
  }
  default: {
   STACKTOP = sp;return;
  }
  }
  if ((label|0) == 11) {
   $68 = $0;
   $69 = ((($68)) + 8|0);
   HEAPF32[$69>>2] = 0.0;
   $70 = $0;
   $71 = ((($70)) + 4|0);
   HEAPF32[$71>>2] = 0.0;
   $72 = $0;
   HEAPF32[$72>>2] = 0.0;
   STACKTOP = sp;return;
  }
  else if ((label|0) == 13) {
   $75 = $0;
   HEAPF32[$75>>2] = 0.0;
   STACKTOP = sp;return;
  }
 }
 $8 = $1;
 $9 = ((($8)) + 3|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) - 136)|0;
 $13 = (+_ldexp(1.0,$12));
 $14 = $13;
 $f1 = $14;
 $15 = $2;
 $16 = ($15|0)<=(2);
 $17 = $1;
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 if ($16) {
  $20 = $1;
  $21 = ((($20)) + 1|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($19) + ($23))|0;
  $25 = $1;
  $26 = ((($25)) + 2|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $27&255;
  $29 = (($24) + ($28))|0;
  $30 = (+($29|0));
  $31 = $f1;
  $32 = $30 * $31;
  $33 = $32 / 3.0;
  $34 = $0;
  HEAPF32[$34>>2] = $33;
 } else {
  $35 = (+($19|0));
  $36 = $f1;
  $37 = $35 * $36;
  $38 = $0;
  HEAPF32[$38>>2] = $37;
  $39 = $1;
  $40 = ((($39)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41&255;
  $43 = (+($42|0));
  $44 = $f1;
  $45 = $43 * $44;
  $46 = $0;
  $47 = ((($46)) + 4|0);
  HEAPF32[$47>>2] = $45;
  $48 = $1;
  $49 = ((($48)) + 2|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = (+($51|0));
  $53 = $f1;
  $54 = $52 * $53;
  $55 = $0;
  $56 = ((($55)) + 8|0);
  HEAPF32[$56>>2] = $54;
 }
 $57 = $2;
 $58 = ($57|0)==(2);
 if ($58) {
  $59 = $0;
  $60 = ((($59)) + 4|0);
  HEAPF32[$60>>2] = 1.0;
 }
 $61 = $2;
 $62 = ($61|0)==(4);
 if (!($62)) {
  STACKTOP = sp;return;
 }
 $63 = $0;
 $64 = ((($63)) + 12|0);
 HEAPF32[$64>>2] = 1.0;
 STACKTOP = sp;return;
}
function __ZL16stbi__hdr_to_ldrPfiii($data,$x,$y,$comp) {
 $data = $data|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0;
 var $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0;
 var $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $i = 0, $k = 0, $n = 0, $output = 0;
 var $z = 0.0, $z1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $data;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $2;
 $6 = $3;
 $7 = Math_imul($5, $6)|0;
 $8 = $4;
 $9 = Math_imul($7, $8)|0;
 $10 = (__ZL12stbi__mallocj($9)|0);
 $output = $10;
 $11 = $output;
 $12 = ($11|0)==(0|0);
 if ($12) {
  $13 = $1;
  _free($13);
  $14 = (__ZL9stbi__errPKc(2292)|0);
  $15 = ($14|0)!=(0);
  $16 = $15 ? 0 : 0;
  $17 = $16;
  $0 = $17;
  $95 = $0;
  STACKTOP = sp;return ($95|0);
 }
 $18 = $4;
 $19 = $18 & 1;
 $20 = ($19|0)!=(0);
 $21 = $4;
 if ($20) {
  $n = $21;
 } else {
  $22 = (($21) - 1)|0;
  $n = $22;
 }
 $i = 0;
 while(1) {
  $23 = $i;
  $24 = $2;
  $25 = $3;
  $26 = Math_imul($24, $25)|0;
  $27 = ($23|0)<($26|0);
  if (!($27)) {
   break;
  }
  $k = 0;
  while(1) {
   $28 = $k;
   $29 = $n;
   $30 = ($28|0)<($29|0);
   if (!($30)) {
    break;
   }
   $31 = $i;
   $32 = $4;
   $33 = Math_imul($31, $32)|0;
   $34 = $k;
   $35 = (($33) + ($34))|0;
   $36 = $1;
   $37 = (($36) + ($35<<2)|0);
   $38 = +HEAPF32[$37>>2];
   $39 = +HEAPF32[232];
   $40 = $38 * $39;
   $41 = $40;
   $42 = +HEAPF32[233];
   $43 = $42;
   $44 = (+Math_pow((+$41),(+$43)));
   $45 = $44;
   $46 = $45 * 255.0;
   $47 = $46 + 0.5;
   $z = $47;
   $48 = $z;
   $49 = $48 < 0.0;
   if ($49) {
    $z = 0.0;
   }
   $50 = $z;
   $51 = $50 > 255.0;
   if ($51) {
    $z = 255.0;
   }
   $52 = $z;
   $53 = (~~(($52)));
   $54 = $53&255;
   $55 = $i;
   $56 = $4;
   $57 = Math_imul($55, $56)|0;
   $58 = $k;
   $59 = (($57) + ($58))|0;
   $60 = $output;
   $61 = (($60) + ($59)|0);
   HEAP8[$61>>0] = $54;
   $62 = $k;
   $63 = (($62) + 1)|0;
   $k = $63;
  }
  $64 = $k;
  $65 = $4;
  $66 = ($64|0)<($65|0);
  if ($66) {
   $67 = $i;
   $68 = $4;
   $69 = Math_imul($67, $68)|0;
   $70 = $k;
   $71 = (($69) + ($70))|0;
   $72 = $1;
   $73 = (($72) + ($71<<2)|0);
   $74 = +HEAPF32[$73>>2];
   $75 = $74 * 255.0;
   $76 = $75 + 0.5;
   $z1 = $76;
   $77 = $z1;
   $78 = $77 < 0.0;
   if ($78) {
    $z1 = 0.0;
   }
   $79 = $z1;
   $80 = $79 > 255.0;
   if ($80) {
    $z1 = 255.0;
   }
   $81 = $z1;
   $82 = (~~(($81)));
   $83 = $82&255;
   $84 = $i;
   $85 = $4;
   $86 = Math_imul($84, $85)|0;
   $87 = $k;
   $88 = (($86) + ($87))|0;
   $89 = $output;
   $90 = (($89) + ($88)|0);
   HEAP8[$90>>0] = $83;
  }
  $91 = $i;
  $92 = (($91) + 1)|0;
  $i = $92;
 }
 $93 = $1;
 _free($93);
 $94 = $output;
 $0 = $94;
 $95 = $0;
 STACKTOP = sp;return ($95|0);
}
function __ZL14stbi__tga_testP13stbi__context($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $res = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $1 = $s;
 $2 = $1;
 (__ZL10stbi__get8P13stbi__context($2)|0);
 $3 = $1;
 $4 = (__ZL10stbi__get8P13stbi__context($3)|0);
 $5 = $4&255;
 $sz = $5;
 $6 = $sz;
 $7 = ($6|0)>(1);
 if ($7) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $8 = $1;
 $9 = (__ZL10stbi__get8P13stbi__context($8)|0);
 $10 = $9&255;
 $sz = $10;
 $11 = $sz;
 $12 = ($11|0)!=(1);
 $13 = $sz;
 $14 = ($13|0)!=(2);
 $or$cond = $12 & $14;
 $15 = $sz;
 $16 = ($15|0)!=(3);
 $or$cond3 = $or$cond & $16;
 $17 = $sz;
 $18 = ($17|0)!=(9);
 $or$cond5 = $or$cond3 & $18;
 $19 = $sz;
 $20 = ($19|0)!=(10);
 $or$cond7 = $or$cond5 & $20;
 $21 = $sz;
 $22 = ($21|0)!=(11);
 $or$cond9 = $or$cond7 & $22;
 if ($or$cond9) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $23 = $1;
 (__ZL13stbi__get16beP13stbi__context($23)|0);
 $24 = $1;
 (__ZL13stbi__get16beP13stbi__context($24)|0);
 $25 = $1;
 (__ZL10stbi__get8P13stbi__context($25)|0);
 $26 = $1;
 (__ZL13stbi__get16beP13stbi__context($26)|0);
 $27 = $1;
 (__ZL13stbi__get16beP13stbi__context($27)|0);
 $28 = $1;
 $29 = (__ZL13stbi__get16beP13stbi__context($28)|0);
 $30 = ($29|0)<(1);
 if ($30) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $31 = $1;
 $32 = (__ZL13stbi__get16beP13stbi__context($31)|0);
 $33 = ($32|0)<(1);
 if ($33) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;return ($47|0);
 }
 $34 = $1;
 $35 = (__ZL10stbi__get8P13stbi__context($34)|0);
 $36 = $35&255;
 $sz = $36;
 $37 = $sz;
 $38 = ($37|0)!=(8);
 $39 = $sz;
 $40 = ($39|0)!=(16);
 $or$cond11 = $38 & $40;
 $41 = $sz;
 $42 = ($41|0)!=(24);
 $or$cond13 = $or$cond11 & $42;
 $43 = $sz;
 $44 = ($43|0)!=(32);
 $or$cond15 = $or$cond13 & $44;
 if ($or$cond15) {
  $res = 0;
 } else {
  $res = 1;
 }
 $45 = $1;
 __ZL12stbi__rewindP13stbi__context($45);
 $46 = $res;
 $0 = $46;
 $47 = $0;
 STACKTOP = sp;return ($47|0);
}
function __ZL14stbi__tga_loadP13stbi__contextPiS1_S1_i($s,$x,$y,$comp,$req_comp) {
 $s = $s|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $RLE_cmd = 0, $RLE_count = 0, $RLE_repeating = 0, $i = 0, $index1 = 0, $index2 = 0, $j = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $pal_idx = 0, $raw_data = 0, $read_next_pixel = 0, $row = 0, $temp = 0, $temp1 = 0, $tga_bits_per_pixel = 0, $tga_comp = 0, $tga_data = 0, $tga_height = 0, $tga_image_type = 0, $tga_indexed = 0, $tga_inverted = 0, $tga_is_RLE = 0, $tga_offset = 0, $tga_palette = 0, $tga_palette_bits = 0;
 var $tga_palette_len = 0, $tga_palette_start = 0, $tga_pixel = 0, $tga_row = 0, $tga_width = 0, $tga_x_origin = 0, $tga_y_origin = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $raw_data = sp + 140|0;
 $1 = $s;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $1;
 $7 = (__ZL10stbi__get8P13stbi__context($6)|0);
 $8 = $7&255;
 $tga_offset = $8;
 $9 = $1;
 $10 = (__ZL10stbi__get8P13stbi__context($9)|0);
 $11 = $10&255;
 $tga_indexed = $11;
 $12 = $1;
 $13 = (__ZL10stbi__get8P13stbi__context($12)|0);
 $14 = $13&255;
 $tga_image_type = $14;
 $tga_is_RLE = 0;
 $15 = $1;
 $16 = (__ZL13stbi__get16leP13stbi__context($15)|0);
 $tga_palette_start = $16;
 $17 = $1;
 $18 = (__ZL13stbi__get16leP13stbi__context($17)|0);
 $tga_palette_len = $18;
 $19 = $1;
 $20 = (__ZL10stbi__get8P13stbi__context($19)|0);
 $21 = $20&255;
 $tga_palette_bits = $21;
 $22 = $1;
 $23 = (__ZL13stbi__get16leP13stbi__context($22)|0);
 $tga_x_origin = $23;
 $24 = $1;
 $25 = (__ZL13stbi__get16leP13stbi__context($24)|0);
 $tga_y_origin = $25;
 $26 = $1;
 $27 = (__ZL13stbi__get16leP13stbi__context($26)|0);
 $tga_width = $27;
 $28 = $1;
 $29 = (__ZL13stbi__get16leP13stbi__context($28)|0);
 $tga_height = $29;
 $30 = $1;
 $31 = (__ZL10stbi__get8P13stbi__context($30)|0);
 $32 = $31&255;
 $tga_bits_per_pixel = $32;
 $33 = $tga_bits_per_pixel;
 $34 = (($33|0) / 8)&-1;
 $tga_comp = $34;
 $35 = $1;
 $36 = (__ZL10stbi__get8P13stbi__context($35)|0);
 $37 = $36&255;
 $tga_inverted = $37;
 $tga_palette = 0;
 $RLE_count = 0;
 $RLE_repeating = 0;
 $read_next_pixel = 1;
 $38 = $tga_image_type;
 $39 = ($38|0)>=(8);
 if ($39) {
  $40 = $tga_image_type;
  $41 = (($40) - 8)|0;
  $tga_image_type = $41;
  $tga_is_RLE = 1;
 }
 $42 = $tga_inverted;
 $43 = $42 >> 5;
 $44 = $43 & 1;
 $45 = (1 - ($44))|0;
 $tga_inverted = $45;
 $46 = $tga_width;
 $47 = ($46|0)<(1);
 $48 = $tga_height;
 $49 = ($48|0)<(1);
 $or$cond = $47 | $49;
 $50 = $tga_image_type;
 $51 = ($50|0)<(1);
 $or$cond3 = $or$cond | $51;
 $52 = $tga_image_type;
 $53 = ($52|0)>(3);
 $or$cond5 = $or$cond3 | $53;
 if (!($or$cond5)) {
  $54 = $tga_bits_per_pixel;
  $55 = ($54|0)!=(8);
  $56 = $tga_bits_per_pixel;
  $57 = ($56|0)!=(16);
  $or$cond7 = $55 & $57;
  $58 = $tga_bits_per_pixel;
  $59 = ($58|0)!=(24);
  $or$cond9 = $or$cond7 & $59;
  $60 = $tga_bits_per_pixel;
  $61 = ($60|0)!=(32);
  $or$cond11 = $or$cond9 & $61;
  if (!($or$cond11)) {
   $62 = $tga_indexed;
   $63 = ($62|0)!=(0);
   if ($63) {
    $64 = $tga_palette_bits;
    $65 = (($64|0) / 8)&-1;
    $tga_comp = $65;
   }
   $66 = $tga_width;
   $67 = $2;
   HEAP32[$67>>2] = $66;
   $68 = $tga_height;
   $69 = $3;
   HEAP32[$69>>2] = $68;
   $70 = $4;
   $71 = ($70|0)!=(0|0);
   if ($71) {
    $72 = $tga_comp;
    $73 = $4;
    HEAP32[$73>>2] = $72;
   }
   $74 = $tga_width;
   $75 = $tga_height;
   $76 = Math_imul($74, $75)|0;
   $77 = $tga_comp;
   $78 = Math_imul($76, $77)|0;
   $79 = (__ZL12stbi__mallocj($78)|0);
   $tga_data = $79;
   $80 = $tga_data;
   $81 = ($80|0)!=(0|0);
   if (!($81)) {
    $82 = (__ZL9stbi__errPKc(2292)|0);
    $83 = ($82|0)!=(0);
    $84 = $83 ? 0 : 0;
    $85 = $84;
    $0 = $85;
    $307 = $0;
    STACKTOP = sp;return ($307|0);
   }
   $86 = $1;
   $87 = $tga_offset;
   __ZL10stbi__skipP13stbi__contexti($86,$87);
   $88 = $tga_indexed;
   $89 = ($88|0)!=(0);
   $90 = $tga_is_RLE;
   $91 = ($90|0)!=(0);
   $or$cond13 = $89 | $91;
   L17: do {
    if ($or$cond13) {
     $117 = $tga_indexed;
     $118 = ($117|0)!=(0);
     if ($118) {
      $119 = $1;
      $120 = $tga_palette_start;
      __ZL10stbi__skipP13stbi__contexti($119,$120);
      $121 = $tga_palette_len;
      $122 = $tga_palette_bits;
      $123 = Math_imul($121, $122)|0;
      $124 = (($123|0) / 8)&-1;
      $125 = (__ZL12stbi__mallocj($124)|0);
      $tga_palette = $125;
      $126 = $tga_palette;
      $127 = ($126|0)!=(0|0);
      if (!($127)) {
       $128 = $tga_data;
       _free($128);
       $129 = (__ZL9stbi__errPKc(2292)|0);
       $130 = ($129|0)!=(0);
       $131 = $130 ? 0 : 0;
       $132 = $131;
       $0 = $132;
       $307 = $0;
       STACKTOP = sp;return ($307|0);
      }
      $133 = $1;
      $134 = $tga_palette;
      $135 = $tga_palette_len;
      $136 = $tga_palette_bits;
      $137 = Math_imul($135, $136)|0;
      $138 = (($137|0) / 8)&-1;
      $139 = (__ZL10stbi__getnP13stbi__contextPhi($133,$134,$138)|0);
      $140 = ($139|0)!=(0);
      if (!($140)) {
       $141 = $tga_data;
       _free($141);
       $142 = $tga_palette;
       _free($142);
       $143 = (__ZL9stbi__errPKc(4147)|0);
       $144 = ($143|0)!=(0);
       $145 = $144 ? 0 : 0;
       $146 = $145;
       $0 = $146;
       $307 = $0;
       STACKTOP = sp;return ($307|0);
      }
     }
     $i = 0;
     while(1) {
      $147 = $i;
      $148 = $tga_width;
      $149 = $tga_height;
      $150 = Math_imul($148, $149)|0;
      $151 = ($147|0)<($150|0);
      if (!($151)) {
       break;
      }
      $152 = $tga_is_RLE;
      $153 = ($152|0)!=(0);
      do {
       if ($153) {
        $154 = $RLE_count;
        $155 = ($154|0)==(0);
        if ($155) {
         $156 = $1;
         $157 = (__ZL10stbi__get8P13stbi__context($156)|0);
         $158 = $157&255;
         $RLE_cmd = $158;
         $159 = $RLE_cmd;
         $160 = $159 & 127;
         $161 = (1 + ($160))|0;
         $RLE_count = $161;
         $162 = $RLE_cmd;
         $163 = $162 >> 7;
         $RLE_repeating = $163;
         $read_next_pixel = 1;
         break;
        }
        $164 = $RLE_repeating;
        $165 = ($164|0)!=(0);
        if (!($165)) {
         $read_next_pixel = 1;
        }
       } else {
        $read_next_pixel = 1;
       }
      } while(0);
      $166 = $read_next_pixel;
      $167 = ($166|0)!=(0);
      if ($167) {
       $168 = $tga_indexed;
       $169 = ($168|0)!=(0);
       L41: do {
        if ($169) {
         $170 = $1;
         $171 = (__ZL10stbi__get8P13stbi__context($170)|0);
         $172 = $171&255;
         $pal_idx = $172;
         $173 = $pal_idx;
         $174 = $tga_palette_len;
         $175 = ($173|0)>=($174|0);
         $$ = $175 ? 0 : $172;
         $pal_idx = $$;
         $176 = $tga_bits_per_pixel;
         $177 = (($176|0) / 8)&-1;
         $178 = $pal_idx;
         $179 = Math_imul($178, $177)|0;
         $pal_idx = $179;
         $j = 0;
         while(1) {
          $180 = $j;
          $181 = $180<<3;
          $182 = $tga_bits_per_pixel;
          $183 = ($181|0)<($182|0);
          if (!($183)) {
           break L41;
          }
          $184 = $pal_idx;
          $185 = $j;
          $186 = (($184) + ($185))|0;
          $187 = $tga_palette;
          $188 = (($187) + ($186)|0);
          $189 = HEAP8[$188>>0]|0;
          $190 = $j;
          $191 = (($raw_data) + ($190)|0);
          HEAP8[$191>>0] = $189;
          $192 = $j;
          $193 = (($192) + 1)|0;
          $j = $193;
         }
        } else {
         $j = 0;
         while(1) {
          $194 = $j;
          $195 = $194<<3;
          $196 = $tga_bits_per_pixel;
          $197 = ($195|0)<($196|0);
          if (!($197)) {
           break L41;
          }
          $198 = $1;
          $199 = (__ZL10stbi__get8P13stbi__context($198)|0);
          $200 = $j;
          $201 = (($raw_data) + ($200)|0);
          HEAP8[$201>>0] = $199;
          $202 = $j;
          $203 = (($202) + 1)|0;
          $j = $203;
         }
        }
       } while(0);
       $read_next_pixel = 0;
      }
      $j = 0;
      while(1) {
       $204 = $j;
       $205 = $tga_comp;
       $206 = ($204|0)<($205|0);
       if (!($206)) {
        break;
       }
       $207 = $j;
       $208 = (($raw_data) + ($207)|0);
       $209 = HEAP8[$208>>0]|0;
       $210 = $i;
       $211 = $tga_comp;
       $212 = Math_imul($210, $211)|0;
       $213 = $j;
       $214 = (($212) + ($213))|0;
       $215 = $tga_data;
       $216 = (($215) + ($214)|0);
       HEAP8[$216>>0] = $209;
       $217 = $j;
       $218 = (($217) + 1)|0;
       $j = $218;
      }
      $219 = $RLE_count;
      $220 = (($219) + -1)|0;
      $RLE_count = $220;
      $221 = $i;
      $222 = (($221) + 1)|0;
      $i = $222;
     }
     $223 = $tga_inverted;
     $224 = ($223|0)!=(0);
     L57: do {
      if ($224) {
       $j = 0;
       while(1) {
        $225 = $j;
        $226 = $225<<1;
        $227 = $tga_height;
        $228 = ($226|0)<($227|0);
        if (!($228)) {
         break L57;
        }
        $229 = $j;
        $230 = $tga_width;
        $231 = Math_imul($229, $230)|0;
        $232 = $tga_comp;
        $233 = Math_imul($231, $232)|0;
        $index1 = $233;
        $234 = $tga_height;
        $235 = (($234) - 1)|0;
        $236 = $j;
        $237 = (($235) - ($236))|0;
        $238 = $tga_width;
        $239 = Math_imul($237, $238)|0;
        $240 = $tga_comp;
        $241 = Math_imul($239, $240)|0;
        $index2 = $241;
        $242 = $tga_width;
        $243 = $tga_comp;
        $244 = Math_imul($242, $243)|0;
        $i = $244;
        while(1) {
         $245 = $i;
         $246 = ($245|0)>(0);
         if (!($246)) {
          break;
         }
         $247 = $index1;
         $248 = $tga_data;
         $249 = (($248) + ($247)|0);
         $250 = HEAP8[$249>>0]|0;
         $temp = $250;
         $251 = $index2;
         $252 = $tga_data;
         $253 = (($252) + ($251)|0);
         $254 = HEAP8[$253>>0]|0;
         $255 = $index1;
         $256 = $tga_data;
         $257 = (($256) + ($255)|0);
         HEAP8[$257>>0] = $254;
         $258 = $temp;
         $259 = $index2;
         $260 = $tga_data;
         $261 = (($260) + ($259)|0);
         HEAP8[$261>>0] = $258;
         $262 = $index1;
         $263 = (($262) + 1)|0;
         $index1 = $263;
         $264 = $index2;
         $265 = (($264) + 1)|0;
         $index2 = $265;
         $266 = $i;
         $267 = (($266) + -1)|0;
         $i = $267;
        }
        $268 = $j;
        $269 = (($268) + 1)|0;
        $j = $269;
       }
      }
     } while(0);
     $270 = $tga_palette;
     $271 = ($270|0)!=(0|0);
     if ($271) {
      $272 = $tga_palette;
      _free($272);
     }
    } else {
     $i = 0;
     while(1) {
      $92 = $i;
      $93 = $tga_height;
      $94 = ($92|0)<($93|0);
      if (!($94)) {
       break L17;
      }
      $95 = $tga_inverted;
      $96 = ($95|0)!=(0);
      if ($96) {
       $97 = $tga_height;
       $98 = $i;
       $99 = (($97) - ($98))|0;
       $100 = (($99) - 1)|0;
       $102 = $100;
      } else {
       $101 = $i;
       $102 = $101;
      }
      $row = $102;
      $103 = $tga_data;
      $104 = $row;
      $105 = $tga_width;
      $106 = Math_imul($104, $105)|0;
      $107 = $tga_comp;
      $108 = Math_imul($106, $107)|0;
      $109 = (($103) + ($108)|0);
      $tga_row = $109;
      $110 = $1;
      $111 = $tga_row;
      $112 = $tga_width;
      $113 = $tga_comp;
      $114 = Math_imul($112, $113)|0;
      (__ZL10stbi__getnP13stbi__contextPhi($110,$111,$114)|0);
      $115 = $i;
      $116 = (($115) + 1)|0;
      $i = $116;
     }
    }
   } while(0);
   $273 = $tga_comp;
   $274 = ($273|0)>=(3);
   L77: do {
    if ($274) {
     $275 = $tga_data;
     $tga_pixel = $275;
     $i = 0;
     while(1) {
      $276 = $i;
      $277 = $tga_width;
      $278 = $tga_height;
      $279 = Math_imul($277, $278)|0;
      $280 = ($276|0)<($279|0);
      if (!($280)) {
       break L77;
      }
      $281 = $tga_pixel;
      $282 = HEAP8[$281>>0]|0;
      $temp1 = $282;
      $283 = $tga_pixel;
      $284 = ((($283)) + 2|0);
      $285 = HEAP8[$284>>0]|0;
      $286 = $tga_pixel;
      HEAP8[$286>>0] = $285;
      $287 = $temp1;
      $288 = $tga_pixel;
      $289 = ((($288)) + 2|0);
      HEAP8[$289>>0] = $287;
      $290 = $tga_comp;
      $291 = $tga_pixel;
      $292 = (($291) + ($290)|0);
      $tga_pixel = $292;
      $293 = $i;
      $294 = (($293) + 1)|0;
      $i = $294;
     }
    }
   } while(0);
   $295 = $5;
   $296 = ($295|0)!=(0);
   if ($296) {
    $297 = $5;
    $298 = $tga_comp;
    $299 = ($297|0)!=($298|0);
    if ($299) {
     $300 = $tga_data;
     $301 = $tga_comp;
     $302 = $5;
     $303 = $tga_width;
     $304 = $tga_height;
     $305 = (__ZL20stbi__convert_formatPhiijj($300,$301,$302,$303,$304)|0);
     $tga_data = $305;
    }
   }
   $tga_y_origin = 0;
   $tga_x_origin = 0;
   $tga_palette_bits = 0;
   $tga_palette_len = 0;
   $tga_palette_start = 0;
   $306 = $tga_data;
   $0 = $306;
   $307 = $0;
   STACKTOP = sp;return ($307|0);
  }
 }
 $0 = 0;
 $307 = $0;
 STACKTOP = sp;return ($307|0);
}
function _stbi_load_from_memory($buffer,$len,$x,$y,$comp,$req_comp) {
 $buffer = $buffer|0;
 $len = $len|0;
 $x = $x|0;
 $y = $y|0;
 $comp = $comp|0;
 $req_comp = $req_comp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $s = sp;
 $0 = $buffer;
 $1 = $len;
 $2 = $x;
 $3 = $y;
 $4 = $comp;
 $5 = $req_comp;
 $6 = $0;
 $7 = $1;
 __ZL15stbi__start_memP13stbi__contextPKhi($s,$6,$7);
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 $12 = (__ZL15stbi__load_flipP13stbi__contextPiS1_S1_i($s,$8,$9,$10,$11)|0);
 STACKTOP = sp;return ($12|0);
}
function __ZL15stbi__start_memP13stbi__contextPKhi($s,$buffer,$len) {
 $s = $s|0;
 $buffer = $buffer|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $0 = $s;
 $1 = $buffer;
 $2 = $len;
 $3 = $0;
 $4 = ((($3)) + 16|0);
 HEAP32[$4>>2] = 0;
 $5 = $0;
 $6 = ((($5)) + 32|0);
 HEAP32[$6>>2] = 0;
 $7 = $1;
 $8 = $0;
 $9 = ((($8)) + 176|0);
 HEAP32[$9>>2] = $7;
 $10 = $0;
 $11 = ((($10)) + 168|0);
 HEAP32[$11>>2] = $7;
 $12 = $1;
 $13 = $2;
 $14 = (($12) + ($13)|0);
 $15 = $0;
 $16 = ((($15)) + 180|0);
 HEAP32[$16>>2] = $14;
 $17 = $0;
 $18 = ((($17)) + 172|0);
 HEAP32[$18>>2] = $14;
 STACKTOP = sp;return;
}
function ___stdio_close($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall6(6,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___syscall_ret($r) {
 $r = $r|0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($r>>>0)>(4294963200);
 if ($0) {
  $1 = (0 - ($r))|0;
  $2 = (___errno_location()|0);
  HEAP32[$2>>2] = $1;
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[1896]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 7628;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function ___stdout_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12|0;
 $0 = ((($f)) + 36|0);
 HEAP32[$0>>2] = 7;
 $1 = HEAP32[$f>>2]|0;
 $2 = $1 & 64;
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($f)) + 60|0);
  $5 = HEAP32[$4>>2]|0;
  HEAP32[$vararg_buffer>>2] = $5;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $tio;
  $6 = (___syscall54(54,($vararg_buffer|0))|0);
  $7 = ($6|0)==(0);
  if (!($7)) {
   $8 = ((($f)) + 75|0);
   HEAP8[$8>>0] = -1;
  }
 }
 $9 = (___stdio_write($f,$buf,$len)|0);
 STACKTOP = sp;return ($9|0);
}
function ___stdio_write($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0, $iovcnt$0$lcssa12 = 0;
 var $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iovs = sp + 32|0;
 $0 = ((($f)) + 28|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$iovs>>2] = $1;
 $2 = ((($iovs)) + 4|0);
 $3 = ((($f)) + 20|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) - ($1))|0;
 HEAP32[$2>>2] = $5;
 $6 = ((($iovs)) + 8|0);
 HEAP32[$6>>2] = $buf;
 $7 = ((($iovs)) + 12|0);
 HEAP32[$7>>2] = $len;
 $8 = (($5) + ($len))|0;
 $9 = ((($f)) + 60|0);
 $10 = ((($f)) + 44|0);
 $iov$0 = $iovs;$iovcnt$0 = 2;$rem$0 = $8;
 while(1) {
  $11 = HEAP32[1896]|0;
  $12 = ($11|0)==(0|0);
  if ($12) {
   $16 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $16;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $iov$0;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $iovcnt$0;
   $17 = (___syscall146(146,($vararg_buffer3|0))|0);
   $18 = (___syscall_ret($17)|0);
   $cnt$0 = $18;
  } else {
   _pthread_cleanup_push((74|0),($f|0));
   $13 = HEAP32[$9>>2]|0;
   HEAP32[$vararg_buffer>>2] = $13;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $iov$0;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $iovcnt$0;
   $14 = (___syscall146(146,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   _pthread_cleanup_pop(0);
   $cnt$0 = $15;
  }
  $19 = ($rem$0|0)==($cnt$0|0);
  if ($19) {
   label = 6;
   break;
  }
  $26 = ($cnt$0|0)<(0);
  if ($26) {
   $iov$0$lcssa11 = $iov$0;$iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $34 = (($rem$0) - ($cnt$0))|0;
  $35 = ((($iov$0)) + 4|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = ($cnt$0>>>0)>($36>>>0);
  if ($37) {
   $38 = HEAP32[$10>>2]|0;
   HEAP32[$0>>2] = $38;
   HEAP32[$3>>2] = $38;
   $39 = (($cnt$0) - ($36))|0;
   $40 = ((($iov$0)) + 8|0);
   $41 = (($iovcnt$0) + -1)|0;
   $$phi$trans$insert = ((($iov$0)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $49 = $$pre;$cnt$1 = $39;$iov$1 = $40;$iovcnt$1 = $41;
  } else {
   $42 = ($iovcnt$0|0)==(2);
   if ($42) {
    $43 = HEAP32[$0>>2]|0;
    $44 = (($43) + ($cnt$0)|0);
    HEAP32[$0>>2] = $44;
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = 2;
   } else {
    $49 = $36;$cnt$1 = $cnt$0;$iov$1 = $iov$0;$iovcnt$1 = $iovcnt$0;
   }
  }
  $45 = HEAP32[$iov$1>>2]|0;
  $46 = (($45) + ($cnt$1)|0);
  HEAP32[$iov$1>>2] = $46;
  $47 = ((($iov$1)) + 4|0);
  $48 = (($49) - ($cnt$1))|0;
  HEAP32[$47>>2] = $48;
  $iov$0 = $iov$1;$iovcnt$0 = $iovcnt$1;$rem$0 = $34;
 }
 if ((label|0) == 6) {
  $20 = HEAP32[$10>>2]|0;
  $21 = ((($f)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($f)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$0>>2] = $25;
  HEAP32[$3>>2] = $25;
  $$0 = $len;
 }
 else if ((label|0) == 8) {
  $27 = ((($f)) + 16|0);
  HEAP32[$27>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$3>>2] = 0;
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 | 32;
  HEAP32[$f>>2] = $29;
  $30 = ($iovcnt$0$lcssa12|0)==(2);
  if ($30) {
   $$0 = 0;
  } else {
   $31 = ((($iov$0$lcssa11)) + 4|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = (($len) - ($32))|0;
   $$0 = $33;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup_267($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function ___unlockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_seek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20|0;
 $0 = ((($f)) + 60|0);
 $1 = HEAP32[$0>>2]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $off;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $ret;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $whence;
 $2 = (___syscall140(140,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 $4 = ($3|0)<(0);
 if ($4) {
  HEAP32[$ret>>2] = -1;
  $5 = -1;
 } else {
  $$pre = HEAP32[$ret>>2]|0;
  $5 = $$pre;
 }
 STACKTOP = sp;return ($5|0);
}
function ___stdio_read($f,$buf,$len) {
 $f = $f|0;
 $buf = $buf|0;
 $len = $len|0;
 var $$0 = 0, $$cast = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $cnt$0 = 0, $iov = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $iov = sp + 32|0;
 HEAP32[$iov>>2] = $buf;
 $0 = ((($iov)) + 4|0);
 $1 = ((($f)) + 48|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)!=(0);
 $4 = $3&1;
 $5 = (($len) - ($4))|0;
 HEAP32[$0>>2] = $5;
 $6 = ((($iov)) + 8|0);
 $7 = ((($f)) + 44|0);
 $8 = HEAP32[$7>>2]|0;
 HEAP32[$6>>2] = $8;
 $9 = ((($iov)) + 12|0);
 HEAP32[$9>>2] = $2;
 $10 = HEAP32[1896]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $16 = ((($f)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $17;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $iov;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer3|0))|0);
  $19 = (___syscall_ret($18)|0);
  $cnt$0 = $19;
 } else {
  _pthread_cleanup_push((75|0),($f|0));
  $12 = ((($f)) + 60|0);
  $13 = HEAP32[$12>>2]|0;
  HEAP32[$vararg_buffer>>2] = $13;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $iov;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $14 = (___syscall145(145,($vararg_buffer|0))|0);
  $15 = (___syscall_ret($14)|0);
  _pthread_cleanup_pop(0);
  $cnt$0 = $15;
 }
 $20 = ($cnt$0|0)<(1);
 if ($20) {
  $21 = $cnt$0 & 48;
  $22 = $21 ^ 16;
  $23 = HEAP32[$f>>2]|0;
  $24 = $23 | $22;
  HEAP32[$f>>2] = $24;
  $25 = ((($f)) + 8|0);
  HEAP32[$25>>2] = 0;
  $26 = ((($f)) + 4|0);
  HEAP32[$26>>2] = 0;
  $$0 = $cnt$0;
 } else {
  $27 = HEAP32[$0>>2]|0;
  $28 = ($cnt$0>>>0)>($27>>>0);
  if ($28) {
   $29 = (($cnt$0) - ($27))|0;
   $30 = HEAP32[$7>>2]|0;
   $31 = ((($f)) + 4|0);
   HEAP32[$31>>2] = $30;
   $$cast = $30;
   $32 = (($$cast) + ($29)|0);
   $33 = ((($f)) + 8|0);
   HEAP32[$33>>2] = $32;
   $34 = HEAP32[$1>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $$0 = $len;
   } else {
    $36 = ((($$cast)) + 1|0);
    HEAP32[$31>>2] = $36;
    $37 = HEAP8[$$cast>>0]|0;
    $38 = (($len) + -1)|0;
    $39 = (($buf) + ($38)|0);
    HEAP8[$39>>0] = $37;
    $$0 = $len;
   }
  } else {
   $$0 = $cnt$0;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _cleanup($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 68|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  ___unlockfile($p);
 }
 return;
}
function _scalbn($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $0 = 0, $1 = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0.0, $9 = 0, $y$0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)>(1023);
 if ($0) {
  $1 = $x * 8.9884656743115795E+307;
  $2 = (($n) + -1023)|0;
  $3 = ($2|0)>(1023);
  if ($3) {
   $4 = $1 * 8.9884656743115795E+307;
   $5 = (($n) + -2046)|0;
   $6 = ($5|0)>(1023);
   $$ = $6 ? 1023 : $5;
   $$0 = $$;$y$0 = $4;
  } else {
   $$0 = $2;$y$0 = $1;
  }
 } else {
  $7 = ($n|0)<(-1022);
  if ($7) {
   $8 = $x * 2.2250738585072014E-308;
   $9 = (($n) + 1022)|0;
   $10 = ($9|0)<(-1022);
   if ($10) {
    $11 = $8 * 2.2250738585072014E-308;
    $12 = (($n) + 2044)|0;
    $13 = ($12|0)<(-1022);
    $$1 = $13 ? -1022 : $12;
    $$0 = $$1;$y$0 = $11;
   } else {
    $$0 = $9;$y$0 = $8;
   }
  } else {
   $$0 = $n;$y$0 = $x;
  }
 }
 $14 = (($$0) + 1023)|0;
 $15 = (_bitshift64Shl(($14|0),0,52)|0);
 $16 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $15;HEAP32[tempDoublePtr+4>>2] = $16;$17 = +HEAPF64[tempDoublePtr>>3];
 $18 = $y$0 * $17;
 return (+$18);
}
function _frexp($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $x;$0 = HEAP32[tempDoublePtr>>2]|0;
 $1 = HEAP32[tempDoublePtr+4>>2]|0;
 $2 = (_bitshift64Lshr(($0|0),($1|0),52)|0);
 $3 = tempRet0;
 $4 = $2 & 2047;
 switch ($4|0) {
 case 0:  {
  $5 = $x != 0.0;
  if ($5) {
   $6 = $x * 1.8446744073709552E+19;
   $7 = (+_frexp($6,$e));
   $8 = HEAP32[$e>>2]|0;
   $9 = (($8) + -64)|0;
   $$01 = $7;$storemerge = $9;
  } else {
   $$01 = $x;$storemerge = 0;
  }
  HEAP32[$e>>2] = $storemerge;
  $$0 = $$01;
  break;
 }
 case 2047:  {
  $$0 = $x;
  break;
 }
 default: {
  $10 = (($4) + -1022)|0;
  HEAP32[$e>>2] = $10;
  $11 = $1 & -2146435073;
  $12 = $11 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $0;HEAP32[tempDoublePtr+4>>2] = $12;$13 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $13;
 }
 }
 return (+$$0);
}
function _frexpl($x,$e) {
 $x = +$x;
 $e = $e|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_frexp($x,$e));
 return (+$0);
}
function _ldexp($x,$n) {
 $x = +$x;
 $n = $n|0;
 var $0 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (+_scalbn($x,$n));
 return (+$0);
}
function _memchr($src,$c,$n) {
 $src = $src|0;
 $c = $c|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$0$lcssa30 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$110$lcssa = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond18 = 0, $s$0$lcssa = 0, $s$0$lcssa29 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, $w$011$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = $src;
 $2 = $1 & 3;
 $3 = ($2|0)!=(0);
 $4 = ($n|0)!=(0);
 $or$cond18 = $4 & $3;
 L1: do {
  if ($or$cond18) {
   $5 = $c&255;
   $$019 = $n;$s$020 = $src;
   while(1) {
    $6 = HEAP8[$s$020>>0]|0;
    $7 = ($6<<24>>24)==($5<<24>>24);
    if ($7) {
     $$0$lcssa30 = $$019;$s$0$lcssa29 = $s$020;
     label = 6;
     break L1;
    }
    $8 = ((($s$020)) + 1|0);
    $9 = (($$019) + -1)|0;
    $10 = $8;
    $11 = $10 & 3;
    $12 = ($11|0)!=(0);
    $13 = ($9|0)!=(0);
    $or$cond = $13 & $12;
    if ($or$cond) {
     $$019 = $9;$s$020 = $8;
    } else {
     $$0$lcssa = $9;$$lcssa = $13;$s$0$lcssa = $8;
     label = 5;
     break;
    }
   }
  } else {
   $$0$lcssa = $n;$$lcssa = $4;$s$0$lcssa = $src;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$0$lcssa30 = $$0$lcssa;$s$0$lcssa29 = $s$0$lcssa;
   label = 6;
  } else {
   $$3 = 0;$s$2 = $s$0$lcssa;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $14 = HEAP8[$s$0$lcssa29>>0]|0;
   $15 = $c&255;
   $16 = ($14<<24>>24)==($15<<24>>24);
   if ($16) {
    $$3 = $$0$lcssa30;$s$2 = $s$0$lcssa29;
   } else {
    $17 = Math_imul($0, 16843009)|0;
    $18 = ($$0$lcssa30>>>0)>(3);
    L11: do {
     if ($18) {
      $$110 = $$0$lcssa30;$w$011 = $s$0$lcssa29;
      while(1) {
       $19 = HEAP32[$w$011>>2]|0;
       $20 = $19 ^ $17;
       $21 = (($20) + -16843009)|0;
       $22 = $20 & -2139062144;
       $23 = $22 ^ -2139062144;
       $24 = $23 & $21;
       $25 = ($24|0)==(0);
       if (!($25)) {
        $$110$lcssa = $$110;$w$011$lcssa = $w$011;
        break;
       }
       $26 = ((($w$011)) + 4|0);
       $27 = (($$110) + -4)|0;
       $28 = ($27>>>0)>(3);
       if ($28) {
        $$110 = $27;$w$011 = $26;
       } else {
        $$1$lcssa = $27;$w$0$lcssa = $26;
        label = 11;
        break L11;
       }
      }
      $$24 = $$110$lcssa;$s$15 = $w$011$lcssa;
     } else {
      $$1$lcssa = $$0$lcssa30;$w$0$lcssa = $s$0$lcssa29;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $29 = ($$1$lcssa|0)==(0);
     if ($29) {
      $$3 = 0;$s$2 = $w$0$lcssa;
      break;
     } else {
      $$24 = $$1$lcssa;$s$15 = $w$0$lcssa;
     }
    }
    while(1) {
     $30 = HEAP8[$s$15>>0]|0;
     $31 = ($30<<24>>24)==($15<<24>>24);
     if ($31) {
      $$3 = $$24;$s$2 = $s$15;
      break L8;
     }
     $32 = ((($s$15)) + 1|0);
     $33 = (($$24) + -1)|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$3 = 0;$s$2 = $32;
      break;
     } else {
      $$24 = $33;$s$15 = $32;
     }
    }
   }
  }
 } while(0);
 $35 = ($$3|0)!=(0);
 $36 = $35 ? $s$2 : 0;
 return ($36|0);
}
function _strcmp($l,$r) {
 $l = $l|0;
 $r = $r|0;
 var $$014 = 0, $$05 = 0, $$lcssa = 0, $$lcssa2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$l>>0]|0;
 $1 = HEAP8[$r>>0]|0;
 $2 = ($0<<24>>24)!=($1<<24>>24);
 $3 = ($0<<24>>24)==(0);
 $or$cond3 = $3 | $2;
 if ($or$cond3) {
  $$lcssa = $0;$$lcssa2 = $1;
 } else {
  $$014 = $l;$$05 = $r;
  while(1) {
   $4 = ((($$014)) + 1|0);
   $5 = ((($$05)) + 1|0);
   $6 = HEAP8[$4>>0]|0;
   $7 = HEAP8[$5>>0]|0;
   $8 = ($6<<24>>24)!=($7<<24>>24);
   $9 = ($6<<24>>24)==(0);
   $or$cond = $9 | $8;
   if ($or$cond) {
    $$lcssa = $6;$$lcssa2 = $7;
    break;
   } else {
    $$014 = $4;$$05 = $5;
   }
  }
 }
 $10 = $$lcssa&255;
 $11 = $$lcssa2&255;
 $12 = (($10) - ($11))|0;
 return ($12|0);
}
function _strtol($s,$p,$base) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strtox_317($s,$p,$base,-2147483648,0)|0);
 $1 = tempRet0;
 return ($0|0);
}
function _strtox_317($s,$p,$base,$0,$1) {
 $s = $s|0;
 $p = $p|0;
 $base = $base|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $f = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $f = sp;
 HEAP32[$f>>2] = 0;
 $2 = ((($f)) + 4|0);
 HEAP32[$2>>2] = $s;
 $3 = ((($f)) + 44|0);
 HEAP32[$3>>2] = $s;
 $4 = ($s|0)<(0|0);
 $5 = ((($s)) + 2147483647|0);
 $$sink = $4 ? (-1) : $5;
 $6 = ((($f)) + 8|0);
 HEAP32[$6>>2] = $$sink;
 $7 = ((($f)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($f,0);
 $8 = (___intscan($f,$base,1,$0,$1)|0);
 $9 = tempRet0;
 $10 = ($p|0)==(0|0);
 if (!($10)) {
  $11 = ((($f)) + 108|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = HEAP32[$2>>2]|0;
  $14 = HEAP32[$6>>2]|0;
  $15 = (($13) + ($12))|0;
  $16 = (($15) - ($14))|0;
  $17 = (($s) + ($16)|0);
  HEAP32[$p>>2] = $17;
 }
 tempRet0 = ($9);
 STACKTOP = sp;return ($8|0);
}
function ___shlim($f,$lim) {
 $f = $f|0;
 $lim = $lim|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 HEAP32[$0>>2] = $lim;
 $1 = ((($f)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($f)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($2) - ($4))|0;
 $6 = ((($f)) + 108|0);
 HEAP32[$6>>2] = $5;
 $7 = ($lim|0)!=(0);
 $8 = ($5|0)>($lim|0);
 $or$cond = $7 & $8;
 if ($or$cond) {
  $9 = $4;
  $10 = (($9) + ($lim)|0);
  $11 = ((($f)) + 100|0);
  HEAP32[$11>>2] = $10;
 } else {
  $12 = ((($f)) + 100|0);
  HEAP32[$12>>2] = $2;
 }
 return;
}
function ___intscan($f,$base,$pok,$0,$1) {
 $f = $f|0;
 $base = $base|0;
 $pok = $pok|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $$115 = 0, $$116 = 0, $$base14 = 0, $$lcssa = 0, $$lcssa108 = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$117 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$359 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0;
 var $c$6$lcssa = 0, $c$7$be = 0, $c$742 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $neg$0$ = 0, $neg$1 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond31 = 0, $or$cond5 = 0, $or$cond7 = 0, $x$070 = 0, $x$136 = 0, $x$254 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($base>>>0)>(36);
 L1: do {
  if ($2) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $286 = 0;$287 = 0;
  } else {
   $3 = ((($f)) + 4|0);
   $4 = ((($f)) + 100|0);
   while(1) {
    $6 = HEAP32[$3>>2]|0;
    $7 = HEAP32[$4>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$3>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($f)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $$lcssa113 = $13;
     break;
    }
   }
   $16 = ($$lcssa113|0)==(45);
   L11: do {
    switch ($$lcssa113|0) {
    case 43: case 45:  {
     $17 = $16 << 31 >> 31;
     $18 = HEAP32[$3>>2]|0;
     $19 = HEAP32[$4>>2]|0;
     $20 = ($18>>>0)<($19>>>0);
     if ($20) {
      $21 = ((($18)) + 1|0);
      HEAP32[$3>>2] = $21;
      $22 = HEAP8[$18>>0]|0;
      $23 = $22&255;
      $c$0 = $23;$neg$0 = $17;
      break L11;
     } else {
      $24 = (___shgetc($f)|0);
      $c$0 = $24;$neg$0 = $17;
      break L11;
     }
     break;
    }
    default: {
     $c$0 = $$lcssa113;$neg$0 = 0;
    }
    }
   } while(0);
   $25 = ($base|0)==(0);
   $26 = $base | 16;
   $27 = ($26|0)==(16);
   $28 = ($c$0|0)==(48);
   $or$cond5 = $27 & $28;
   do {
    if ($or$cond5) {
     $29 = HEAP32[$3>>2]|0;
     $30 = HEAP32[$4>>2]|0;
     $31 = ($29>>>0)<($30>>>0);
     if ($31) {
      $32 = ((($29)) + 1|0);
      HEAP32[$3>>2] = $32;
      $33 = HEAP8[$29>>0]|0;
      $34 = $33&255;
      $37 = $34;
     } else {
      $35 = (___shgetc($f)|0);
      $37 = $35;
     }
     $36 = $37 | 32;
     $38 = ($36|0)==(120);
     if (!($38)) {
      if ($25) {
       $$116 = 8;$c$117 = $37;
       label = 46;
       break;
      } else {
       $$1 = $base;$c$1 = $37;
       label = 32;
       break;
      }
     }
     $39 = HEAP32[$3>>2]|0;
     $40 = HEAP32[$4>>2]|0;
     $41 = ($39>>>0)<($40>>>0);
     if ($41) {
      $42 = ((($39)) + 1|0);
      HEAP32[$3>>2] = $42;
      $43 = HEAP8[$39>>0]|0;
      $44 = $43&255;
      $47 = $44;
     } else {
      $45 = (___shgetc($f)|0);
      $47 = $45;
     }
     $46 = ((4179) + ($47)|0);
     $48 = HEAP8[$46>>0]|0;
     $49 = ($48&255)>(15);
     if ($49) {
      $50 = HEAP32[$4>>2]|0;
      $51 = ($50|0)==(0|0);
      if (!($51)) {
       $52 = HEAP32[$3>>2]|0;
       $53 = ((($52)) + -1|0);
       HEAP32[$3>>2] = $53;
      }
      $54 = ($pok|0)==(0);
      if ($54) {
       ___shlim($f,0);
       $286 = 0;$287 = 0;
       break L1;
      }
      if ($51) {
       $286 = 0;$287 = 0;
       break L1;
      }
      $55 = HEAP32[$3>>2]|0;
      $56 = ((($55)) + -1|0);
      HEAP32[$3>>2] = $56;
      $286 = 0;$287 = 0;
      break L1;
     } else {
      $$116 = 16;$c$117 = $47;
      label = 46;
     }
    } else {
     $$base14 = $25 ? 10 : $base;
     $57 = ((4179) + ($c$0)|0);
     $58 = HEAP8[$57>>0]|0;
     $59 = $58&255;
     $60 = ($59>>>0)<($$base14>>>0);
     if ($60) {
      $$1 = $$base14;$c$1 = $c$0;
      label = 32;
     } else {
      $61 = HEAP32[$4>>2]|0;
      $62 = ($61|0)==(0|0);
      if (!($62)) {
       $63 = HEAP32[$3>>2]|0;
       $64 = ((($63)) + -1|0);
       HEAP32[$3>>2] = $64;
      }
      ___shlim($f,0);
      $65 = (___errno_location()|0);
      HEAP32[$65>>2] = 22;
      $286 = 0;$287 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $66 = ($$1|0)==(10);
    if ($66) {
     $67 = (($c$1) + -48)|0;
     $68 = ($67>>>0)<(10);
     if ($68) {
      $71 = $67;$x$070 = 0;
      while(1) {
       $69 = ($x$070*10)|0;
       $70 = (($69) + ($71))|0;
       $72 = HEAP32[$3>>2]|0;
       $73 = HEAP32[$4>>2]|0;
       $74 = ($72>>>0)<($73>>>0);
       if ($74) {
        $75 = ((($72)) + 1|0);
        HEAP32[$3>>2] = $75;
        $76 = HEAP8[$72>>0]|0;
        $77 = $76&255;
        $c$2$be = $77;
       } else {
        $78 = (___shgetc($f)|0);
        $c$2$be = $78;
       }
       $79 = (($c$2$be) + -48)|0;
       $80 = ($79>>>0)<(10);
       $81 = ($70>>>0)<(429496729);
       $82 = $80 & $81;
       if ($82) {
        $71 = $79;$x$070 = $70;
       } else {
        $$lcssa112 = $70;$c$2$be$lcssa = $c$2$be;
        break;
       }
      }
      $288 = $$lcssa112;$289 = 0;$c$2$lcssa = $c$2$be$lcssa;
     } else {
      $288 = 0;$289 = 0;$c$2$lcssa = $c$1;
     }
     $83 = (($c$2$lcssa) + -48)|0;
     $84 = ($83>>>0)<(10);
     if ($84) {
      $85 = $288;$86 = $289;$89 = $83;$c$359 = $c$2$lcssa;
      while(1) {
       $87 = (___muldi3(($85|0),($86|0),10,0)|0);
       $88 = tempRet0;
       $90 = ($89|0)<(0);
       $91 = $90 << 31 >> 31;
       $92 = $89 ^ -1;
       $93 = $91 ^ -1;
       $94 = ($88>>>0)>($93>>>0);
       $95 = ($87>>>0)>($92>>>0);
       $96 = ($88|0)==($93|0);
       $97 = $96 & $95;
       $98 = $94 | $97;
       if ($98) {
        $$lcssa = $89;$290 = $85;$291 = $86;$c$3$lcssa = $c$359;
        break;
       }
       $99 = (_i64Add(($87|0),($88|0),($89|0),($91|0))|0);
       $100 = tempRet0;
       $101 = HEAP32[$3>>2]|0;
       $102 = HEAP32[$4>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        $104 = ((($101)) + 1|0);
        HEAP32[$3>>2] = $104;
        $105 = HEAP8[$101>>0]|0;
        $106 = $105&255;
        $c$3$be = $106;
       } else {
        $107 = (___shgetc($f)|0);
        $c$3$be = $107;
       }
       $108 = (($c$3$be) + -48)|0;
       $109 = ($108>>>0)<(10);
       $110 = ($100>>>0)<(429496729);
       $111 = ($99>>>0)<(2576980378);
       $112 = ($100|0)==(429496729);
       $113 = $112 & $111;
       $114 = $110 | $113;
       $or$cond7 = $109 & $114;
       if ($or$cond7) {
        $85 = $99;$86 = $100;$89 = $108;$c$359 = $c$3$be;
       } else {
        $$lcssa = $108;$290 = $99;$291 = $100;$c$3$lcssa = $c$3$be;
        break;
       }
      }
      $115 = ($$lcssa>>>0)>(9);
      if ($115) {
       $259 = $291;$261 = $290;$neg$1 = $neg$0;
      } else {
       $$115 = 10;$292 = $290;$293 = $291;$c$8 = $c$3$lcssa;
       label = 72;
      }
     } else {
      $259 = $289;$261 = $288;$neg$1 = $neg$0;
     }
    } else {
     $$116 = $$1;$c$117 = $c$1;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $116 = (($$116) + -1)|0;
     $117 = $116 & $$116;
     $118 = ($117|0)==(0);
     if ($118) {
      $123 = ($$116*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (4435 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((4179) + ($c$117)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($131>>>0)<($$116>>>0);
      if ($132) {
       $135 = $131;$x$136 = 0;
       while(1) {
        $133 = $x$136 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$3>>2]|0;
        $137 = HEAP32[$4>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$3>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $c$4$be = $141;
        } else {
         $142 = (___shgetc($f)|0);
         $c$4$be = $142;
        }
        $143 = ((4179) + ($c$4$be)|0);
        $144 = HEAP8[$143>>0]|0;
        $145 = $144&255;
        $146 = ($145>>>0)<($$116>>>0);
        $147 = ($134>>>0)<(134217728);
        $148 = $147 & $146;
        if ($148) {
         $135 = $145;$x$136 = $134;
        } else {
         $$lcssa108 = $134;$$lcssa109 = $144;$c$4$be$lcssa = $c$4$be;
         break;
        }
       }
       $152 = $$lcssa109;$154 = 0;$156 = $$lcssa108;$c$4$lcssa = $c$4$be$lcssa;
      } else {
       $152 = $130;$154 = 0;$156 = 0;$c$4$lcssa = $c$117;
      }
      $149 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $150 = tempRet0;
      $151 = $152&255;
      $153 = ($151>>>0)>=($$116>>>0);
      $155 = ($154>>>0)>($150>>>0);
      $157 = ($156>>>0)>($149>>>0);
      $158 = ($154|0)==($150|0);
      $159 = $158 & $157;
      $160 = $155 | $159;
      $or$cond31 = $153 | $160;
      if ($or$cond31) {
       $$115 = $$116;$292 = $156;$293 = $154;$c$8 = $c$4$lcssa;
       label = 72;
       break;
      } else {
       $161 = $156;$162 = $154;$166 = $152;
      }
      while(1) {
       $163 = (_bitshift64Shl(($161|0),($162|0),($128|0))|0);
       $164 = tempRet0;
       $165 = $166&255;
       $167 = $165 | $163;
       $168 = HEAP32[$3>>2]|0;
       $169 = HEAP32[$4>>2]|0;
       $170 = ($168>>>0)<($169>>>0);
       if ($170) {
        $171 = ((($168)) + 1|0);
        HEAP32[$3>>2] = $171;
        $172 = HEAP8[$168>>0]|0;
        $173 = $172&255;
        $c$5$be = $173;
       } else {
        $174 = (___shgetc($f)|0);
        $c$5$be = $174;
       }
       $175 = ((4179) + ($c$5$be)|0);
       $176 = HEAP8[$175>>0]|0;
       $177 = $176&255;
       $178 = ($177>>>0)>=($$116>>>0);
       $179 = ($164>>>0)>($150>>>0);
       $180 = ($167>>>0)>($149>>>0);
       $181 = ($164|0)==($150|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$115 = $$116;$292 = $167;$293 = $164;$c$8 = $c$5$be;
        label = 72;
        break L63;
       } else {
        $161 = $167;$162 = $164;$166 = $176;
       }
      }
     }
     $119 = ((4179) + ($c$117)|0);
     $120 = HEAP8[$119>>0]|0;
     $121 = $120&255;
     $122 = ($121>>>0)<($$116>>>0);
     if ($122) {
      $186 = $121;$x$254 = 0;
      while(1) {
       $184 = Math_imul($x$254, $$116)|0;
       $185 = (($186) + ($184))|0;
       $187 = HEAP32[$3>>2]|0;
       $188 = HEAP32[$4>>2]|0;
       $189 = ($187>>>0)<($188>>>0);
       if ($189) {
        $190 = ((($187)) + 1|0);
        HEAP32[$3>>2] = $190;
        $191 = HEAP8[$187>>0]|0;
        $192 = $191&255;
        $c$6$be = $192;
       } else {
        $193 = (___shgetc($f)|0);
        $c$6$be = $193;
       }
       $194 = ((4179) + ($c$6$be)|0);
       $195 = HEAP8[$194>>0]|0;
       $196 = $195&255;
       $197 = ($196>>>0)<($$116>>>0);
       $198 = ($185>>>0)<(119304647);
       $199 = $198 & $197;
       if ($199) {
        $186 = $196;$x$254 = $185;
       } else {
        $$lcssa110 = $185;$$lcssa111 = $195;$c$6$be$lcssa = $c$6$be;
        break;
       }
      }
      $201 = $$lcssa111;$294 = $$lcssa110;$295 = 0;$c$6$lcssa = $c$6$be$lcssa;
     } else {
      $201 = $120;$294 = 0;$295 = 0;$c$6$lcssa = $c$117;
     }
     $200 = $201&255;
     $202 = ($200>>>0)<($$116>>>0);
     if ($202) {
      $203 = (___udivdi3(-1,-1,($$116|0),0)|0);
      $204 = tempRet0;
      $205 = $295;$207 = $294;$215 = $201;$c$742 = $c$6$lcssa;
      while(1) {
       $206 = ($205>>>0)>($204>>>0);
       $208 = ($207>>>0)>($203>>>0);
       $209 = ($205|0)==($204|0);
       $210 = $209 & $208;
       $211 = $206 | $210;
       if ($211) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $212 = (___muldi3(($207|0),($205|0),($$116|0),0)|0);
       $213 = tempRet0;
       $214 = $215&255;
       $216 = $214 ^ -1;
       $217 = ($213>>>0)>(4294967295);
       $218 = ($212>>>0)>($216>>>0);
       $219 = ($213|0)==(-1);
       $220 = $219 & $218;
       $221 = $217 | $220;
       if ($221) {
        $$115 = $$116;$292 = $207;$293 = $205;$c$8 = $c$742;
        label = 72;
        break L63;
       }
       $222 = (_i64Add(($214|0),0,($212|0),($213|0))|0);
       $223 = tempRet0;
       $224 = HEAP32[$3>>2]|0;
       $225 = HEAP32[$4>>2]|0;
       $226 = ($224>>>0)<($225>>>0);
       if ($226) {
        $227 = ((($224)) + 1|0);
        HEAP32[$3>>2] = $227;
        $228 = HEAP8[$224>>0]|0;
        $229 = $228&255;
        $c$7$be = $229;
       } else {
        $230 = (___shgetc($f)|0);
        $c$7$be = $230;
       }
       $231 = ((4179) + ($c$7$be)|0);
       $232 = HEAP8[$231>>0]|0;
       $233 = $232&255;
       $234 = ($233>>>0)<($$116>>>0);
       if ($234) {
        $205 = $223;$207 = $222;$215 = $232;$c$742 = $c$7$be;
       } else {
        $$115 = $$116;$292 = $222;$293 = $223;$c$8 = $c$7$be;
        label = 72;
        break;
       }
      }
     } else {
      $$115 = $$116;$292 = $294;$293 = $295;$c$8 = $c$6$lcssa;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $235 = ((4179) + ($c$8)|0);
    $236 = HEAP8[$235>>0]|0;
    $237 = $236&255;
    $238 = ($237>>>0)<($$115>>>0);
    if ($238) {
     while(1) {
      $239 = HEAP32[$3>>2]|0;
      $240 = HEAP32[$4>>2]|0;
      $241 = ($239>>>0)<($240>>>0);
      if ($241) {
       $242 = ((($239)) + 1|0);
       HEAP32[$3>>2] = $242;
       $243 = HEAP8[$239>>0]|0;
       $244 = $243&255;
       $c$9$be = $244;
      } else {
       $245 = (___shgetc($f)|0);
       $c$9$be = $245;
      }
      $246 = ((4179) + ($c$9$be)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = $247&255;
      $249 = ($248>>>0)<($$115>>>0);
      if (!($249)) {
       break;
      }
     }
     $250 = (___errno_location()|0);
     HEAP32[$250>>2] = 34;
     $251 = $0 & 1;
     $252 = ($251|0)==(0);
     $253 = (0)==(0);
     $254 = $252 & $253;
     $neg$0$ = $254 ? $neg$0 : 0;
     $259 = $1;$261 = $0;$neg$1 = $neg$0$;
    } else {
     $259 = $293;$261 = $292;$neg$1 = $neg$0;
    }
   }
   $255 = HEAP32[$4>>2]|0;
   $256 = ($255|0)==(0|0);
   if (!($256)) {
    $257 = HEAP32[$3>>2]|0;
    $258 = ((($257)) + -1|0);
    HEAP32[$3>>2] = $258;
   }
   $260 = ($259>>>0)<($1>>>0);
   $262 = ($261>>>0)<($0>>>0);
   $263 = ($259|0)==($1|0);
   $264 = $263 & $262;
   $265 = $260 | $264;
   if (!($265)) {
    $266 = $0 & 1;
    $267 = ($266|0)!=(0);
    $268 = (0)!=(0);
    $269 = $267 | $268;
    $270 = ($neg$1|0)!=(0);
    $or$cond12 = $269 | $270;
    if (!($or$cond12)) {
     $271 = (___errno_location()|0);
     HEAP32[$271>>2] = 34;
     $272 = (_i64Add(($0|0),($1|0),-1,-1)|0);
     $273 = tempRet0;
     $286 = $273;$287 = $272;
     break;
    }
    $274 = ($259>>>0)>($1>>>0);
    $275 = ($261>>>0)>($0>>>0);
    $276 = ($259|0)==($1|0);
    $277 = $276 & $275;
    $278 = $274 | $277;
    if ($278) {
     $279 = (___errno_location()|0);
     HEAP32[$279>>2] = 34;
     $286 = $1;$287 = $0;
     break;
    }
   }
   $280 = ($neg$1|0)<(0);
   $281 = $280 << 31 >> 31;
   $282 = $261 ^ $neg$1;
   $283 = $259 ^ $281;
   $284 = (_i64Subtract(($282|0),($283|0),($neg$1|0),($281|0))|0);
   $285 = tempRet0;
   $286 = $285;$287 = $284;
  }
 } while(0);
 tempRet0 = ($286);
 return ($287|0);
}
function ___shgetc($f) {
 $f = $f|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert3 = 0, $$pre = 0, $$pre4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 104|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0);
 if ($2) {
  label = 3;
 } else {
  $3 = ((($f)) + 108|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)<($1|0);
  if ($5) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $6 = (___uflow($f)|0);
  $7 = ($6|0)<(0);
  if ($7) {
   label = 4;
  } else {
   $9 = HEAP32[$0>>2]|0;
   $10 = ($9|0)==(0);
   $$phi$trans$insert = ((($f)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($10) {
    $11 = $$pre;
    $41 = $11;
    label = 9;
   } else {
    $12 = ((($f)) + 4|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = $13;
    $15 = (($$pre) - ($14))|0;
    $16 = ((($f)) + 108|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = (($9) - ($17))|0;
    $19 = ($15|0)<($18|0);
    $20 = $$pre;
    if ($19) {
     $41 = $20;
     label = 9;
    } else {
     $21 = (($18) + -1)|0;
     $22 = (($13) + ($21)|0);
     $23 = ((($f)) + 100|0);
     HEAP32[$23>>2] = $22;
     $25 = $20;
    }
   }
   if ((label|0) == 9) {
    $24 = ((($f)) + 100|0);
    HEAP32[$24>>2] = $$pre;
    $25 = $41;
   }
   $26 = ($25|0)==(0|0);
   $$phi$trans$insert3 = ((($f)) + 4|0);
   if ($26) {
    $$pre4 = HEAP32[$$phi$trans$insert3>>2]|0;
    $36 = $$pre4;
   } else {
    $27 = HEAP32[$$phi$trans$insert3>>2]|0;
    $28 = $25;
    $29 = ((($f)) + 108|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = (($28) + 1)|0;
    $32 = (($31) - ($27))|0;
    $33 = (($32) + ($30))|0;
    HEAP32[$29>>2] = $33;
    $34 = $27;
    $36 = $34;
   }
   $35 = ((($36)) + -1|0);
   $37 = HEAP8[$35>>0]|0;
   $38 = $37&255;
   $39 = ($38|0)==($6|0);
   if ($39) {
    $$0 = $6;
   } else {
    $40 = $6&255;
    HEAP8[$35>>0] = $40;
    $$0 = $6;
   }
  }
 }
 if ((label|0) == 4) {
  $8 = ((($f)) + 100|0);
  HEAP32[$8>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___uflow($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = ((($f)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $3 = (___toread($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $5 = ((($f)) + 32|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (FUNCTION_TABLE_iiii[$6 & 127]($f,$c,1)|0);
  $8 = ($7|0)==(1);
  if ($8) {
   $9 = HEAP8[$c>>0]|0;
   $10 = $9&255;
   $$0 = $10;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = ((($f)) + 20|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($f)) + 44|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($7>>>0)>($9>>>0);
 if ($10) {
  $11 = ((($f)) + 36|0);
  $12 = HEAP32[$11>>2]|0;
  (FUNCTION_TABLE_iiii[$12 & 127]($f,0,0)|0);
 }
 $13 = ((($f)) + 16|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($f)) + 28|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$6>>2] = 0;
 $15 = HEAP32[$f>>2]|0;
 $16 = $15 & 20;
 $17 = ($16|0)==(0);
 if ($17) {
  $21 = HEAP32[$8>>2]|0;
  $22 = ((($f)) + 8|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($f)) + 4|0);
  HEAP32[$23>>2] = $21;
  $$0 = 0;
 } else {
  $18 = $15 & 4;
  $19 = ($18|0)==(0);
  if ($19) {
   $$0 = -1;
  } else {
   $20 = $15 | 32;
   HEAP32[$f>>2] = $20;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _isspace($c) {
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($c|0)==(32);
 $1 = (($c) + -9)|0;
 $2 = ($1>>>0)<(5);
 $3 = $0 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _strlen($s) {
 $s = $s|0;
 var $$0 = 0, $$01$lcssa = 0, $$014 = 0, $$1$lcssa = 0, $$lcssa20 = 0, $$pn = 0, $$pn15 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $w$0 = 0, $w$0$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $s;
 $1 = $0 & 3;
 $2 = ($1|0)==(0);
 L1: do {
  if ($2) {
   $$01$lcssa = $s;
   label = 4;
  } else {
   $$014 = $s;$21 = $0;
   while(1) {
    $3 = HEAP8[$$014>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$pn = $21;
     break L1;
    }
    $5 = ((($$014)) + 1|0);
    $6 = $5;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     $$01$lcssa = $5;
     label = 4;
     break;
    } else {
     $$014 = $5;$21 = $6;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $w$0 = $$01$lcssa;
  while(1) {
   $9 = HEAP32[$w$0>>2]|0;
   $10 = (($9) + -16843009)|0;
   $11 = $9 & -2139062144;
   $12 = $11 ^ -2139062144;
   $13 = $12 & $10;
   $14 = ($13|0)==(0);
   $15 = ((($w$0)) + 4|0);
   if ($14) {
    $w$0 = $15;
   } else {
    $$lcssa20 = $9;$w$0$lcssa = $w$0;
    break;
   }
  }
  $16 = $$lcssa20&255;
  $17 = ($16<<24>>24)==(0);
  if ($17) {
   $$1$lcssa = $w$0$lcssa;
  } else {
   $$pn15 = $w$0$lcssa;
   while(1) {
    $18 = ((($$pn15)) + 1|0);
    $$pre = HEAP8[$18>>0]|0;
    $19 = ($$pre<<24>>24)==(0);
    if ($19) {
     $$1$lcssa = $18;
     break;
    } else {
     $$pn15 = $18;
    }
   }
  }
  $20 = $$1$lcssa;
  $$pn = $20;
 }
 $$0 = (($$pn) - ($0))|0;
 return ($$0|0);
}
function _strchr($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___strchrnul($s,$c)|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $c&255;
 $3 = ($1<<24>>24)==($2<<24>>24);
 $4 = $3 ? $0 : 0;
 return ($4|0);
}
function ___strchrnul($s,$c) {
 $s = $s|0;
 $c = $c|0;
 var $$0 = 0, $$02$lcssa = 0, $$0211 = 0, $$1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, $w$0$lcssa = 0, $w$08 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $c & 255;
 $1 = ($0|0)==(0);
 L1: do {
  if ($1) {
   $6 = (_strlen($s)|0);
   $7 = (($s) + ($6)|0);
   $$0 = $7;
  } else {
   $2 = $s;
   $3 = $2 & 3;
   $4 = ($3|0)==(0);
   if ($4) {
    $$02$lcssa = $s;
   } else {
    $5 = $c&255;
    $$0211 = $s;
    while(1) {
     $8 = HEAP8[$$0211>>0]|0;
     $9 = ($8<<24>>24)==(0);
     $10 = ($8<<24>>24)==($5<<24>>24);
     $or$cond = $9 | $10;
     if ($or$cond) {
      $$0 = $$0211;
      break L1;
     }
     $11 = ((($$0211)) + 1|0);
     $12 = $11;
     $13 = $12 & 3;
     $14 = ($13|0)==(0);
     if ($14) {
      $$02$lcssa = $11;
      break;
     } else {
      $$0211 = $11;
     }
    }
   }
   $15 = Math_imul($0, 16843009)|0;
   $16 = HEAP32[$$02$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   L10: do {
    if ($21) {
     $23 = $16;$w$08 = $$02$lcssa;
     while(1) {
      $22 = $23 ^ $15;
      $24 = (($22) + -16843009)|0;
      $25 = $22 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $w$0$lcssa = $w$08;
       break L10;
      }
      $29 = ((($w$08)) + 4|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (($30) + -16843009)|0;
      $32 = $30 & -2139062144;
      $33 = $32 ^ -2139062144;
      $34 = $33 & $31;
      $35 = ($34|0)==(0);
      if ($35) {
       $23 = $30;$w$08 = $29;
      } else {
       $w$0$lcssa = $29;
       break;
      }
     }
    } else {
     $w$0$lcssa = $$02$lcssa;
    }
   } while(0);
   $36 = $c&255;
   $$1 = $w$0$lcssa;
   while(1) {
    $37 = HEAP8[$$1>>0]|0;
    $38 = ($37<<24>>24)==(0);
    $39 = ($37<<24>>24)==($36<<24>>24);
    $or$cond5 = $38 | $39;
    $40 = ((($$1)) + 1|0);
    if ($or$cond5) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $40;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _vfprintf($f,$fmt,$ap) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0;
 var $ret$1 = 0, $ret$1$ = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap2 = sp + 120|0;
 $nl_type = sp + 80|0;
 $nl_arg = sp;
 $internal_buf = sp + 136|0;
 dest=$nl_type; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$ap>>2]|0;
 HEAP32[$ap2>>2] = $vacopy_currentptr;
 $0 = (_printf_core(0,$fmt,$ap2,$nl_arg,$nl_type)|0);
 $1 = ($0|0)<(0);
 if ($1) {
  $$0 = -1;
 } else {
  $2 = ((($f)) + 76|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ($3|0)>(-1);
  if ($4) {
   $5 = (___lockfile($f)|0);
   $32 = $5;
  } else {
   $32 = 0;
  }
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 & 32;
  $8 = ((($f)) + 74|0);
  $9 = HEAP8[$8>>0]|0;
  $10 = ($9<<24>>24)<(1);
  if ($10) {
   $11 = $6 & -33;
   HEAP32[$f>>2] = $11;
  }
  $12 = ((($f)) + 48|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   $16 = ((($f)) + 44|0);
   $17 = HEAP32[$16>>2]|0;
   HEAP32[$16>>2] = $internal_buf;
   $18 = ((($f)) + 28|0);
   HEAP32[$18>>2] = $internal_buf;
   $19 = ((($f)) + 20|0);
   HEAP32[$19>>2] = $internal_buf;
   HEAP32[$12>>2] = 80;
   $20 = ((($internal_buf)) + 80|0);
   $21 = ((($f)) + 16|0);
   HEAP32[$21>>2] = $20;
   $22 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $23 = ($17|0)==(0|0);
   if ($23) {
    $ret$1 = $22;
   } else {
    $24 = ((($f)) + 36|0);
    $25 = HEAP32[$24>>2]|0;
    (FUNCTION_TABLE_iiii[$25 & 127]($f,0,0)|0);
    $26 = HEAP32[$19>>2]|0;
    $27 = ($26|0)==(0|0);
    $$ = $27 ? -1 : $22;
    HEAP32[$16>>2] = $17;
    HEAP32[$12>>2] = 0;
    HEAP32[$21>>2] = 0;
    HEAP32[$18>>2] = 0;
    HEAP32[$19>>2] = 0;
    $ret$1 = $$;
   }
  } else {
   $15 = (_printf_core($f,$fmt,$ap2,$nl_arg,$nl_type)|0);
   $ret$1 = $15;
  }
  $28 = HEAP32[$f>>2]|0;
  $29 = $28 & 32;
  $30 = ($29|0)==(0);
  $ret$1$ = $30 ? $ret$1 : -1;
  $31 = $28 | $7;
  HEAP32[$f>>2] = $31;
  $33 = ($32|0)==(0);
  if (!($33)) {
   ___unlockfile($f);
  }
  $$0 = $ret$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($f,$fmt,$ap,$nl_arg,$nl_type) {
 $f = $f|0;
 $fmt = $fmt|0;
 $ap = $ap|0;
 $nl_arg = $nl_arg|0;
 $nl_type = $nl_type|0;
 var $$ = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i = 0, $$012$i = 0, $$013$i = 0, $$03$i33 = 0, $$07$i = 0.0, $$1$i = 0.0, $$114$i = 0, $$2$i = 0.0, $$20$i = 0.0, $$210$$24$i = 0, $$210$$26$i = 0, $$210$i = 0, $$23$i = 0, $$25$i = 0, $$3$i = 0.0, $$311$i = 0;
 var $$33$i = 0, $$36$i = 0.0, $$4$i = 0.0, $$412$lcssa$i = 0, $$41278$i = 0, $$43 = 0, $$5$lcssa$i = 0, $$589$i = 0, $$a$3$i = 0, $$a$3191$i = 0, $$a$3192$i = 0, $$fl$4 = 0, $$l10n$0 = 0, $$lcssa = 0, $$lcssa162$i = 0, $$lcssa295 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0;
 var $$lcssa304 = 0, $$lcssa306 = 0, $$lcssa316 = 0, $$lcssa319 = 0.0, $$lcssa321 = 0, $$neg55$i = 0, $$neg56$i = 0, $$p$$i = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr50$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi190$iZ2D = 0, $$pre170 = 0, $$pre171 = 0, $$pre185$i = 0, $$pre188$i = 0;
 var $$pre189$i = 0, $$z$3$i = 0, $$z$4$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0.0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0.0, $442 = 0.0, $443 = 0.0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0.0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0.0, $594 = 0.0, $595 = 0, $596 = 0.0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0;
 var $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1149$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3136$i = 0, $a$5$lcssa$i = 0, $a$5111$i = 0, $a$6$i = 0, $a$8$i = 0, $a$9$ph$i = 0, $arg = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0;
 var $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0142$i = 0, $carry3$0130$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0141$i = 0, $d$0143$i = 0, $d$1129$i = 0, $d$2$lcssa$i = 0, $d$2110$i = 0, $d$4$i = 0, $d$584$i = 0, $d$677$i = 0, $d$788$i = 0, $e$0125$i = 0;
 var $e$1$i = 0, $e$2106$i = 0, $e$4$i = 0, $e$5$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$195$i = 0, $estr$2$i = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0;
 var $expanded8 = 0, $fl$0100 = 0, $fl$053 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa178 = 0, $i$0105 = 0, $i$0124$i = 0, $i$03$i = 0, $i$03$i25 = 0, $i$1$lcssa$i = 0, $i$1116 = 0, $i$1118$i = 0, $i$2105$i = 0, $i$291 = 0, $i$291$lcssa = 0;
 var $i$3101$i = 0, $i$389 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i27 = 0, $isdigit10 = 0, $isdigit12 = 0, $isdigit2$i = 0, $isdigit2$i23 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i26 = 0, $isdigittmp1$i = 0, $isdigittmp1$i22 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i24 = 0, $isdigittmp9 = 0, $j$0$i = 0;
 var $j$0117$i = 0, $j$0119$i = 0, $j$1102$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1$i = 0, $l$1104 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$0$phi = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0;
 var $or$cond122 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond18$i = 0, $or$cond20 = 0, $or$cond22$i = 0, $or$cond3$not$i = 0, $or$cond31$i = 0, $or$cond6$i = 0, $p$0 = 0, $p$0$ = 0, $p$1 = 0, $p$2 = 0, $p$2$ = 0, $p$3 = 0, $p$4176 = 0, $p$5 = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0;
 var $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$9$i = 0, $re$171$i = 0, $round$070$i = 0.0, $round6$1$i = 0.0, $s$0 = 0, $s$0$i = 0, $s$1 = 0, $s$1$i = 0, $s$1$i$lcssa = 0, $s$2$lcssa = 0, $s$292 = 0, $s$4 = 0, $s$6 = 0;
 var $s$7 = 0, $s$7$lcssa298 = 0, $s1$0$i = 0, $s7$081$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$072$i = 0, $s9$0$i = 0, $s9$185$i = 0, $s9$2$i = 0, $scevgep182$i = 0, $scevgep182183$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa299 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge851 = 0, $storemerge899 = 0;
 var $sum = 0, $t$0 = 0, $t$1 = 0, $w$$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $w$32$i = 0, $wc = 0, $ws$0106 = 0, $ws$1117 = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$093 = 0, $z$1 = 0, $z$1$lcssa$i = 0, $z$1148$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0;
 var $z$3$lcssa$i = 0, $z$3135$i = 0, $z$4$i = 0, $z$7$$i = 0, $z$7$i = 0, $z$7$i$lcssa = 0, $z$7$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $big$i = sp + 24|0;
 $e2$i = sp + 16|0;
 $buf$i = sp + 588|0;
 $ebuf0$i = sp + 576|0;
 $arg = sp;
 $buf = sp + 536|0;
 $wc = sp + 8|0;
 $mb = sp + 528|0;
 $0 = ($f|0)!=(0|0);
 $1 = ((($buf)) + 40|0);
 $2 = $1;
 $3 = ((($buf)) + 39|0);
 $4 = ((($wc)) + 4|0);
 $5 = $buf$i;
 $6 = (0 - ($5))|0;
 $7 = ((($ebuf0$i)) + 12|0);
 $8 = ((($ebuf0$i)) + 11|0);
 $9 = $7;
 $10 = (($9) - ($5))|0;
 $11 = (-2 - ($5))|0;
 $12 = (($9) + 2)|0;
 $13 = ((($big$i)) + 288|0);
 $14 = ((($buf$i)) + 9|0);
 $15 = $14;
 $16 = ((($buf$i)) + 8|0);
 $cnt$0 = 0;$l$0 = 0;$l10n$0 = 0;$s$0 = $fmt;
 L1: while(1) {
  $17 = ($cnt$0|0)>(-1);
  do {
   if ($17) {
    $18 = (2147483647 - ($cnt$0))|0;
    $19 = ($l$0|0)>($18|0);
    if ($19) {
     $20 = (___errno_location()|0);
     HEAP32[$20>>2] = 75;
     $cnt$1 = -1;
     break;
    } else {
     $21 = (($l$0) + ($cnt$0))|0;
     $cnt$1 = $21;
     break;
    }
   } else {
    $cnt$1 = $cnt$0;
   }
  } while(0);
  $22 = HEAP8[$s$0>>0]|0;
  $23 = ($22<<24>>24)==(0);
  if ($23) {
   $cnt$1$lcssa = $cnt$1;$l10n$0$lcssa = $l10n$0;
   label = 244;
   break;
  } else {
   $24 = $22;$s$1 = $s$0;
  }
  L9: while(1) {
   switch ($24<<24>>24) {
   case 37:  {
    $s$292 = $s$1;$z$093 = $s$1;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $s$2$lcssa = $s$1;$z$0$lcssa = $s$1;
    break L9;
    break;
   }
   default: {
   }
   }
   $25 = ((($s$1)) + 1|0);
   $$pre = HEAP8[$25>>0]|0;
   $24 = $$pre;$s$1 = $25;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $26 = ((($s$292)) + 1|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = ($27<<24>>24)==(37);
     if (!($28)) {
      $s$2$lcssa = $s$292;$z$0$lcssa = $z$093;
      break L12;
     }
     $29 = ((($z$093)) + 1|0);
     $30 = ((($s$292)) + 2|0);
     $31 = HEAP8[$30>>0]|0;
     $32 = ($31<<24>>24)==(37);
     if ($32) {
      $s$292 = $30;$z$093 = $29;
      label = 9;
     } else {
      $s$2$lcssa = $30;$z$0$lcssa = $29;
      break;
     }
    }
   }
  } while(0);
  $33 = $z$0$lcssa;
  $34 = $s$0;
  $35 = (($33) - ($34))|0;
  if ($0) {
   $36 = HEAP32[$f>>2]|0;
   $37 = $36 & 32;
   $38 = ($37|0)==(0);
   if ($38) {
    (___fwritex($s$0,$35,$f)|0);
   }
  }
  $39 = ($z$0$lcssa|0)==($s$0|0);
  if (!($39)) {
   $l10n$0$phi = $l10n$0;$cnt$0 = $cnt$1;$l$0 = $35;$s$0 = $s$2$lcssa;$l10n$0 = $l10n$0$phi;
   continue;
  }
  $40 = ((($s$2$lcssa)) + 1|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 << 24 >> 24;
  $isdigittmp = (($42) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $43 = ((($s$2$lcssa)) + 2|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(36);
   $46 = ((($s$2$lcssa)) + 3|0);
   $$43 = $45 ? $46 : $40;
   $$l10n$0 = $45 ? 1 : $l10n$0;
   $isdigittmp$ = $45 ? $isdigittmp : -1;
   $$pre170 = HEAP8[$$43>>0]|0;
   $48 = $$pre170;$argpos$0 = $isdigittmp$;$l10n$1 = $$l10n$0;$storemerge = $$43;
  } else {
   $48 = $41;$argpos$0 = -1;$l10n$1 = $l10n$0;$storemerge = $40;
  }
  $47 = $48 << 24 >> 24;
  $49 = $47 & -32;
  $50 = ($49|0)==(32);
  L25: do {
   if ($50) {
    $52 = $47;$57 = $48;$fl$0100 = 0;$storemerge899 = $storemerge;
    while(1) {
     $51 = (($52) + -32)|0;
     $53 = 1 << $51;
     $54 = $53 & 75913;
     $55 = ($54|0)==(0);
     if ($55) {
      $66 = $57;$fl$053 = $fl$0100;$storemerge851 = $storemerge899;
      break L25;
     }
     $56 = $57 << 24 >> 24;
     $58 = (($56) + -32)|0;
     $59 = 1 << $58;
     $60 = $59 | $fl$0100;
     $61 = ((($storemerge899)) + 1|0);
     $62 = HEAP8[$61>>0]|0;
     $63 = $62 << 24 >> 24;
     $64 = $63 & -32;
     $65 = ($64|0)==(32);
     if ($65) {
      $52 = $63;$57 = $62;$fl$0100 = $60;$storemerge899 = $61;
     } else {
      $66 = $62;$fl$053 = $60;$storemerge851 = $61;
      break;
     }
    }
   } else {
    $66 = $48;$fl$053 = 0;$storemerge851 = $storemerge;
   }
  } while(0);
  $67 = ($66<<24>>24)==(42);
  do {
   if ($67) {
    $68 = ((($storemerge851)) + 1|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69 << 24 >> 24;
    $isdigittmp11 = (($70) + -48)|0;
    $isdigit12 = ($isdigittmp11>>>0)<(10);
    if ($isdigit12) {
     $71 = ((($storemerge851)) + 2|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = ($72<<24>>24)==(36);
     if ($73) {
      $74 = (($nl_type) + ($isdigittmp11<<2)|0);
      HEAP32[$74>>2] = 10;
      $75 = HEAP8[$68>>0]|0;
      $76 = $75 << 24 >> 24;
      $77 = (($76) + -48)|0;
      $78 = (($nl_arg) + ($77<<3)|0);
      $79 = $78;
      $80 = $79;
      $81 = HEAP32[$80>>2]|0;
      $82 = (($79) + 4)|0;
      $83 = $82;
      $84 = HEAP32[$83>>2]|0;
      $85 = ((($storemerge851)) + 3|0);
      $l10n$2 = 1;$storemerge13 = $85;$w$0 = $81;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $86 = ($l10n$1|0)==(0);
     if (!($86)) {
      $$0 = -1;
      break L1;
     }
     if (!($0)) {
      $fl$1 = $fl$053;$l10n$3 = 0;$s$4 = $68;$w$1 = 0;
      break;
     }
     $arglist_current = HEAP32[$ap>>2]|0;
     $87 = $arglist_current;
     $88 = ((0) + 4|0);
     $expanded4 = $88;
     $expanded = (($expanded4) - 1)|0;
     $89 = (($87) + ($expanded))|0;
     $90 = ((0) + 4|0);
     $expanded8 = $90;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $91 = $89 & $expanded6;
     $92 = $91;
     $93 = HEAP32[$92>>2]|0;
     $arglist_next = ((($92)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     $l10n$2 = 0;$storemerge13 = $68;$w$0 = $93;
    }
    $94 = ($w$0|0)<(0);
    if ($94) {
     $95 = $fl$053 | 8192;
     $96 = (0 - ($w$0))|0;
     $fl$1 = $95;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $96;
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$2;$s$4 = $storemerge13;$w$1 = $w$0;
    }
   } else {
    $97 = $66 << 24 >> 24;
    $isdigittmp1$i = (($97) + -48)|0;
    $isdigit2$i = ($isdigittmp1$i>>>0)<(10);
    if ($isdigit2$i) {
     $101 = $storemerge851;$i$03$i = 0;$isdigittmp4$i = $isdigittmp1$i;
     while(1) {
      $98 = ($i$03$i*10)|0;
      $99 = (($98) + ($isdigittmp4$i))|0;
      $100 = ((($101)) + 1|0);
      $102 = HEAP8[$100>>0]|0;
      $103 = $102 << 24 >> 24;
      $isdigittmp$i = (($103) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $101 = $100;$i$03$i = $99;$isdigittmp4$i = $isdigittmp$i;
      } else {
       $$lcssa = $99;$$lcssa295 = $100;
       break;
      }
     }
     $104 = ($$lcssa|0)<(0);
     if ($104) {
      $$0 = -1;
      break L1;
     } else {
      $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $$lcssa295;$w$1 = $$lcssa;
     }
    } else {
     $fl$1 = $fl$053;$l10n$3 = $l10n$1;$s$4 = $storemerge851;$w$1 = 0;
    }
   }
  } while(0);
  $105 = HEAP8[$s$4>>0]|0;
  $106 = ($105<<24>>24)==(46);
  L46: do {
   if ($106) {
    $107 = ((($s$4)) + 1|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = ($108<<24>>24)==(42);
    if (!($109)) {
     $136 = $108 << 24 >> 24;
     $isdigittmp1$i22 = (($136) + -48)|0;
     $isdigit2$i23 = ($isdigittmp1$i22>>>0)<(10);
     if ($isdigit2$i23) {
      $140 = $107;$i$03$i25 = 0;$isdigittmp4$i24 = $isdigittmp1$i22;
     } else {
      $p$0 = 0;$s$6 = $107;
      break;
     }
     while(1) {
      $137 = ($i$03$i25*10)|0;
      $138 = (($137) + ($isdigittmp4$i24))|0;
      $139 = ((($140)) + 1|0);
      $141 = HEAP8[$139>>0]|0;
      $142 = $141 << 24 >> 24;
      $isdigittmp$i26 = (($142) + -48)|0;
      $isdigit$i27 = ($isdigittmp$i26>>>0)<(10);
      if ($isdigit$i27) {
       $140 = $139;$i$03$i25 = $138;$isdigittmp4$i24 = $isdigittmp$i26;
      } else {
       $p$0 = $138;$s$6 = $139;
       break L46;
      }
     }
    }
    $110 = ((($s$4)) + 2|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111 << 24 >> 24;
    $isdigittmp9 = (($112) + -48)|0;
    $isdigit10 = ($isdigittmp9>>>0)<(10);
    if ($isdigit10) {
     $113 = ((($s$4)) + 3|0);
     $114 = HEAP8[$113>>0]|0;
     $115 = ($114<<24>>24)==(36);
     if ($115) {
      $116 = (($nl_type) + ($isdigittmp9<<2)|0);
      HEAP32[$116>>2] = 10;
      $117 = HEAP8[$110>>0]|0;
      $118 = $117 << 24 >> 24;
      $119 = (($118) + -48)|0;
      $120 = (($nl_arg) + ($119<<3)|0);
      $121 = $120;
      $122 = $121;
      $123 = HEAP32[$122>>2]|0;
      $124 = (($121) + 4)|0;
      $125 = $124;
      $126 = HEAP32[$125>>2]|0;
      $127 = ((($s$4)) + 4|0);
      $p$0 = $123;$s$6 = $127;
      break;
     }
    }
    $128 = ($l10n$3|0)==(0);
    if (!($128)) {
     $$0 = -1;
     break L1;
    }
    if ($0) {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $129 = $arglist_current2;
     $130 = ((0) + 4|0);
     $expanded11 = $130;
     $expanded10 = (($expanded11) - 1)|0;
     $131 = (($129) + ($expanded10))|0;
     $132 = ((0) + 4|0);
     $expanded15 = $132;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $133 = $131 & $expanded13;
     $134 = $133;
     $135 = HEAP32[$134>>2]|0;
     $arglist_next3 = ((($134)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $p$0 = $135;$s$6 = $110;
    } else {
     $p$0 = 0;$s$6 = $110;
    }
   } else {
    $p$0 = -1;$s$6 = $s$4;
   }
  } while(0);
  $s$7 = $s$6;$st$0 = 0;
  while(1) {
   $143 = HEAP8[$s$7>>0]|0;
   $144 = $143 << 24 >> 24;
   $145 = (($144) + -65)|0;
   $146 = ($145>>>0)>(57);
   if ($146) {
    $$0 = -1;
    break L1;
   }
   $147 = ((($s$7)) + 1|0);
   $148 = ((4444 + (($st$0*58)|0)|0) + ($145)|0);
   $149 = HEAP8[$148>>0]|0;
   $150 = $149&255;
   $151 = (($150) + -1)|0;
   $152 = ($151>>>0)<(8);
   if ($152) {
    $s$7 = $147;$st$0 = $150;
   } else {
    $$lcssa300 = $147;$$lcssa301 = $149;$$lcssa302 = $150;$s$7$lcssa298 = $s$7;$st$0$lcssa299 = $st$0;
    break;
   }
  }
  $153 = ($$lcssa301<<24>>24)==(0);
  if ($153) {
   $$0 = -1;
   break;
  }
  $154 = ($$lcssa301<<24>>24)==(19);
  $155 = ($argpos$0|0)>(-1);
  do {
   if ($154) {
    if ($155) {
     $$0 = -1;
     break L1;
    } else {
     label = 52;
    }
   } else {
    if ($155) {
     $156 = (($nl_type) + ($argpos$0<<2)|0);
     HEAP32[$156>>2] = $$lcssa302;
     $157 = (($nl_arg) + ($argpos$0<<3)|0);
     $158 = $157;
     $159 = $158;
     $160 = HEAP32[$159>>2]|0;
     $161 = (($158) + 4)|0;
     $162 = $161;
     $163 = HEAP32[$162>>2]|0;
     $164 = $arg;
     $165 = $164;
     HEAP32[$165>>2] = $160;
     $166 = (($164) + 4)|0;
     $167 = $166;
     HEAP32[$167>>2] = $163;
     label = 52;
     break;
    }
    if (!($0)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($arg,$$lcssa302,$ap);
   }
  } while(0);
  if ((label|0) == 52) {
   label = 0;
   if (!($0)) {
    $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue;
   }
  }
  $168 = HEAP8[$s$7$lcssa298>>0]|0;
  $169 = $168 << 24 >> 24;
  $170 = ($st$0$lcssa299|0)!=(0);
  $171 = $169 & 15;
  $172 = ($171|0)==(3);
  $or$cond15 = $170 & $172;
  $173 = $169 & -33;
  $t$0 = $or$cond15 ? $173 : $169;
  $174 = $fl$1 & 8192;
  $175 = ($174|0)==(0);
  $176 = $fl$1 & -65537;
  $fl$1$ = $175 ? $fl$1 : $176;
  L75: do {
   switch ($t$0|0) {
   case 110:  {
    switch ($st$0$lcssa299|0) {
    case 0:  {
     $183 = HEAP32[$arg>>2]|0;
     HEAP32[$183>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 1:  {
     $184 = HEAP32[$arg>>2]|0;
     HEAP32[$184>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 2:  {
     $185 = ($cnt$1|0)<(0);
     $186 = $185 << 31 >> 31;
     $187 = HEAP32[$arg>>2]|0;
     $188 = $187;
     $189 = $188;
     HEAP32[$189>>2] = $cnt$1;
     $190 = (($188) + 4)|0;
     $191 = $190;
     HEAP32[$191>>2] = $186;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 3:  {
     $192 = $cnt$1&65535;
     $193 = HEAP32[$arg>>2]|0;
     HEAP16[$193>>1] = $192;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 4:  {
     $194 = $cnt$1&255;
     $195 = HEAP32[$arg>>2]|0;
     HEAP8[$195>>0] = $194;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 6:  {
     $196 = HEAP32[$arg>>2]|0;
     HEAP32[$196>>2] = $cnt$1;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    case 7:  {
     $197 = ($cnt$1|0)<(0);
     $198 = $197 << 31 >> 31;
     $199 = HEAP32[$arg>>2]|0;
     $200 = $199;
     $201 = $200;
     HEAP32[$201>>2] = $cnt$1;
     $202 = (($200) + 4)|0;
     $203 = $202;
     HEAP32[$203>>2] = $198;
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
     break;
    }
    default: {
     $cnt$0 = $cnt$1;$l$0 = $35;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $204 = ($p$0>>>0)>(8);
    $205 = $204 ? $p$0 : 8;
    $206 = $fl$1$ | 8;
    $fl$3 = $206;$p$1 = $205;$t$1 = 120;
    label = 64;
    break;
   }
   case 88: case 120:  {
    $fl$3 = $fl$1$;$p$1 = $p$0;$t$1 = $t$0;
    label = 64;
    break;
   }
   case 111:  {
    $244 = $arg;
    $245 = $244;
    $246 = HEAP32[$245>>2]|0;
    $247 = (($244) + 4)|0;
    $248 = $247;
    $249 = HEAP32[$248>>2]|0;
    $250 = ($246|0)==(0);
    $251 = ($249|0)==(0);
    $252 = $250 & $251;
    if ($252) {
     $$0$lcssa$i = $1;
    } else {
     $$03$i33 = $1;$254 = $246;$258 = $249;
     while(1) {
      $253 = $254 & 7;
      $255 = $253 | 48;
      $256 = $255&255;
      $257 = ((($$03$i33)) + -1|0);
      HEAP8[$257>>0] = $256;
      $259 = (_bitshift64Lshr(($254|0),($258|0),3)|0);
      $260 = tempRet0;
      $261 = ($259|0)==(0);
      $262 = ($260|0)==(0);
      $263 = $261 & $262;
      if ($263) {
       $$0$lcssa$i = $257;
       break;
      } else {
       $$03$i33 = $257;$254 = $259;$258 = $260;
      }
     }
    }
    $264 = $fl$1$ & 8;
    $265 = ($264|0)==(0);
    if ($265) {
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = 0;$prefix$1 = 4924;
     label = 77;
    } else {
     $266 = $$0$lcssa$i;
     $267 = (($2) - ($266))|0;
     $268 = ($p$0|0)>($267|0);
     $269 = (($267) + 1)|0;
     $p$0$ = $268 ? $p$0 : $269;
     $a$0 = $$0$lcssa$i;$fl$4 = $fl$1$;$p$2 = $p$0$;$pl$1 = 0;$prefix$1 = 4924;
     label = 77;
    }
    break;
   }
   case 105: case 100:  {
    $270 = $arg;
    $271 = $270;
    $272 = HEAP32[$271>>2]|0;
    $273 = (($270) + 4)|0;
    $274 = $273;
    $275 = HEAP32[$274>>2]|0;
    $276 = ($275|0)<(0);
    if ($276) {
     $277 = (_i64Subtract(0,0,($272|0),($275|0))|0);
     $278 = tempRet0;
     $279 = $arg;
     $280 = $279;
     HEAP32[$280>>2] = $277;
     $281 = (($279) + 4)|0;
     $282 = $281;
     HEAP32[$282>>2] = $278;
     $287 = $277;$288 = $278;$pl$0 = 1;$prefix$0 = 4924;
     label = 76;
     break L75;
    }
    $283 = $fl$1$ & 2048;
    $284 = ($283|0)==(0);
    if ($284) {
     $285 = $fl$1$ & 1;
     $286 = ($285|0)==(0);
     $$ = $286 ? 4924 : (4926);
     $287 = $272;$288 = $275;$pl$0 = $285;$prefix$0 = $$;
     label = 76;
    } else {
     $287 = $272;$288 = $275;$pl$0 = 1;$prefix$0 = (4925);
     label = 76;
    }
    break;
   }
   case 117:  {
    $177 = $arg;
    $178 = $177;
    $179 = HEAP32[$178>>2]|0;
    $180 = (($177) + 4)|0;
    $181 = $180;
    $182 = HEAP32[$181>>2]|0;
    $287 = $179;$288 = $182;$pl$0 = 0;$prefix$0 = 4924;
    label = 76;
    break;
   }
   case 99:  {
    $308 = $arg;
    $309 = $308;
    $310 = HEAP32[$309>>2]|0;
    $311 = (($308) + 4)|0;
    $312 = $311;
    $313 = HEAP32[$312>>2]|0;
    $314 = $310&255;
    HEAP8[$3>>0] = $314;
    $a$2 = $3;$fl$6 = $176;$p$5 = 1;$pl$2 = 0;$prefix$2 = 4924;$z$2 = $1;
    break;
   }
   case 109:  {
    $315 = (___errno_location()|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = (_strerror($316)|0);
    $a$1 = $317;
    label = 82;
    break;
   }
   case 115:  {
    $318 = HEAP32[$arg>>2]|0;
    $319 = ($318|0)!=(0|0);
    $320 = $319 ? $318 : 6826;
    $a$1 = $320;
    label = 82;
    break;
   }
   case 67:  {
    $327 = $arg;
    $328 = $327;
    $329 = HEAP32[$328>>2]|0;
    $330 = (($327) + 4)|0;
    $331 = $330;
    $332 = HEAP32[$331>>2]|0;
    HEAP32[$wc>>2] = $329;
    HEAP32[$4>>2] = 0;
    HEAP32[$arg>>2] = $wc;
    $798 = $wc;$p$4176 = -1;
    label = 86;
    break;
   }
   case 83:  {
    $$pre171 = HEAP32[$arg>>2]|0;
    $333 = ($p$0|0)==(0);
    if ($333) {
     _pad($f,32,$w$1,0,$fl$1$);
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $798 = $$pre171;$p$4176 = $p$0;
     label = 86;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $358 = +HEAPF64[$arg>>3];
    HEAP32[$e2$i>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $358;$359 = HEAP32[tempDoublePtr>>2]|0;
    $360 = HEAP32[tempDoublePtr+4>>2]|0;
    $361 = ($360|0)<(0);
    if ($361) {
     $362 = -$358;
     $$07$i = $362;$pl$0$i = 1;$prefix$0$i = 6833;
    } else {
     $363 = $fl$1$ & 2048;
     $364 = ($363|0)==(0);
     if ($364) {
      $365 = $fl$1$ & 1;
      $366 = ($365|0)==(0);
      $$$i = $366 ? (6834) : (6839);
      $$07$i = $358;$pl$0$i = $365;$prefix$0$i = $$$i;
     } else {
      $$07$i = $358;$pl$0$i = 1;$prefix$0$i = (6836);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$07$i;$367 = HEAP32[tempDoublePtr>>2]|0;
    $368 = HEAP32[tempDoublePtr+4>>2]|0;
    $369 = $368 & 2146435072;
    $370 = ($369>>>0)<(2146435072);
    $371 = (0)<(0);
    $372 = ($369|0)==(2146435072);
    $373 = $372 & $371;
    $374 = $370 | $373;
    do {
     if ($374) {
      $390 = (+_frexpl($$07$i,$e2$i));
      $391 = $390 * 2.0;
      $392 = $391 != 0.0;
      if ($392) {
       $393 = HEAP32[$e2$i>>2]|0;
       $394 = (($393) + -1)|0;
       HEAP32[$e2$i>>2] = $394;
      }
      $395 = $t$0 | 32;
      $396 = ($395|0)==(97);
      if ($396) {
       $397 = $t$0 & 32;
       $398 = ($397|0)==(0);
       $399 = ((($prefix$0$i)) + 9|0);
       $prefix$0$$i = $398 ? $prefix$0$i : $399;
       $400 = $pl$0$i | 2;
       $401 = ($p$0>>>0)>(11);
       $402 = (12 - ($p$0))|0;
       $403 = ($402|0)==(0);
       $404 = $401 | $403;
       do {
        if ($404) {
         $$1$i = $391;
        } else {
         $re$171$i = $402;$round$070$i = 8.0;
         while(1) {
          $405 = (($re$171$i) + -1)|0;
          $406 = $round$070$i * 16.0;
          $407 = ($405|0)==(0);
          if ($407) {
           $$lcssa319 = $406;
           break;
          } else {
           $re$171$i = $405;$round$070$i = $406;
          }
         }
         $408 = HEAP8[$prefix$0$$i>>0]|0;
         $409 = ($408<<24>>24)==(45);
         if ($409) {
          $410 = -$391;
          $411 = $410 - $$lcssa319;
          $412 = $$lcssa319 + $411;
          $413 = -$412;
          $$1$i = $413;
          break;
         } else {
          $414 = $391 + $$lcssa319;
          $415 = $414 - $$lcssa319;
          $$1$i = $415;
          break;
         }
        }
       } while(0);
       $416 = HEAP32[$e2$i>>2]|0;
       $417 = ($416|0)<(0);
       $418 = (0 - ($416))|0;
       $419 = $417 ? $418 : $416;
       $420 = ($419|0)<(0);
       $421 = $420 << 31 >> 31;
       $422 = (_fmt_u($419,$421,$7)|0);
       $423 = ($422|0)==($7|0);
       if ($423) {
        HEAP8[$8>>0] = 48;
        $estr$0$i = $8;
       } else {
        $estr$0$i = $422;
       }
       $424 = $416 >> 31;
       $425 = $424 & 2;
       $426 = (($425) + 43)|0;
       $427 = $426&255;
       $428 = ((($estr$0$i)) + -1|0);
       HEAP8[$428>>0] = $427;
       $429 = (($t$0) + 15)|0;
       $430 = $429&255;
       $431 = ((($estr$0$i)) + -2|0);
       HEAP8[$431>>0] = $430;
       $notrhs$i = ($p$0|0)<(1);
       $432 = $fl$1$ & 8;
       $433 = ($432|0)==(0);
       $$2$i = $$1$i;$s$0$i = $buf$i;
       while(1) {
        $434 = (~~(($$2$i)));
        $435 = (4908 + ($434)|0);
        $436 = HEAP8[$435>>0]|0;
        $437 = $436&255;
        $438 = $437 | $397;
        $439 = $438&255;
        $440 = ((($s$0$i)) + 1|0);
        HEAP8[$s$0$i>>0] = $439;
        $441 = (+($434|0));
        $442 = $$2$i - $441;
        $443 = $442 * 16.0;
        $444 = $440;
        $445 = (($444) - ($5))|0;
        $446 = ($445|0)==(1);
        do {
         if ($446) {
          $notlhs$i = $443 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $433 & $or$cond3$not$i;
          if ($or$cond$i) {
           $s$1$i = $440;
           break;
          }
          $447 = ((($s$0$i)) + 2|0);
          HEAP8[$440>>0] = 46;
          $s$1$i = $447;
         } else {
          $s$1$i = $440;
         }
        } while(0);
        $448 = $443 != 0.0;
        if ($448) {
         $$2$i = $443;$s$0$i = $s$1$i;
        } else {
         $s$1$i$lcssa = $s$1$i;
         break;
        }
       }
       $449 = ($p$0|0)!=(0);
       $$pre188$i = $s$1$i$lcssa;
       $450 = (($11) + ($$pre188$i))|0;
       $451 = ($450|0)<($p$0|0);
       $or$cond122 = $449 & $451;
       $452 = $431;
       $453 = (($12) + ($p$0))|0;
       $454 = (($453) - ($452))|0;
       $455 = (($10) - ($452))|0;
       $456 = (($455) + ($$pre188$i))|0;
       $l$0$i = $or$cond122 ? $454 : $456;
       $457 = (($l$0$i) + ($400))|0;
       _pad($f,32,$w$1,$457,$fl$1$);
       $458 = HEAP32[$f>>2]|0;
       $459 = $458 & 32;
       $460 = ($459|0)==(0);
       if ($460) {
        (___fwritex($prefix$0$$i,$400,$f)|0);
       }
       $461 = $fl$1$ ^ 65536;
       _pad($f,48,$w$1,$457,$461);
       $462 = (($$pre188$i) - ($5))|0;
       $463 = HEAP32[$f>>2]|0;
       $464 = $463 & 32;
       $465 = ($464|0)==(0);
       if ($465) {
        (___fwritex($buf$i,$462,$f)|0);
       }
       $466 = (($9) - ($452))|0;
       $sum = (($462) + ($466))|0;
       $467 = (($l$0$i) - ($sum))|0;
       _pad($f,48,$467,0,0);
       $468 = HEAP32[$f>>2]|0;
       $469 = $468 & 32;
       $470 = ($469|0)==(0);
       if ($470) {
        (___fwritex($431,$466,$f)|0);
       }
       $471 = $fl$1$ ^ 8192;
       _pad($f,32,$w$1,$457,$471);
       $472 = ($457|0)<($w$1|0);
       $w$$i = $472 ? $w$1 : $457;
       $$0$i = $w$$i;
       break;
      }
      $473 = ($p$0|0)<(0);
      $$p$i = $473 ? 6 : $p$0;
      if ($392) {
       $474 = $391 * 268435456.0;
       $475 = HEAP32[$e2$i>>2]|0;
       $476 = (($475) + -28)|0;
       HEAP32[$e2$i>>2] = $476;
       $$3$i = $474;$477 = $476;
      } else {
       $$pre185$i = HEAP32[$e2$i>>2]|0;
       $$3$i = $391;$477 = $$pre185$i;
      }
      $478 = ($477|0)<(0);
      $$33$i = $478 ? $big$i : $13;
      $479 = $$33$i;
      $$4$i = $$3$i;$z$0$i = $$33$i;
      while(1) {
       $480 = (~~(($$4$i))>>>0);
       HEAP32[$z$0$i>>2] = $480;
       $481 = ((($z$0$i)) + 4|0);
       $482 = (+($480>>>0));
       $483 = $$4$i - $482;
       $484 = $483 * 1.0E+9;
       $485 = $484 != 0.0;
       if ($485) {
        $$4$i = $484;$z$0$i = $481;
       } else {
        $$lcssa303 = $481;
        break;
       }
      }
      $$pr$i = HEAP32[$e2$i>>2]|0;
      $486 = ($$pr$i|0)>(0);
      if ($486) {
       $487 = $$pr$i;$a$1149$i = $$33$i;$z$1148$i = $$lcssa303;
       while(1) {
        $488 = ($487|0)>(29);
        $489 = $488 ? 29 : $487;
        $d$0141$i = ((($z$1148$i)) + -4|0);
        $490 = ($d$0141$i>>>0)<($a$1149$i>>>0);
        do {
         if ($490) {
          $a$2$ph$i = $a$1149$i;
         } else {
          $carry$0142$i = 0;$d$0143$i = $d$0141$i;
          while(1) {
           $491 = HEAP32[$d$0143$i>>2]|0;
           $492 = (_bitshift64Shl(($491|0),0,($489|0))|0);
           $493 = tempRet0;
           $494 = (_i64Add(($492|0),($493|0),($carry$0142$i|0),0)|0);
           $495 = tempRet0;
           $496 = (___uremdi3(($494|0),($495|0),1000000000,0)|0);
           $497 = tempRet0;
           HEAP32[$d$0143$i>>2] = $496;
           $498 = (___udivdi3(($494|0),($495|0),1000000000,0)|0);
           $499 = tempRet0;
           $d$0$i = ((($d$0143$i)) + -4|0);
           $500 = ($d$0$i>>>0)<($a$1149$i>>>0);
           if ($500) {
            $$lcssa304 = $498;
            break;
           } else {
            $carry$0142$i = $498;$d$0143$i = $d$0$i;
           }
          }
          $501 = ($$lcssa304|0)==(0);
          if ($501) {
           $a$2$ph$i = $a$1149$i;
           break;
          }
          $502 = ((($a$1149$i)) + -4|0);
          HEAP32[$502>>2] = $$lcssa304;
          $a$2$ph$i = $502;
         }
        } while(0);
        $z$2$i = $z$1148$i;
        while(1) {
         $503 = ($z$2$i>>>0)>($a$2$ph$i>>>0);
         if (!($503)) {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
         $504 = ((($z$2$i)) + -4|0);
         $505 = HEAP32[$504>>2]|0;
         $506 = ($505|0)==(0);
         if ($506) {
          $z$2$i = $504;
         } else {
          $z$2$i$lcssa = $z$2$i;
          break;
         }
        }
        $507 = HEAP32[$e2$i>>2]|0;
        $508 = (($507) - ($489))|0;
        HEAP32[$e2$i>>2] = $508;
        $509 = ($508|0)>(0);
        if ($509) {
         $487 = $508;$a$1149$i = $a$2$ph$i;$z$1148$i = $z$2$i$lcssa;
        } else {
         $$pr50$i = $508;$a$1$lcssa$i = $a$2$ph$i;$z$1$lcssa$i = $z$2$i$lcssa;
         break;
        }
       }
      } else {
       $$pr50$i = $$pr$i;$a$1$lcssa$i = $$33$i;$z$1$lcssa$i = $$lcssa303;
      }
      $510 = ($$pr50$i|0)<(0);
      if ($510) {
       $511 = (($$p$i) + 25)|0;
       $512 = (($511|0) / 9)&-1;
       $513 = (($512) + 1)|0;
       $514 = ($395|0)==(102);
       $516 = $$pr50$i;$a$3136$i = $a$1$lcssa$i;$z$3135$i = $z$1$lcssa$i;
       while(1) {
        $515 = (0 - ($516))|0;
        $517 = ($515|0)>(9);
        $518 = $517 ? 9 : $515;
        $519 = ($a$3136$i>>>0)<($z$3135$i>>>0);
        do {
         if ($519) {
          $523 = 1 << $518;
          $524 = (($523) + -1)|0;
          $525 = 1000000000 >>> $518;
          $carry3$0130$i = 0;$d$1129$i = $a$3136$i;
          while(1) {
           $526 = HEAP32[$d$1129$i>>2]|0;
           $527 = $526 & $524;
           $528 = $526 >>> $518;
           $529 = (($528) + ($carry3$0130$i))|0;
           HEAP32[$d$1129$i>>2] = $529;
           $530 = Math_imul($527, $525)|0;
           $531 = ((($d$1129$i)) + 4|0);
           $532 = ($531>>>0)<($z$3135$i>>>0);
           if ($532) {
            $carry3$0130$i = $530;$d$1129$i = $531;
           } else {
            $$lcssa306 = $530;
            break;
           }
          }
          $533 = HEAP32[$a$3136$i>>2]|0;
          $534 = ($533|0)==(0);
          $535 = ((($a$3136$i)) + 4|0);
          $$a$3$i = $534 ? $535 : $a$3136$i;
          $536 = ($$lcssa306|0)==(0);
          if ($536) {
           $$a$3192$i = $$a$3$i;$z$4$i = $z$3135$i;
           break;
          }
          $537 = ((($z$3135$i)) + 4|0);
          HEAP32[$z$3135$i>>2] = $$lcssa306;
          $$a$3192$i = $$a$3$i;$z$4$i = $537;
         } else {
          $520 = HEAP32[$a$3136$i>>2]|0;
          $521 = ($520|0)==(0);
          $522 = ((($a$3136$i)) + 4|0);
          $$a$3191$i = $521 ? $522 : $a$3136$i;
          $$a$3192$i = $$a$3191$i;$z$4$i = $z$3135$i;
         }
        } while(0);
        $538 = $514 ? $$33$i : $$a$3192$i;
        $539 = $z$4$i;
        $540 = $538;
        $541 = (($539) - ($540))|0;
        $542 = $541 >> 2;
        $543 = ($542|0)>($513|0);
        $544 = (($538) + ($513<<2)|0);
        $$z$4$i = $543 ? $544 : $z$4$i;
        $545 = HEAP32[$e2$i>>2]|0;
        $546 = (($545) + ($518))|0;
        HEAP32[$e2$i>>2] = $546;
        $547 = ($546|0)<(0);
        if ($547) {
         $516 = $546;$a$3136$i = $$a$3192$i;$z$3135$i = $$z$4$i;
        } else {
         $a$3$lcssa$i = $$a$3192$i;$z$3$lcssa$i = $$z$4$i;
         break;
        }
       }
      } else {
       $a$3$lcssa$i = $a$1$lcssa$i;$z$3$lcssa$i = $z$1$lcssa$i;
      }
      $548 = ($a$3$lcssa$i>>>0)<($z$3$lcssa$i>>>0);
      do {
       if ($548) {
        $549 = $a$3$lcssa$i;
        $550 = (($479) - ($549))|0;
        $551 = $550 >> 2;
        $552 = ($551*9)|0;
        $553 = HEAP32[$a$3$lcssa$i>>2]|0;
        $554 = ($553>>>0)<(10);
        if ($554) {
         $e$1$i = $552;
         break;
        } else {
         $e$0125$i = $552;$i$0124$i = 10;
        }
        while(1) {
         $555 = ($i$0124$i*10)|0;
         $556 = (($e$0125$i) + 1)|0;
         $557 = ($553>>>0)<($555>>>0);
         if ($557) {
          $e$1$i = $556;
          break;
         } else {
          $e$0125$i = $556;$i$0124$i = $555;
         }
        }
       } else {
        $e$1$i = 0;
       }
      } while(0);
      $558 = ($395|0)!=(102);
      $559 = $558 ? $e$1$i : 0;
      $560 = (($$p$i) - ($559))|0;
      $561 = ($395|0)==(103);
      $562 = ($$p$i|0)!=(0);
      $563 = $562 & $561;
      $$neg55$i = $563 << 31 >> 31;
      $564 = (($560) + ($$neg55$i))|0;
      $565 = $z$3$lcssa$i;
      $566 = (($565) - ($479))|0;
      $567 = $566 >> 2;
      $568 = ($567*9)|0;
      $569 = (($568) + -9)|0;
      $570 = ($564|0)<($569|0);
      if ($570) {
       $571 = ((($$33$i)) + 4|0);
       $572 = (($564) + 9216)|0;
       $573 = (($572|0) / 9)&-1;
       $574 = (($573) + -1024)|0;
       $575 = (($571) + ($574<<2)|0);
       $576 = (($572|0) % 9)&-1;
       $j$0117$i = (($576) + 1)|0;
       $577 = ($j$0117$i|0)<(9);
       if ($577) {
        $i$1118$i = 10;$j$0119$i = $j$0117$i;
        while(1) {
         $578 = ($i$1118$i*10)|0;
         $j$0$i = (($j$0119$i) + 1)|0;
         $exitcond$i = ($j$0$i|0)==(9);
         if ($exitcond$i) {
          $i$1$lcssa$i = $578;
          break;
         } else {
          $i$1118$i = $578;$j$0119$i = $j$0$i;
         }
        }
       } else {
        $i$1$lcssa$i = 10;
       }
       $579 = HEAP32[$575>>2]|0;
       $580 = (($579>>>0) % ($i$1$lcssa$i>>>0))&-1;
       $581 = ($580|0)==(0);
       $582 = ((($575)) + 4|0);
       $583 = ($582|0)==($z$3$lcssa$i|0);
       $or$cond18$i = $583 & $581;
       do {
        if ($or$cond18$i) {
         $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
        } else {
         $584 = (($579>>>0) / ($i$1$lcssa$i>>>0))&-1;
         $585 = $584 & 1;
         $586 = ($585|0)==(0);
         $$20$i = $586 ? 9007199254740992.0 : 9007199254740994.0;
         $587 = (($i$1$lcssa$i|0) / 2)&-1;
         $588 = ($580>>>0)<($587>>>0);
         if ($588) {
          $small$0$i = 0.5;
         } else {
          $589 = ($580|0)==($587|0);
          $or$cond22$i = $583 & $589;
          $$36$i = $or$cond22$i ? 1.0 : 1.5;
          $small$0$i = $$36$i;
         }
         $590 = ($pl$0$i|0)==(0);
         do {
          if ($590) {
           $round6$1$i = $$20$i;$small$1$i = $small$0$i;
          } else {
           $591 = HEAP8[$prefix$0$i>>0]|0;
           $592 = ($591<<24>>24)==(45);
           if (!($592)) {
            $round6$1$i = $$20$i;$small$1$i = $small$0$i;
            break;
           }
           $593 = -$$20$i;
           $594 = -$small$0$i;
           $round6$1$i = $593;$small$1$i = $594;
          }
         } while(0);
         $595 = (($579) - ($580))|0;
         HEAP32[$575>>2] = $595;
         $596 = $round6$1$i + $small$1$i;
         $597 = $596 != $round6$1$i;
         if (!($597)) {
          $a$8$i = $a$3$lcssa$i;$d$4$i = $575;$e$4$i = $e$1$i;
          break;
         }
         $598 = (($595) + ($i$1$lcssa$i))|0;
         HEAP32[$575>>2] = $598;
         $599 = ($598>>>0)>(999999999);
         if ($599) {
          $a$5111$i = $a$3$lcssa$i;$d$2110$i = $575;
          while(1) {
           $600 = ((($d$2110$i)) + -4|0);
           HEAP32[$d$2110$i>>2] = 0;
           $601 = ($600>>>0)<($a$5111$i>>>0);
           if ($601) {
            $602 = ((($a$5111$i)) + -4|0);
            HEAP32[$602>>2] = 0;
            $a$6$i = $602;
           } else {
            $a$6$i = $a$5111$i;
           }
           $603 = HEAP32[$600>>2]|0;
           $604 = (($603) + 1)|0;
           HEAP32[$600>>2] = $604;
           $605 = ($604>>>0)>(999999999);
           if ($605) {
            $a$5111$i = $a$6$i;$d$2110$i = $600;
           } else {
            $a$5$lcssa$i = $a$6$i;$d$2$lcssa$i = $600;
            break;
           }
          }
         } else {
          $a$5$lcssa$i = $a$3$lcssa$i;$d$2$lcssa$i = $575;
         }
         $606 = $a$5$lcssa$i;
         $607 = (($479) - ($606))|0;
         $608 = $607 >> 2;
         $609 = ($608*9)|0;
         $610 = HEAP32[$a$5$lcssa$i>>2]|0;
         $611 = ($610>>>0)<(10);
         if ($611) {
          $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $609;
          break;
         } else {
          $e$2106$i = $609;$i$2105$i = 10;
         }
         while(1) {
          $612 = ($i$2105$i*10)|0;
          $613 = (($e$2106$i) + 1)|0;
          $614 = ($610>>>0)<($612>>>0);
          if ($614) {
           $a$8$i = $a$5$lcssa$i;$d$4$i = $d$2$lcssa$i;$e$4$i = $613;
           break;
          } else {
           $e$2106$i = $613;$i$2105$i = $612;
          }
         }
        }
       } while(0);
       $615 = ((($d$4$i)) + 4|0);
       $616 = ($z$3$lcssa$i>>>0)>($615>>>0);
       $$z$3$i = $616 ? $615 : $z$3$lcssa$i;
       $a$9$ph$i = $a$8$i;$e$5$ph$i = $e$4$i;$z$7$ph$i = $$z$3$i;
      } else {
       $a$9$ph$i = $a$3$lcssa$i;$e$5$ph$i = $e$1$i;$z$7$ph$i = $z$3$lcssa$i;
      }
      $617 = (0 - ($e$5$ph$i))|0;
      $z$7$i = $z$7$ph$i;
      while(1) {
       $618 = ($z$7$i>>>0)>($a$9$ph$i>>>0);
       if (!($618)) {
        $$lcssa162$i = 0;$z$7$i$lcssa = $z$7$i;
        break;
       }
       $619 = ((($z$7$i)) + -4|0);
       $620 = HEAP32[$619>>2]|0;
       $621 = ($620|0)==(0);
       if ($621) {
        $z$7$i = $619;
       } else {
        $$lcssa162$i = 1;$z$7$i$lcssa = $z$7$i;
        break;
       }
      }
      do {
       if ($561) {
        $622 = $562&1;
        $623 = $622 ^ 1;
        $$p$$i = (($623) + ($$p$i))|0;
        $624 = ($$p$$i|0)>($e$5$ph$i|0);
        $625 = ($e$5$ph$i|0)>(-5);
        $or$cond6$i = $624 & $625;
        if ($or$cond6$i) {
         $626 = (($t$0) + -1)|0;
         $$neg56$i = (($$p$$i) + -1)|0;
         $627 = (($$neg56$i) - ($e$5$ph$i))|0;
         $$013$i = $626;$$210$i = $627;
        } else {
         $628 = (($t$0) + -2)|0;
         $629 = (($$p$$i) + -1)|0;
         $$013$i = $628;$$210$i = $629;
        }
        $630 = $fl$1$ & 8;
        $631 = ($630|0)==(0);
        if (!($631)) {
         $$114$i = $$013$i;$$311$i = $$210$i;$$pre$phi190$iZ2D = $630;
         break;
        }
        do {
         if ($$lcssa162$i) {
          $632 = ((($z$7$i$lcssa)) + -4|0);
          $633 = HEAP32[$632>>2]|0;
          $634 = ($633|0)==(0);
          if ($634) {
           $j$2$i = 9;
           break;
          }
          $635 = (($633>>>0) % 10)&-1;
          $636 = ($635|0)==(0);
          if ($636) {
           $i$3101$i = 10;$j$1102$i = 0;
          } else {
           $j$2$i = 0;
           break;
          }
          while(1) {
           $637 = ($i$3101$i*10)|0;
           $638 = (($j$1102$i) + 1)|0;
           $639 = (($633>>>0) % ($637>>>0))&-1;
           $640 = ($639|0)==(0);
           if ($640) {
            $i$3101$i = $637;$j$1102$i = $638;
           } else {
            $j$2$i = $638;
            break;
           }
          }
         } else {
          $j$2$i = 9;
         }
        } while(0);
        $641 = $$013$i | 32;
        $642 = ($641|0)==(102);
        $643 = $z$7$i$lcssa;
        $644 = (($643) - ($479))|0;
        $645 = $644 >> 2;
        $646 = ($645*9)|0;
        $647 = (($646) + -9)|0;
        if ($642) {
         $648 = (($647) - ($j$2$i))|0;
         $649 = ($648|0)<(0);
         $$23$i = $649 ? 0 : $648;
         $650 = ($$210$i|0)<($$23$i|0);
         $$210$$24$i = $650 ? $$210$i : $$23$i;
         $$114$i = $$013$i;$$311$i = $$210$$24$i;$$pre$phi190$iZ2D = 0;
         break;
        } else {
         $651 = (($647) + ($e$5$ph$i))|0;
         $652 = (($651) - ($j$2$i))|0;
         $653 = ($652|0)<(0);
         $$25$i = $653 ? 0 : $652;
         $654 = ($$210$i|0)<($$25$i|0);
         $$210$$26$i = $654 ? $$210$i : $$25$i;
         $$114$i = $$013$i;$$311$i = $$210$$26$i;$$pre$phi190$iZ2D = 0;
         break;
        }
       } else {
        $$pre189$i = $fl$1$ & 8;
        $$114$i = $t$0;$$311$i = $$p$i;$$pre$phi190$iZ2D = $$pre189$i;
       }
      } while(0);
      $655 = $$311$i | $$pre$phi190$iZ2D;
      $656 = ($655|0)!=(0);
      $657 = $656&1;
      $658 = $$114$i | 32;
      $659 = ($658|0)==(102);
      if ($659) {
       $660 = ($e$5$ph$i|0)>(0);
       $661 = $660 ? $e$5$ph$i : 0;
       $$pn$i = $661;$estr$2$i = 0;
      } else {
       $662 = ($e$5$ph$i|0)<(0);
       $663 = $662 ? $617 : $e$5$ph$i;
       $664 = ($663|0)<(0);
       $665 = $664 << 31 >> 31;
       $666 = (_fmt_u($663,$665,$7)|0);
       $667 = $666;
       $668 = (($9) - ($667))|0;
       $669 = ($668|0)<(2);
       if ($669) {
        $estr$195$i = $666;
        while(1) {
         $670 = ((($estr$195$i)) + -1|0);
         HEAP8[$670>>0] = 48;
         $671 = $670;
         $672 = (($9) - ($671))|0;
         $673 = ($672|0)<(2);
         if ($673) {
          $estr$195$i = $670;
         } else {
          $estr$1$lcssa$i = $670;
          break;
         }
        }
       } else {
        $estr$1$lcssa$i = $666;
       }
       $674 = $e$5$ph$i >> 31;
       $675 = $674 & 2;
       $676 = (($675) + 43)|0;
       $677 = $676&255;
       $678 = ((($estr$1$lcssa$i)) + -1|0);
       HEAP8[$678>>0] = $677;
       $679 = $$114$i&255;
       $680 = ((($estr$1$lcssa$i)) + -2|0);
       HEAP8[$680>>0] = $679;
       $681 = $680;
       $682 = (($9) - ($681))|0;
       $$pn$i = $682;$estr$2$i = $680;
      }
      $683 = (($pl$0$i) + 1)|0;
      $684 = (($683) + ($$311$i))|0;
      $l$1$i = (($684) + ($657))|0;
      $685 = (($l$1$i) + ($$pn$i))|0;
      _pad($f,32,$w$1,$685,$fl$1$);
      $686 = HEAP32[$f>>2]|0;
      $687 = $686 & 32;
      $688 = ($687|0)==(0);
      if ($688) {
       (___fwritex($prefix$0$i,$pl$0$i,$f)|0);
      }
      $689 = $fl$1$ ^ 65536;
      _pad($f,48,$w$1,$685,$689);
      do {
       if ($659) {
        $690 = ($a$9$ph$i>>>0)>($$33$i>>>0);
        $r$0$a$9$i = $690 ? $$33$i : $a$9$ph$i;
        $d$584$i = $r$0$a$9$i;
        while(1) {
         $691 = HEAP32[$d$584$i>>2]|0;
         $692 = (_fmt_u($691,0,$14)|0);
         $693 = ($d$584$i|0)==($r$0$a$9$i|0);
         do {
          if ($693) {
           $699 = ($692|0)==($14|0);
           if (!($699)) {
            $s7$1$i = $692;
            break;
           }
           HEAP8[$16>>0] = 48;
           $s7$1$i = $16;
          } else {
           $694 = ($692>>>0)>($buf$i>>>0);
           if (!($694)) {
            $s7$1$i = $692;
            break;
           }
           $695 = $692;
           $696 = (($695) - ($5))|0;
           _memset(($buf$i|0),48,($696|0))|0;
           $s7$081$i = $692;
           while(1) {
            $697 = ((($s7$081$i)) + -1|0);
            $698 = ($697>>>0)>($buf$i>>>0);
            if ($698) {
             $s7$081$i = $697;
            } else {
             $s7$1$i = $697;
             break;
            }
           }
          }
         } while(0);
         $700 = HEAP32[$f>>2]|0;
         $701 = $700 & 32;
         $702 = ($701|0)==(0);
         if ($702) {
          $703 = $s7$1$i;
          $704 = (($15) - ($703))|0;
          (___fwritex($s7$1$i,$704,$f)|0);
         }
         $705 = ((($d$584$i)) + 4|0);
         $706 = ($705>>>0)>($$33$i>>>0);
         if ($706) {
          $$lcssa316 = $705;
          break;
         } else {
          $d$584$i = $705;
         }
        }
        $707 = ($655|0)==(0);
        do {
         if (!($707)) {
          $708 = HEAP32[$f>>2]|0;
          $709 = $708 & 32;
          $710 = ($709|0)==(0);
          if (!($710)) {
           break;
          }
          (___fwritex(6868,1,$f)|0);
         }
        } while(0);
        $711 = ($$lcssa316>>>0)<($z$7$i$lcssa>>>0);
        $712 = ($$311$i|0)>(0);
        $713 = $712 & $711;
        if ($713) {
         $$41278$i = $$311$i;$d$677$i = $$lcssa316;
         while(1) {
          $714 = HEAP32[$d$677$i>>2]|0;
          $715 = (_fmt_u($714,0,$14)|0);
          $716 = ($715>>>0)>($buf$i>>>0);
          if ($716) {
           $717 = $715;
           $718 = (($717) - ($5))|0;
           _memset(($buf$i|0),48,($718|0))|0;
           $s8$072$i = $715;
           while(1) {
            $719 = ((($s8$072$i)) + -1|0);
            $720 = ($719>>>0)>($buf$i>>>0);
            if ($720) {
             $s8$072$i = $719;
            } else {
             $s8$0$lcssa$i = $719;
             break;
            }
           }
          } else {
           $s8$0$lcssa$i = $715;
          }
          $721 = HEAP32[$f>>2]|0;
          $722 = $721 & 32;
          $723 = ($722|0)==(0);
          if ($723) {
           $724 = ($$41278$i|0)>(9);
           $725 = $724 ? 9 : $$41278$i;
           (___fwritex($s8$0$lcssa$i,$725,$f)|0);
          }
          $726 = ((($d$677$i)) + 4|0);
          $727 = (($$41278$i) + -9)|0;
          $728 = ($726>>>0)<($z$7$i$lcssa>>>0);
          $729 = ($$41278$i|0)>(9);
          $730 = $729 & $728;
          if ($730) {
           $$41278$i = $727;$d$677$i = $726;
          } else {
           $$412$lcssa$i = $727;
           break;
          }
         }
        } else {
         $$412$lcssa$i = $$311$i;
        }
        $731 = (($$412$lcssa$i) + 9)|0;
        _pad($f,48,$731,9,0);
       } else {
        $732 = ((($a$9$ph$i)) + 4|0);
        $z$7$$i = $$lcssa162$i ? $z$7$i$lcssa : $732;
        $733 = ($$311$i|0)>(-1);
        if ($733) {
         $734 = ($$pre$phi190$iZ2D|0)==(0);
         $$589$i = $$311$i;$d$788$i = $a$9$ph$i;
         while(1) {
          $735 = HEAP32[$d$788$i>>2]|0;
          $736 = (_fmt_u($735,0,$14)|0);
          $737 = ($736|0)==($14|0);
          if ($737) {
           HEAP8[$16>>0] = 48;
           $s9$0$i = $16;
          } else {
           $s9$0$i = $736;
          }
          $738 = ($d$788$i|0)==($a$9$ph$i|0);
          do {
           if ($738) {
            $742 = ((($s9$0$i)) + 1|0);
            $743 = HEAP32[$f>>2]|0;
            $744 = $743 & 32;
            $745 = ($744|0)==(0);
            if ($745) {
             (___fwritex($s9$0$i,1,$f)|0);
            }
            $746 = ($$589$i|0)<(1);
            $or$cond31$i = $734 & $746;
            if ($or$cond31$i) {
             $s9$2$i = $742;
             break;
            }
            $747 = HEAP32[$f>>2]|0;
            $748 = $747 & 32;
            $749 = ($748|0)==(0);
            if (!($749)) {
             $s9$2$i = $742;
             break;
            }
            (___fwritex(6868,1,$f)|0);
            $s9$2$i = $742;
           } else {
            $739 = ($s9$0$i>>>0)>($buf$i>>>0);
            if (!($739)) {
             $s9$2$i = $s9$0$i;
             break;
            }
            $scevgep182$i = (($s9$0$i) + ($6)|0);
            $scevgep182183$i = $scevgep182$i;
            _memset(($buf$i|0),48,($scevgep182183$i|0))|0;
            $s9$185$i = $s9$0$i;
            while(1) {
             $740 = ((($s9$185$i)) + -1|0);
             $741 = ($740>>>0)>($buf$i>>>0);
             if ($741) {
              $s9$185$i = $740;
             } else {
              $s9$2$i = $740;
              break;
             }
            }
           }
          } while(0);
          $750 = $s9$2$i;
          $751 = (($15) - ($750))|0;
          $752 = HEAP32[$f>>2]|0;
          $753 = $752 & 32;
          $754 = ($753|0)==(0);
          if ($754) {
           $755 = ($$589$i|0)>($751|0);
           $756 = $755 ? $751 : $$589$i;
           (___fwritex($s9$2$i,$756,$f)|0);
          }
          $757 = (($$589$i) - ($751))|0;
          $758 = ((($d$788$i)) + 4|0);
          $759 = ($758>>>0)<($z$7$$i>>>0);
          $760 = ($757|0)>(-1);
          $761 = $759 & $760;
          if ($761) {
           $$589$i = $757;$d$788$i = $758;
          } else {
           $$5$lcssa$i = $757;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$311$i;
        }
        $762 = (($$5$lcssa$i) + 18)|0;
        _pad($f,48,$762,18,0);
        $763 = HEAP32[$f>>2]|0;
        $764 = $763 & 32;
        $765 = ($764|0)==(0);
        if (!($765)) {
         break;
        }
        $766 = $estr$2$i;
        $767 = (($9) - ($766))|0;
        (___fwritex($estr$2$i,$767,$f)|0);
       }
      } while(0);
      $768 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$685,$768);
      $769 = ($685|0)<($w$1|0);
      $w$32$i = $769 ? $w$1 : $685;
      $$0$i = $w$32$i;
     } else {
      $375 = $t$0 & 32;
      $376 = ($375|0)!=(0);
      $377 = $376 ? 6852 : 6856;
      $378 = ($$07$i != $$07$i) | (0.0 != 0.0);
      $379 = $376 ? 6860 : 6864;
      $pl$1$i = $378 ? 0 : $pl$0$i;
      $s1$0$i = $378 ? $379 : $377;
      $380 = (($pl$1$i) + 3)|0;
      _pad($f,32,$w$1,$380,$176);
      $381 = HEAP32[$f>>2]|0;
      $382 = $381 & 32;
      $383 = ($382|0)==(0);
      if ($383) {
       (___fwritex($prefix$0$i,$pl$1$i,$f)|0);
       $$pre$i = HEAP32[$f>>2]|0;
       $385 = $$pre$i;
      } else {
       $385 = $381;
      }
      $384 = $385 & 32;
      $386 = ($384|0)==(0);
      if ($386) {
       (___fwritex($s1$0$i,3,$f)|0);
      }
      $387 = $fl$1$ ^ 8192;
      _pad($f,32,$w$1,$380,$387);
      $388 = ($380|0)<($w$1|0);
      $389 = $388 ? $w$1 : $380;
      $$0$i = $389;
     }
    } while(0);
    $cnt$0 = $cnt$1;$l$0 = $$0$i;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
    continue L1;
    break;
   }
   default: {
    $a$2 = $s$0;$fl$6 = $fl$1$;$p$5 = $p$0;$pl$2 = 0;$prefix$2 = 4924;$z$2 = $1;
   }
   }
  } while(0);
  L311: do {
   if ((label|0) == 64) {
    label = 0;
    $207 = $arg;
    $208 = $207;
    $209 = HEAP32[$208>>2]|0;
    $210 = (($207) + 4)|0;
    $211 = $210;
    $212 = HEAP32[$211>>2]|0;
    $213 = $t$1 & 32;
    $214 = ($209|0)==(0);
    $215 = ($212|0)==(0);
    $216 = $214 & $215;
    if ($216) {
     $a$0 = $1;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4924;
     label = 77;
    } else {
     $$012$i = $1;$218 = $209;$225 = $212;
     while(1) {
      $217 = $218 & 15;
      $219 = (4908 + ($217)|0);
      $220 = HEAP8[$219>>0]|0;
      $221 = $220&255;
      $222 = $221 | $213;
      $223 = $222&255;
      $224 = ((($$012$i)) + -1|0);
      HEAP8[$224>>0] = $223;
      $226 = (_bitshift64Lshr(($218|0),($225|0),4)|0);
      $227 = tempRet0;
      $228 = ($226|0)==(0);
      $229 = ($227|0)==(0);
      $230 = $228 & $229;
      if ($230) {
       $$lcssa321 = $224;
       break;
      } else {
       $$012$i = $224;$218 = $226;$225 = $227;
      }
     }
     $231 = $arg;
     $232 = $231;
     $233 = HEAP32[$232>>2]|0;
     $234 = (($231) + 4)|0;
     $235 = $234;
     $236 = HEAP32[$235>>2]|0;
     $237 = ($233|0)==(0);
     $238 = ($236|0)==(0);
     $239 = $237 & $238;
     $240 = $fl$3 & 8;
     $241 = ($240|0)==(0);
     $or$cond17 = $241 | $239;
     if ($or$cond17) {
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 0;$prefix$1 = 4924;
      label = 77;
     } else {
      $242 = $t$1 >> 4;
      $243 = (4924 + ($242)|0);
      $a$0 = $$lcssa321;$fl$4 = $fl$3;$p$2 = $p$1;$pl$1 = 2;$prefix$1 = $243;
      label = 77;
     }
    }
   }
   else if ((label|0) == 76) {
    label = 0;
    $289 = (_fmt_u($287,$288,$1)|0);
    $a$0 = $289;$fl$4 = $fl$1$;$p$2 = $p$0;$pl$1 = $pl$0;$prefix$1 = $prefix$0;
    label = 77;
   }
   else if ((label|0) == 82) {
    label = 0;
    $321 = (_memchr($a$1,0,$p$0)|0);
    $322 = ($321|0)==(0|0);
    $323 = $321;
    $324 = $a$1;
    $325 = (($323) - ($324))|0;
    $326 = (($a$1) + ($p$0)|0);
    $z$1 = $322 ? $326 : $321;
    $p$3 = $322 ? $p$0 : $325;
    $a$2 = $a$1;$fl$6 = $176;$p$5 = $p$3;$pl$2 = 0;$prefix$2 = 4924;$z$2 = $z$1;
   }
   else if ((label|0) == 86) {
    label = 0;
    $i$0105 = 0;$l$1104 = 0;$ws$0106 = $798;
    while(1) {
     $334 = HEAP32[$ws$0106>>2]|0;
     $335 = ($334|0)==(0);
     if ($335) {
      $i$0$lcssa = $i$0105;$l$2 = $l$1104;
      break;
     }
     $336 = (_wctomb($mb,$334)|0);
     $337 = ($336|0)<(0);
     $338 = (($p$4176) - ($i$0105))|0;
     $339 = ($336>>>0)>($338>>>0);
     $or$cond20 = $337 | $339;
     if ($or$cond20) {
      $i$0$lcssa = $i$0105;$l$2 = $336;
      break;
     }
     $340 = ((($ws$0106)) + 4|0);
     $341 = (($336) + ($i$0105))|0;
     $342 = ($p$4176>>>0)>($341>>>0);
     if ($342) {
      $i$0105 = $341;$l$1104 = $336;$ws$0106 = $340;
     } else {
      $i$0$lcssa = $341;$l$2 = $336;
      break;
     }
    }
    $343 = ($l$2|0)<(0);
    if ($343) {
     $$0 = -1;
     break L1;
    }
    _pad($f,32,$w$1,$i$0$lcssa,$fl$1$);
    $344 = ($i$0$lcssa|0)==(0);
    if ($344) {
     $i$0$lcssa178 = 0;
     label = 97;
    } else {
     $i$1116 = 0;$ws$1117 = $798;
     while(1) {
      $345 = HEAP32[$ws$1117>>2]|0;
      $346 = ($345|0)==(0);
      if ($346) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $347 = ((($ws$1117)) + 4|0);
      $348 = (_wctomb($mb,$345)|0);
      $349 = (($348) + ($i$1116))|0;
      $350 = ($349|0)>($i$0$lcssa|0);
      if ($350) {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break L311;
      }
      $351 = HEAP32[$f>>2]|0;
      $352 = $351 & 32;
      $353 = ($352|0)==(0);
      if ($353) {
       (___fwritex($mb,$348,$f)|0);
      }
      $354 = ($349>>>0)<($i$0$lcssa>>>0);
      if ($354) {
       $i$1116 = $349;$ws$1117 = $347;
      } else {
       $i$0$lcssa178 = $i$0$lcssa;
       label = 97;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 97) {
   label = 0;
   $355 = $fl$1$ ^ 8192;
   _pad($f,32,$w$1,$i$0$lcssa178,$355);
   $356 = ($w$1|0)>($i$0$lcssa178|0);
   $357 = $356 ? $w$1 : $i$0$lcssa178;
   $cnt$0 = $cnt$1;$l$0 = $357;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
   continue;
  }
  if ((label|0) == 77) {
   label = 0;
   $290 = ($p$2|0)>(-1);
   $291 = $fl$4 & -65537;
   $$fl$4 = $290 ? $291 : $fl$4;
   $292 = $arg;
   $293 = $292;
   $294 = HEAP32[$293>>2]|0;
   $295 = (($292) + 4)|0;
   $296 = $295;
   $297 = HEAP32[$296>>2]|0;
   $298 = ($294|0)!=(0);
   $299 = ($297|0)!=(0);
   $300 = $298 | $299;
   $301 = ($p$2|0)!=(0);
   $or$cond = $301 | $300;
   if ($or$cond) {
    $302 = $a$0;
    $303 = (($2) - ($302))|0;
    $304 = $300&1;
    $305 = $304 ^ 1;
    $306 = (($305) + ($303))|0;
    $307 = ($p$2|0)>($306|0);
    $p$2$ = $307 ? $p$2 : $306;
    $a$2 = $a$0;$fl$6 = $$fl$4;$p$5 = $p$2$;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   } else {
    $a$2 = $1;$fl$6 = $$fl$4;$p$5 = 0;$pl$2 = $pl$1;$prefix$2 = $prefix$1;$z$2 = $1;
   }
  }
  $770 = $z$2;
  $771 = $a$2;
  $772 = (($770) - ($771))|0;
  $773 = ($p$5|0)<($772|0);
  $$p$5 = $773 ? $772 : $p$5;
  $774 = (($pl$2) + ($$p$5))|0;
  $775 = ($w$1|0)<($774|0);
  $w$2 = $775 ? $774 : $w$1;
  _pad($f,32,$w$2,$774,$fl$6);
  $776 = HEAP32[$f>>2]|0;
  $777 = $776 & 32;
  $778 = ($777|0)==(0);
  if ($778) {
   (___fwritex($prefix$2,$pl$2,$f)|0);
  }
  $779 = $fl$6 ^ 65536;
  _pad($f,48,$w$2,$774,$779);
  _pad($f,48,$$p$5,$772,0);
  $780 = HEAP32[$f>>2]|0;
  $781 = $780 & 32;
  $782 = ($781|0)==(0);
  if ($782) {
   (___fwritex($a$2,$772,$f)|0);
  }
  $783 = $fl$6 ^ 8192;
  _pad($f,32,$w$2,$774,$783);
  $cnt$0 = $cnt$1;$l$0 = $w$2;$l10n$0 = $l10n$3;$s$0 = $$lcssa300;
 }
 L345: do {
  if ((label|0) == 244) {
   $784 = ($f|0)==(0|0);
   if ($784) {
    $785 = ($l10n$0$lcssa|0)==(0);
    if ($785) {
     $$0 = 0;
    } else {
     $i$291 = 1;
     while(1) {
      $786 = (($nl_type) + ($i$291<<2)|0);
      $787 = HEAP32[$786>>2]|0;
      $788 = ($787|0)==(0);
      if ($788) {
       $i$291$lcssa = $i$291;
       break;
      }
      $790 = (($nl_arg) + ($i$291<<3)|0);
      _pop_arg($790,$787,$ap);
      $791 = (($i$291) + 1)|0;
      $792 = ($791|0)<(10);
      if ($792) {
       $i$291 = $791;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     $789 = ($i$291$lcssa|0)<(10);
     if ($789) {
      $i$389 = $i$291$lcssa;
      while(1) {
       $795 = (($nl_type) + ($i$389<<2)|0);
       $796 = HEAP32[$795>>2]|0;
       $797 = ($796|0)==(0);
       $793 = (($i$389) + 1)|0;
       if (!($797)) {
        $$0 = -1;
        break L345;
       }
       $794 = ($793|0)<(10);
       if ($794) {
        $i$389 = $793;
       } else {
        $$0 = 1;
        break;
       }
      }
     } else {
      $$0 = 1;
     }
    }
   } else {
    $$0 = $cnt$1$lcssa;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___fwritex($s,$l,$f) {
 $s = $s|0;
 $l = $l|0;
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $$pre = 0, $$pre6 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$0 = 0, $i$0$lcssa12 = 0;
 var $i$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$0>>2]|0;
   $9 = $$pre;
   label = 5;
  } else {
   $$0 = 0;
  }
 } else {
  $3 = $1;
  $9 = $3;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = (($9) - ($7))|0;
   $10 = ($8>>>0)<($l>>>0);
   $11 = $7;
   if ($10) {
    $12 = ((($f)) + 36|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (FUNCTION_TABLE_iiii[$13 & 127]($f,$s,$l)|0);
    $$0 = $14;
    break;
   }
   $15 = ((($f)) + 75|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = ($16<<24>>24)>(-1);
   L10: do {
    if ($17) {
     $i$0 = $l;
     while(1) {
      $18 = ($i$0|0)==(0);
      if ($18) {
       $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
       break L10;
      }
      $19 = (($i$0) + -1)|0;
      $20 = (($s) + ($19)|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(10);
      if ($22) {
       $i$0$lcssa12 = $i$0;
       break;
      } else {
       $i$0 = $19;
      }
     }
     $23 = ((($f)) + 36|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (FUNCTION_TABLE_iiii[$24 & 127]($f,$s,$i$0$lcssa12)|0);
     $26 = ($25>>>0)<($i$0$lcssa12>>>0);
     if ($26) {
      $$0 = $i$0$lcssa12;
      break L5;
     }
     $27 = (($s) + ($i$0$lcssa12)|0);
     $28 = (($l) - ($i$0$lcssa12))|0;
     $$pre6 = HEAP32[$6>>2]|0;
     $$01 = $28;$$02 = $27;$29 = $$pre6;$i$1 = $i$0$lcssa12;
    } else {
     $$01 = $l;$$02 = $s;$29 = $11;$i$1 = 0;
    }
   } while(0);
   _memcpy(($29|0),($$02|0),($$01|0))|0;
   $30 = HEAP32[$6>>2]|0;
   $31 = (($30) + ($$01)|0);
   HEAP32[$6>>2] = $31;
   $32 = (($i$1) + ($$01))|0;
   $$0 = $32;
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 74|0);
 $1 = HEAP8[$0>>0]|0;
 $2 = $1 << 24 >> 24;
 $3 = (($2) + 255)|0;
 $4 = $3 | $2;
 $5 = $4&255;
 HEAP8[$0>>0] = $5;
 $6 = HEAP32[$f>>2]|0;
 $7 = $6 & 8;
 $8 = ($7|0)==(0);
 if ($8) {
  $10 = ((($f)) + 8|0);
  HEAP32[$10>>2] = 0;
  $11 = ((($f)) + 4|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($f)) + 44|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($f)) + 28|0);
  HEAP32[$14>>2] = $13;
  $15 = ((($f)) + 20|0);
  HEAP32[$15>>2] = $13;
  $16 = $13;
  $17 = ((($f)) + 48|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($16) + ($18)|0);
  $20 = ((($f)) + 16|0);
  HEAP32[$20>>2] = $19;
  $$0 = 0;
 } else {
  $9 = $6 | 32;
  HEAP32[$f>>2] = $9;
  $$0 = -1;
 }
 return ($$0|0);
}
function _pop_arg($arg,$type,$ap) {
 $arg = $arg|0;
 $type = $type|0;
 $ap = $ap|0;
 var $$mask = 0, $$mask1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0.0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type>>>0)>(20);
 L1: do {
  if (!($0)) {
   do {
    switch ($type|0) {
    case 9:  {
     $arglist_current = HEAP32[$ap>>2]|0;
     $1 = $arglist_current;
     $2 = ((0) + 4|0);
     $expanded28 = $2;
     $expanded = (($expanded28) - 1)|0;
     $3 = (($1) + ($expanded))|0;
     $4 = ((0) + 4|0);
     $expanded32 = $4;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $5 = $3 & $expanded30;
     $6 = $5;
     $7 = HEAP32[$6>>2]|0;
     $arglist_next = ((($6)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next;
     HEAP32[$arg>>2] = $7;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$ap>>2]|0;
     $8 = $arglist_current2;
     $9 = ((0) + 4|0);
     $expanded35 = $9;
     $expanded34 = (($expanded35) - 1)|0;
     $10 = (($8) + ($expanded34))|0;
     $11 = ((0) + 4|0);
     $expanded39 = $11;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $12 = $10 & $expanded37;
     $13 = $12;
     $14 = HEAP32[$13>>2]|0;
     $arglist_next3 = ((($13)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next3;
     $15 = ($14|0)<(0);
     $16 = $15 << 31 >> 31;
     $17 = $arg;
     $18 = $17;
     HEAP32[$18>>2] = $14;
     $19 = (($17) + 4)|0;
     $20 = $19;
     HEAP32[$20>>2] = $16;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$ap>>2]|0;
     $21 = $arglist_current5;
     $22 = ((0) + 4|0);
     $expanded42 = $22;
     $expanded41 = (($expanded42) - 1)|0;
     $23 = (($21) + ($expanded41))|0;
     $24 = ((0) + 4|0);
     $expanded46 = $24;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $25 = $23 & $expanded44;
     $26 = $25;
     $27 = HEAP32[$26>>2]|0;
     $arglist_next6 = ((($26)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next6;
     $28 = $arg;
     $29 = $28;
     HEAP32[$29>>2] = $27;
     $30 = (($28) + 4)|0;
     $31 = $30;
     HEAP32[$31>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$ap>>2]|0;
     $32 = $arglist_current8;
     $33 = ((0) + 8|0);
     $expanded49 = $33;
     $expanded48 = (($expanded49) - 1)|0;
     $34 = (($32) + ($expanded48))|0;
     $35 = ((0) + 8|0);
     $expanded53 = $35;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $36 = $34 & $expanded51;
     $37 = $36;
     $38 = $37;
     $39 = $38;
     $40 = HEAP32[$39>>2]|0;
     $41 = (($38) + 4)|0;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $arglist_next9 = ((($37)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next9;
     $44 = $arg;
     $45 = $44;
     HEAP32[$45>>2] = $40;
     $46 = (($44) + 4)|0;
     $47 = $46;
     HEAP32[$47>>2] = $43;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$ap>>2]|0;
     $48 = $arglist_current11;
     $49 = ((0) + 4|0);
     $expanded56 = $49;
     $expanded55 = (($expanded56) - 1)|0;
     $50 = (($48) + ($expanded55))|0;
     $51 = ((0) + 4|0);
     $expanded60 = $51;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $52 = $50 & $expanded58;
     $53 = $52;
     $54 = HEAP32[$53>>2]|0;
     $arglist_next12 = ((($53)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next12;
     $55 = $54&65535;
     $56 = $55 << 16 >> 16;
     $57 = ($56|0)<(0);
     $58 = $57 << 31 >> 31;
     $59 = $arg;
     $60 = $59;
     HEAP32[$60>>2] = $56;
     $61 = (($59) + 4)|0;
     $62 = $61;
     HEAP32[$62>>2] = $58;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$ap>>2]|0;
     $63 = $arglist_current14;
     $64 = ((0) + 4|0);
     $expanded63 = $64;
     $expanded62 = (($expanded63) - 1)|0;
     $65 = (($63) + ($expanded62))|0;
     $66 = ((0) + 4|0);
     $expanded67 = $66;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $67 = $65 & $expanded65;
     $68 = $67;
     $69 = HEAP32[$68>>2]|0;
     $arglist_next15 = ((($68)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next15;
     $$mask1 = $69 & 65535;
     $70 = $arg;
     $71 = $70;
     HEAP32[$71>>2] = $$mask1;
     $72 = (($70) + 4)|0;
     $73 = $72;
     HEAP32[$73>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$ap>>2]|0;
     $74 = $arglist_current17;
     $75 = ((0) + 4|0);
     $expanded70 = $75;
     $expanded69 = (($expanded70) - 1)|0;
     $76 = (($74) + ($expanded69))|0;
     $77 = ((0) + 4|0);
     $expanded74 = $77;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $78 = $76 & $expanded72;
     $79 = $78;
     $80 = HEAP32[$79>>2]|0;
     $arglist_next18 = ((($79)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next18;
     $81 = $80&255;
     $82 = $81 << 24 >> 24;
     $83 = ($82|0)<(0);
     $84 = $83 << 31 >> 31;
     $85 = $arg;
     $86 = $85;
     HEAP32[$86>>2] = $82;
     $87 = (($85) + 4)|0;
     $88 = $87;
     HEAP32[$88>>2] = $84;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$ap>>2]|0;
     $89 = $arglist_current20;
     $90 = ((0) + 4|0);
     $expanded77 = $90;
     $expanded76 = (($expanded77) - 1)|0;
     $91 = (($89) + ($expanded76))|0;
     $92 = ((0) + 4|0);
     $expanded81 = $92;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $93 = $91 & $expanded79;
     $94 = $93;
     $95 = HEAP32[$94>>2]|0;
     $arglist_next21 = ((($94)) + 4|0);
     HEAP32[$ap>>2] = $arglist_next21;
     $$mask = $95 & 255;
     $96 = $arg;
     $97 = $96;
     HEAP32[$97>>2] = $$mask;
     $98 = (($96) + 4)|0;
     $99 = $98;
     HEAP32[$99>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$ap>>2]|0;
     $100 = $arglist_current23;
     $101 = ((0) + 8|0);
     $expanded84 = $101;
     $expanded83 = (($expanded84) - 1)|0;
     $102 = (($100) + ($expanded83))|0;
     $103 = ((0) + 8|0);
     $expanded88 = $103;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $104 = $102 & $expanded86;
     $105 = $104;
     $106 = +HEAPF64[$105>>3];
     $arglist_next24 = ((($105)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next24;
     HEAPF64[$arg>>3] = $106;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$ap>>2]|0;
     $107 = $arglist_current26;
     $108 = ((0) + 8|0);
     $expanded91 = $108;
     $expanded90 = (($expanded91) - 1)|0;
     $109 = (($107) + ($expanded90))|0;
     $110 = ((0) + 8|0);
     $expanded95 = $110;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $111 = $109 & $expanded93;
     $112 = $111;
     $113 = +HEAPF64[$112>>3];
     $arglist_next27 = ((($112)) + 8|0);
     HEAP32[$ap>>2] = $arglist_next27;
     HEAPF64[$arg>>3] = $113;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$s) {
 $0 = $0|0;
 $1 = $1|0;
 $s = $s|0;
 var $$0$lcssa = 0, $$01$lcssa$off0 = 0, $$05 = 0, $$1$lcssa = 0, $$12 = 0, $$lcssa19 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $y$03 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(0);
 $3 = ($0>>>0)>(4294967295);
 $4 = ($1|0)==(0);
 $5 = $4 & $3;
 $6 = $2 | $5;
 if ($6) {
  $$05 = $s;$7 = $0;$8 = $1;
  while(1) {
   $9 = (___uremdi3(($7|0),($8|0),10,0)|0);
   $10 = tempRet0;
   $11 = $9 | 48;
   $12 = $11&255;
   $13 = ((($$05)) + -1|0);
   HEAP8[$13>>0] = $12;
   $14 = (___udivdi3(($7|0),($8|0),10,0)|0);
   $15 = tempRet0;
   $16 = ($8>>>0)>(9);
   $17 = ($7>>>0)>(4294967295);
   $18 = ($8|0)==(9);
   $19 = $18 & $17;
   $20 = $16 | $19;
   if ($20) {
    $$05 = $13;$7 = $14;$8 = $15;
   } else {
    $$lcssa19 = $13;$28 = $14;$29 = $15;
    break;
   }
  }
  $$0$lcssa = $$lcssa19;$$01$lcssa$off0 = $28;
 } else {
  $$0$lcssa = $s;$$01$lcssa$off0 = $0;
 }
 $21 = ($$01$lcssa$off0|0)==(0);
 if ($21) {
  $$1$lcssa = $$0$lcssa;
 } else {
  $$12 = $$0$lcssa;$y$03 = $$01$lcssa$off0;
  while(1) {
   $22 = (($y$03>>>0) % 10)&-1;
   $23 = $22 | 48;
   $24 = $23&255;
   $25 = ((($$12)) + -1|0);
   HEAP8[$25>>0] = $24;
   $26 = (($y$03>>>0) / 10)&-1;
   $27 = ($y$03>>>0)<(10);
   if ($27) {
    $$1$lcssa = $25;
    break;
   } else {
    $$12 = $25;$y$03 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($e) {
 $e = $e|0;
 var $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i$03 = 0, $i$03$lcssa = 0, $i$12 = 0, $s$0$lcssa = 0, $s$01 = 0, $s$1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $i$03 = 0;
 while(1) {
  $1 = (4934 + ($i$03)|0);
  $2 = HEAP8[$1>>0]|0;
  $3 = $2&255;
  $4 = ($3|0)==($e|0);
  if ($4) {
   $i$03$lcssa = $i$03;
   label = 2;
   break;
  }
  $5 = (($i$03) + 1)|0;
  $6 = ($5|0)==(87);
  if ($6) {
   $i$12 = 87;$s$01 = 5022;
   label = 5;
   break;
  } else {
   $i$03 = $5;
  }
 }
 if ((label|0) == 2) {
  $0 = ($i$03$lcssa|0)==(0);
  if ($0) {
   $s$0$lcssa = 5022;
  } else {
   $i$12 = $i$03$lcssa;$s$01 = 5022;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $s$1 = $s$01;
   while(1) {
    $7 = HEAP8[$s$1>>0]|0;
    $8 = ($7<<24>>24)==(0);
    $9 = ((($s$1)) + 1|0);
    if ($8) {
     $$lcssa = $9;
     break;
    } else {
     $s$1 = $9;
    }
   }
   $10 = (($i$12) + -1)|0;
   $11 = ($10|0)==(0);
   if ($11) {
    $s$0$lcssa = $$lcssa;
    break;
   } else {
    $i$12 = $10;$s$01 = $$lcssa;
    label = 5;
   }
  }
 }
 return ($s$0$lcssa|0);
}
function _pad($f,$c,$w,$l,$fl) {
 $f = $f|0;
 $c = $c|0;
 $w = $w|0;
 $l = $l|0;
 $fl = $fl|0;
 var $$0$lcssa6 = 0, $$02 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $pad = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $pad = sp;
 $0 = $fl & 73728;
 $1 = ($0|0)==(0);
 $2 = ($w|0)>($l|0);
 $or$cond = $2 & $1;
 do {
  if ($or$cond) {
   $3 = (($w) - ($l))|0;
   $4 = ($3>>>0)>(256);
   $5 = $4 ? 256 : $3;
   _memset(($pad|0),($c|0),($5|0))|0;
   $6 = ($3>>>0)>(255);
   $7 = HEAP32[$f>>2]|0;
   $8 = $7 & 32;
   $9 = ($8|0)==(0);
   if ($6) {
    $10 = (($w) - ($l))|0;
    $$02 = $3;$17 = $7;$18 = $9;
    while(1) {
     if ($18) {
      (___fwritex($pad,256,$f)|0);
      $$pre = HEAP32[$f>>2]|0;
      $14 = $$pre;
     } else {
      $14 = $17;
     }
     $11 = (($$02) + -256)|0;
     $12 = ($11>>>0)>(255);
     $13 = $14 & 32;
     $15 = ($13|0)==(0);
     if ($12) {
      $$02 = $11;$17 = $14;$18 = $15;
     } else {
      break;
     }
    }
    $16 = $10 & 255;
    if ($15) {
     $$0$lcssa6 = $16;
    } else {
     break;
    }
   } else {
    if ($9) {
     $$0$lcssa6 = $3;
    } else {
     break;
    }
   }
   (___fwritex($pad,$$0$lcssa6,$f)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($s,$wc) {
 $s = $s|0;
 $wc = $wc|0;
 var $$0 = 0, $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 if ($0) {
  $$0 = 0;
 } else {
  $1 = (_wcrtomb($s,$wc,0)|0);
  $$0 = $1;
 }
 return ($$0|0);
}
function _wcrtomb($s,$wc,$st) {
 $s = $s|0;
 $wc = $wc|0;
 $st = $st|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($s|0)==(0|0);
 do {
  if ($0) {
   $$0 = 1;
  } else {
   $1 = ($wc>>>0)<(128);
   if ($1) {
    $2 = $wc&255;
    HEAP8[$s>>0] = $2;
    $$0 = 1;
    break;
   }
   $3 = ($wc>>>0)<(2048);
   if ($3) {
    $4 = $wc >>> 6;
    $5 = $4 | 192;
    $6 = $5&255;
    $7 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $6;
    $8 = $wc & 63;
    $9 = $8 | 128;
    $10 = $9&255;
    HEAP8[$7>>0] = $10;
    $$0 = 2;
    break;
   }
   $11 = ($wc>>>0)<(55296);
   $12 = $wc & -8192;
   $13 = ($12|0)==(57344);
   $or$cond = $11 | $13;
   if ($or$cond) {
    $14 = $wc >>> 12;
    $15 = $14 | 224;
    $16 = $15&255;
    $17 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $16;
    $18 = $wc >>> 6;
    $19 = $18 & 63;
    $20 = $19 | 128;
    $21 = $20&255;
    $22 = ((($s)) + 2|0);
    HEAP8[$17>>0] = $21;
    $23 = $wc & 63;
    $24 = $23 | 128;
    $25 = $24&255;
    HEAP8[$22>>0] = $25;
    $$0 = 3;
    break;
   }
   $26 = (($wc) + -65536)|0;
   $27 = ($26>>>0)<(1048576);
   if ($27) {
    $28 = $wc >>> 18;
    $29 = $28 | 240;
    $30 = $29&255;
    $31 = ((($s)) + 1|0);
    HEAP8[$s>>0] = $30;
    $32 = $wc >>> 12;
    $33 = $32 & 63;
    $34 = $33 | 128;
    $35 = $34&255;
    $36 = ((($s)) + 2|0);
    HEAP8[$31>>0] = $35;
    $37 = $wc >>> 6;
    $38 = $37 & 63;
    $39 = $38 | 128;
    $40 = $39&255;
    $41 = ((($s)) + 3|0);
    HEAP8[$36>>0] = $40;
    $42 = $wc & 63;
    $43 = $42 | 128;
    $44 = $43&255;
    HEAP8[$41>>0] = $44;
    $$0 = 4;
    break;
   } else {
    $45 = (___errno_location()|0);
    HEAP32[$45>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___lockfile($f) {
 $f = $f|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function _strncmp($_l,$_r,$n) {
 $_l = $_l|0;
 $_r = $_r|0;
 $n = $n|0;
 var $$03 = 0, $$08 = 0, $$08$in = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $l$06 = 0, $or$cond = 0, $or$cond4 = 0, $r$0$lcssa = 0, $r$07 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 if ($0) {
  $$03 = 0;
 } else {
  $1 = HEAP8[$_l>>0]|0;
  $2 = ($1<<24>>24)==(0);
  L3: do {
   if ($2) {
    $13 = 0;$r$0$lcssa = $_r;
   } else {
    $$08$in = $n;$6 = $1;$l$06 = $_l;$r$07 = $_r;
    while(1) {
     $$08 = (($$08$in) + -1)|0;
     $3 = HEAP8[$r$07>>0]|0;
     $4 = ($3<<24>>24)!=(0);
     $5 = ($$08|0)!=(0);
     $or$cond = $5 & $4;
     $7 = ($6<<24>>24)==($3<<24>>24);
     $or$cond4 = $7 & $or$cond;
     if (!($or$cond4)) {
      $13 = $6;$r$0$lcssa = $r$07;
      break L3;
     }
     $8 = ((($l$06)) + 1|0);
     $9 = ((($r$07)) + 1|0);
     $10 = HEAP8[$8>>0]|0;
     $11 = ($10<<24>>24)==(0);
     if ($11) {
      $13 = 0;$r$0$lcssa = $9;
      break;
     } else {
      $$08$in = $$08;$6 = $10;$l$06 = $8;$r$07 = $9;
     }
    }
   }
  } while(0);
  $12 = $13&255;
  $14 = HEAP8[$r$0$lcssa>>0]|0;
  $15 = $14&255;
  $16 = (($12) - ($15))|0;
  $$03 = $16;
 }
 return ($$03|0);
}
function ___fdopen($fd,$mode) {
 $fd = $fd|0;
 $mode = $mode|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre1 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $tio = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $tio = sp + 52|0;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(6870,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (_malloc(1144)|0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   $$0 = 0;
  } else {
   dest=$4; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $6 = (_strchr($mode,43)|0);
   $7 = ($6|0)==(0|0);
   if ($7) {
    $8 = ($0<<24>>24)==(114);
    $9 = $8 ? 8 : 4;
    HEAP32[$4>>2] = $9;
   }
   $10 = (_strchr($mode,101)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = $0;
   } else {
    HEAP32[$vararg_buffer>>2] = $fd;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$mode>>0]|0;
    $12 = $$pre;
   }
   $13 = ($12<<24>>24)==(97);
   if ($13) {
    HEAP32[$vararg_buffer3>>2] = $fd;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $14 = (___syscall221(221,($vararg_buffer3|0))|0);
    $15 = $14 & 1024;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = $14 | 1024;
     HEAP32[$vararg_buffer7>>2] = $fd;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $17;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $18 = HEAP32[$4>>2]|0;
    $19 = $18 | 128;
    HEAP32[$4>>2] = $19;
    $26 = $19;
   } else {
    $$pre1 = HEAP32[$4>>2]|0;
    $26 = $$pre1;
   }
   $20 = ((($4)) + 60|0);
   HEAP32[$20>>2] = $fd;
   $21 = ((($4)) + 120|0);
   $22 = ((($4)) + 44|0);
   HEAP32[$22>>2] = $21;
   $23 = ((($4)) + 48|0);
   HEAP32[$23>>2] = 1024;
   $24 = ((($4)) + 75|0);
   HEAP8[$24>>0] = -1;
   $25 = $26 & 8;
   $27 = ($25|0)==(0);
   if ($27) {
    HEAP32[$vararg_buffer12>>2] = $fd;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $tio;
    $28 = (___syscall54(54,($vararg_buffer12|0))|0);
    $29 = ($28|0)==(0);
    if ($29) {
     HEAP8[$24>>0] = 10;
    }
   }
   $30 = ((($4)) + 32|0);
   HEAP32[$30>>2] = 76;
   $31 = ((($4)) + 36|0);
   HEAP32[$31>>2] = 7;
   $32 = ((($4)) + 40|0);
   HEAP32[$32>>2] = 6;
   $33 = ((($4)) + 12|0);
   HEAP32[$33>>2] = 4;
   $34 = HEAP32[(7588)>>2]|0;
   $35 = ($34|0)==(0);
   if ($35) {
    $36 = ((($4)) + 76|0);
    HEAP32[$36>>2] = -1;
   }
   ___lock(((7612)|0));
   $37 = HEAP32[(7608)>>2]|0;
   $38 = ((($4)) + 56|0);
   HEAP32[$38>>2] = $37;
   $39 = ($37|0)==(0);
   if (!($39)) {
    $$cast = $37;
    $40 = ((($$cast)) + 52|0);
    HEAP32[$40>>2] = $4;
   }
   HEAP32[(7608)>>2] = $4;
   ___unlock(((7612)|0));
   $$0 = $4;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _feof($f) {
 $f = $f|0;
 var $$lobit = 0, $$lobit1 = 0, $$lobit2 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = HEAP32[$f>>2]|0;
  $7 = $6 >>> 4;
  $$lobit = $7 & 1;
  if ($phitmp) {
   $$lobit2 = $$lobit;
  } else {
   $$lobit2 = $$lobit;
  }
 } else {
  $3 = HEAP32[$f>>2]|0;
  $4 = $3 >>> 4;
  $$lobit1 = $4 & 1;
  $$lobit2 = $$lobit1;
 }
 return ($$lobit2|0);
}
function _fclose($f) {
 $f = $f|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
 }
 $3 = HEAP32[$f>>2]|0;
 $4 = $3 & 1;
 $5 = ($4|0)!=(0);
 if (!($5)) {
  ___lock(((7612)|0));
  $6 = ((($f)) + 52|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = ($7|0)==(0|0);
  $9 = $7;
  $$pre = ((($f)) + 56|0);
  if (!($8)) {
   $10 = HEAP32[$$pre>>2]|0;
   $11 = ((($7)) + 56|0);
   HEAP32[$11>>2] = $10;
  }
  $12 = HEAP32[$$pre>>2]|0;
  $13 = ($12|0)==(0|0);
  $14 = $12;
  if (!($13)) {
   $15 = ((($12)) + 52|0);
   HEAP32[$15>>2] = $9;
  }
  $16 = HEAP32[(7608)>>2]|0;
  $17 = ($16|0)==($f|0);
  if ($17) {
   HEAP32[(7608)>>2] = $14;
  }
  ___unlock(((7612)|0));
 }
 $18 = (_fflush($f)|0);
 $19 = ((($f)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (FUNCTION_TABLE_ii[$20 & 63]($f)|0);
 $22 = $21 | $18;
 $23 = ((($f)) + 92|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(0|0);
 if (!($25)) {
  _free($24);
 }
 if (!($5)) {
  _free($f);
 }
 return ($22|0);
}
function _fflush($f) {
 $f = $f|0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f|0)==(0|0);
 do {
  if ($0) {
   $7 = HEAP32[263]|0;
   $8 = ($7|0)==(0|0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = HEAP32[263]|0;
    $10 = (_fflush($9)|0);
    $27 = $10;
   }
   ___lock(((7612)|0));
   $$012 = HEAP32[(7608)>>2]|0;
   $11 = ($$012|0)==(0|0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;$r$03 = $27;
    while(1) {
     $12 = ((($$014)) + 76|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)>(-1);
     if ($14) {
      $15 = (___lockfile($$014)|0);
      $23 = $15;
     } else {
      $23 = 0;
     }
     $16 = ((($$014)) + 20|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = ((($$014)) + 28|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ($17>>>0)>($19>>>0);
     if ($20) {
      $21 = (___fflush_unlocked($$014)|0);
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $24 = ($23|0)==(0);
     if (!($24)) {
      ___unlockfile($$014);
     }
     $25 = ((($$014)) + 56|0);
     $$01 = HEAP32[$25>>2]|0;
     $26 = ($$01|0)==(0|0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;$r$03 = $r$1;
     }
    }
   }
   ___unlock(((7612)|0));
   $$0 = $r$0$lcssa;
  } else {
   $1 = ((($f)) + 76|0);
   $2 = HEAP32[$1>>2]|0;
   $3 = ($2|0)>(-1);
   if (!($3)) {
    $4 = (___fflush_unlocked($f)|0);
    $$0 = $4;
    break;
   }
   $5 = (___lockfile($f)|0);
   $phitmp = ($5|0)==(0);
   $6 = (___fflush_unlocked($f)|0);
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 20|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($f)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($1>>>0)>($3>>>0);
 if ($4) {
  $5 = ((($f)) + 36|0);
  $6 = HEAP32[$5>>2]|0;
  (FUNCTION_TABLE_iiii[$6 & 127]($f,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $9 = ((($f)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($f)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($10>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($f)) + 40|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $10;
   $17 = $12;
   $18 = (($16) - ($17))|0;
   (FUNCTION_TABLE_iiii[$15 & 127]($f,$18,1)|0);
  }
  $19 = ((($f)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$2>>2] = 0;
  HEAP32[$0>>2] = 0;
  HEAP32[$11>>2] = 0;
  HEAP32[$9>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _fopen($filename,$mode) {
 $filename = $filename|0;
 $mode = $mode|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $0 = HEAP8[$mode>>0]|0;
 $1 = $0 << 24 >> 24;
 $memchr = (_memchr(6870,$1,4)|0);
 $2 = ($memchr|0)==(0|0);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 22;
  $$0 = 0;
 } else {
  $4 = (___fmodeflags($mode)|0);
  $5 = $4 | 32768;
  HEAP32[$vararg_buffer>>2] = $filename;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $5;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $6 = (___syscall5(5,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$0 = 0;
  } else {
   $9 = (___fdopen($7,$mode)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    HEAP32[$vararg_buffer3>>2] = $7;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $9;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($mode) {
 $mode = $mode|0;
 var $$ = 0, $$flags$4 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $flags$0 = 0, $flags$0$ = 0, $flags$2 = 0;
 var $flags$2$ = 0, $flags$4 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strchr($mode,43)|0);
 $1 = ($0|0)==(0|0);
 $2 = HEAP8[$mode>>0]|0;
 $not$ = ($2<<24>>24)!=(114);
 $$ = $not$&1;
 $flags$0 = $1 ? $$ : 2;
 $3 = (_strchr($mode,120)|0);
 $4 = ($3|0)==(0|0);
 $5 = $flags$0 | 128;
 $flags$0$ = $4 ? $flags$0 : $5;
 $6 = (_strchr($mode,101)|0);
 $7 = ($6|0)==(0|0);
 $8 = $flags$0$ | 524288;
 $flags$2 = $7 ? $flags$0$ : $8;
 $9 = ($2<<24>>24)==(114);
 $10 = $flags$2 | 64;
 $flags$2$ = $9 ? $flags$2 : $10;
 $11 = ($2<<24>>24)==(119);
 $12 = $flags$2$ | 512;
 $flags$4 = $11 ? $12 : $flags$2$;
 $13 = ($2<<24>>24)==(97);
 $14 = $flags$4 | 1024;
 $$flags$4 = $13 ? $14 : $flags$4;
 return ($$flags$4|0);
}
function _fseek($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___fseeko($f,$off,$whence)|0);
 return ($0|0);
}
function ___fseeko($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___fseeko_unlocked($f,$off,$whence)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   ___unlockfile($f);
   $6 = $5;
  }
 } else {
  $3 = (___fseeko_unlocked($f,$off,$whence)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___fseeko_unlocked($f,$off,$whence) {
 $f = $f|0;
 $off = $off|0;
 $whence = $whence|0;
 var $$0 = 0, $$01 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($whence|0)==(1);
 if ($0) {
  $1 = ((($f)) + 8|0);
  $2 = HEAP32[$1>>2]|0;
  $3 = ((($f)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = (($off) - ($2))|0;
  $6 = (($5) + ($4))|0;
  $$01 = $6;
 } else {
  $$01 = $off;
 }
 $7 = ((($f)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($f)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($f)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($f,0,0)|0);
  $14 = HEAP32[$7>>2]|0;
  $15 = ($14|0)==(0|0);
  if ($15) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $16 = ((($f)) + 16|0);
  HEAP32[$16>>2] = 0;
  HEAP32[$9>>2] = 0;
  HEAP32[$7>>2] = 0;
  $17 = ((($f)) + 40|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (FUNCTION_TABLE_iiii[$18 & 127]($f,$$01,$whence)|0);
  $20 = ($19|0)<(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = ((($f)) + 8|0);
   HEAP32[$21>>2] = 0;
   $22 = ((($f)) + 4|0);
   HEAP32[$22>>2] = 0;
   $23 = HEAP32[$f>>2]|0;
   $24 = $23 & -17;
   HEAP32[$f>>2] = $24;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _memcmp($vl,$vr,$n) {
 $vl = $vl|0;
 $vr = $vr|0;
 $n = $n|0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n|0)==(0);
 L1: do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;$l$04 = $vl;$r$05 = $vr;
   while(1) {
    $1 = HEAP8[$l$04>>0]|0;
    $2 = HEAP8[$r$05>>0]|0;
    $3 = ($1<<24>>24)==($2<<24>>24);
    if (!($3)) {
     $$lcssa = $1;$$lcssa19 = $2;
     break;
    }
    $4 = (($$03) + -1)|0;
    $5 = ((($l$04)) + 1|0);
    $6 = ((($r$05)) + 1|0);
    $7 = ($4|0)==(0);
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;$l$04 = $5;$r$05 = $6;
    }
   }
   $8 = $$lcssa&255;
   $9 = $$lcssa19&255;
   $10 = (($8) - ($9))|0;
   $11 = $10;
  }
 } while(0);
 return ($11|0);
}
function _fread($destv,$size,$nmemb,$f) {
 $destv = $destv|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $$ = 0, $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $dest$0$ph = 0, $dest$02 = 0, $l$0$ph = 0, $l$03 = 0, $l$03$lcssa = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($f)|0);
  $30 = $4;
 } else {
  $30 = 0;
 }
 $5 = ((($f)) + 74|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6 << 24 >> 24;
 $8 = (($7) + 255)|0;
 $9 = $8 | $7;
 $10 = $9&255;
 HEAP8[$5>>0] = $10;
 $11 = ((($f)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($f)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($12) - ($14))|0;
 $16 = ($15|0)>(0);
 $17 = $14;
 if ($16) {
  $18 = ($15>>>0)<($0>>>0);
  $$ = $18 ? $15 : $0;
  _memcpy(($destv|0),($17|0),($$|0))|0;
  $19 = (($17) + ($$)|0);
  HEAP32[$13>>2] = $19;
  $20 = (($destv) + ($$)|0);
  $21 = (($0) - ($$))|0;
  $dest$0$ph = $20;$l$0$ph = $21;
 } else {
  $dest$0$ph = $destv;$l$0$ph = $0;
 }
 $22 = ($l$0$ph|0)==(0);
 L7: do {
  if ($22) {
   label = 13;
  } else {
   $23 = ((($f)) + 32|0);
   $dest$02 = $dest$0$ph;$l$03 = $l$0$ph;
   while(1) {
    $24 = (___toread($f)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     $l$03$lcssa = $l$03;
     break;
    }
    $26 = HEAP32[$23>>2]|0;
    $27 = (FUNCTION_TABLE_iiii[$26 & 127]($f,$dest$02,$l$03)|0);
    $28 = (($27) + 1)|0;
    $29 = ($28>>>0)<(2);
    if ($29) {
     $l$03$lcssa = $l$03;
     break;
    }
    $34 = (($l$03) - ($27))|0;
    $35 = (($dest$02) + ($27)|0);
    $36 = ($l$03|0)==($27|0);
    if ($36) {
     label = 13;
     break L7;
    } else {
     $dest$02 = $35;$l$03 = $34;
    }
   }
   $31 = ($30|0)==(0);
   if (!($31)) {
    ___unlockfile($f);
   }
   $32 = (($0) - ($l$03$lcssa))|0;
   $33 = (($32>>>0) / ($size>>>0))&-1;
   $$0 = $33;
  }
 } while(0);
 if ((label|0) == 13) {
  $37 = ($30|0)==(0);
  if ($37) {
   $$0 = $nmemb;
  } else {
   ___unlockfile($f);
   $$0 = $nmemb;
  }
 }
 return ($$0|0);
}
function ___overflow($f,$_c) {
 $f = $f|0;
 $_c = $_c|0;
 var $$0 = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $c = sp;
 $0 = $_c&255;
 HEAP8[$c>>0] = $0;
 $1 = ((($f)) + 16|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  $4 = (___towrite($f)|0);
  $5 = ($4|0)==(0);
  if ($5) {
   $$pre = HEAP32[$1>>2]|0;
   $9 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $9 = $2;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $6 = ((($f)) + 20|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7>>>0)<($9>>>0);
   if ($8) {
    $10 = $_c & 255;
    $11 = ((($f)) + 75|0);
    $12 = HEAP8[$11>>0]|0;
    $13 = $12 << 24 >> 24;
    $14 = ($10|0)==($13|0);
    if (!($14)) {
     $15 = ((($7)) + 1|0);
     HEAP32[$6>>2] = $15;
     HEAP8[$7>>0] = $0;
     $$0 = $10;
     break;
    }
   }
   $16 = ((($f)) + 36|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = (FUNCTION_TABLE_iiii[$17 & 127]($f,$c,1)|0);
   $19 = ($18|0)==(1);
   if ($19) {
    $20 = HEAP8[$c>>0]|0;
    $21 = $20&255;
    $$0 = $21;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _fwrite($src,$size,$nmemb,$f) {
 $src = $src|0;
 $size = $size|0;
 $nmemb = $nmemb|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = Math_imul($nmemb, $size)|0;
 $1 = ((($f)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $5 = (___lockfile($f)|0);
  $phitmp = ($5|0)==(0);
  $6 = (___fwritex($src,$0,$f)|0);
  if ($phitmp) {
   $7 = $6;
  } else {
   ___unlockfile($f);
   $7 = $6;
  }
 } else {
  $4 = (___fwritex($src,$0,$f)|0);
  $7 = $4;
 }
 $8 = ($7|0)==($0|0);
 if ($8) {
  $10 = $nmemb;
 } else {
  $9 = (($7>>>0) / ($size>>>0))&-1;
  $10 = $9;
 }
 return ($10|0);
}
function _fputs($s,$f) {
 $s = $s|0;
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($s)|0);
 $1 = (_fwrite($s,$0,1,$f)|0);
 $2 = (($1) + -1)|0;
 return ($2|0);
}
function _puts($s) {
 $s = $s|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[234]|0;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $19 = $4;
 } else {
  $19 = 0;
 }
 $5 = (_fputs($s,$0)|0);
 $6 = ($5|0)<(0);
 do {
  if ($6) {
   $18 = 1;
  } else {
   $7 = ((($0)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(10);
   if (!($9)) {
    $10 = ((($0)) + 20|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 16|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = ($11>>>0)<($13>>>0);
    if ($14) {
     $15 = ((($11)) + 1|0);
     HEAP32[$10>>2] = $15;
     HEAP8[$11>>0] = 10;
     $18 = 0;
     break;
    }
   }
   $16 = (___overflow($0,10)|0);
   $phitmp = ($16|0)<(0);
   $18 = $phitmp;
  }
 } while(0);
 $17 = $18 << 31 >> 31;
 $20 = ($19|0)==(0);
 if (!($20)) {
  ___unlockfile($0);
 }
 return ($17|0);
}
function _fputc($c,$f) {
 $c = $c|0;
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)<(0);
 if ($2) {
  label = 3;
 } else {
  $3 = (___lockfile($f)|0);
  $4 = ($3|0)==(0);
  if ($4) {
   label = 3;
  } else {
   $18 = ((($f)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19 << 24 >> 24;
   $21 = ($20|0)==($c|0);
   if ($21) {
    label = 10;
   } else {
    $22 = ((($f)) + 20|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($f)) + 16|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ($23>>>0)<($25>>>0);
    if ($26) {
     $27 = $c&255;
     $28 = ((($23)) + 1|0);
     HEAP32[$22>>2] = $28;
     HEAP8[$23>>0] = $27;
     $29 = $c & 255;
     $31 = $29;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $30 = (___overflow($f,$c)|0);
    $31 = $30;
   }
   ___unlockfile($f);
   $$0 = $31;
  }
 }
 do {
  if ((label|0) == 3) {
   $5 = ((($f)) + 75|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = $6 << 24 >> 24;
   $8 = ($7|0)==($c|0);
   if (!($8)) {
    $9 = ((($f)) + 20|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = ((($f)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($10>>>0)<($12>>>0);
    if ($13) {
     $14 = $c&255;
     $15 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $15;
     HEAP8[$10>>0] = $14;
     $16 = $c & 255;
     $$0 = $16;
     break;
    }
   }
   $17 = (___overflow($f,$c)|0);
   $$0 = $17;
  }
 } while(0);
 return ($$0|0);
}
function _printf($fmt,$varargs) {
 $fmt = $fmt|0;
 $varargs = $varargs|0;
 var $0 = 0, $1 = 0, $ap = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $ap = sp;
 HEAP32[$ap>>2] = $varargs;
 $0 = HEAP32[234]|0;
 $1 = (_vfprintf($0,$fmt,$ap)|0);
 STACKTOP = sp;return ($1|0);
}
function ___ftello($f) {
 $f = $f|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 76|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)>(-1);
 if ($2) {
  $4 = (___lockfile($f)|0);
  $phitmp = ($4|0)==(0);
  $5 = (___ftello_unlocked($f)|0);
  if ($phitmp) {
   $6 = $5;
  } else {
   $6 = $5;
  }
 } else {
  $3 = (___ftello_unlocked($f)|0);
  $6 = $3;
 }
 return ($6|0);
}
function ___ftello_unlocked($f) {
 $f = $f|0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($f)) + 40|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP32[$f>>2]|0;
 $3 = $2 & 128;
 $4 = ($3|0)==(0);
 if ($4) {
  $10 = 1;
 } else {
  $5 = ((($f)) + 20|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ((($f)) + 28|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($6>>>0)>($8>>>0);
  $phitmp = $9 ? 2 : 1;
  $10 = $phitmp;
 }
 $11 = (FUNCTION_TABLE_iiii[$1 & 127]($f,0,$10)|0);
 $12 = ($11|0)<(0);
 if ($12) {
  $$0 = $11;
 } else {
  $13 = ((($f)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($f)) + 4|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($f)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($f)) + 28|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = (($11) - ($14))|0;
  $22 = (($21) + ($16))|0;
  $23 = (($22) + ($18))|0;
  $24 = (($23) - ($20))|0;
  $$0 = $24;
 }
 return ($$0|0);
}
function _ftell($f) {
 $f = $f|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___ftello($f)|0);
 return ($0|0);
}
function _strncat($d,$s,$n) {
 $d = $d|0;
 $s = $s|0;
 $n = $n|0;
 var $$0$lcssa = 0, $$014 = 0, $$023 = 0, $$05 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($d)|0);
 $1 = (($d) + ($0)|0);
 $2 = ($n|0)==(0);
 L1: do {
  if ($2) {
   $$0$lcssa = $1;
  } else {
   $$014 = $n;$$023 = $s;$$05 = $1;
   while(1) {
    $3 = HEAP8[$$023>>0]|0;
    $4 = ($3<<24>>24)==(0);
    if ($4) {
     $$0$lcssa = $$05;
     break L1;
    }
    $5 = (($$014) + -1)|0;
    $6 = ((($$023)) + 1|0);
    $7 = ((($$05)) + 1|0);
    HEAP8[$$05>>0] = $3;
    $8 = ($5|0)==(0);
    if ($8) {
     $$0$lcssa = $7;
     break;
    } else {
     $$014 = $5;$$023 = $6;$$05 = $7;
    }
   }
  }
 } while(0);
 HEAP8[$$0$lcssa>>0] = 0;
 return ($d|0);
}
function _malloc($bytes) {
 $bytes = $bytes|0;
 var $$0 = 0, $$lcssa = 0, $$lcssa141 = 0, $$lcssa142 = 0, $$lcssa144 = 0, $$lcssa147 = 0, $$lcssa149 = 0, $$lcssa151 = 0, $$lcssa153 = 0, $$lcssa155 = 0, $$lcssa157 = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i13 = 0, $$pre$i16$i = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i14Z2D = 0, $$pre$phi$i17$iZ2D = 0;
 var $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre71 = 0, $$pre9$i$i = 0, $$rsize$0$i = 0, $$rsize$4$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0;
 var $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0;
 var $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0;
 var $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0;
 var $1062 = 0, $1063 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0;
 var $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0;
 var $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0;
 var $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0;
 var $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0;
 var $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0;
 var $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0;
 var $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0;
 var $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0;
 var $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0;
 var $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0;
 var $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0;
 var $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0;
 var $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0;
 var $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0;
 var $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0;
 var $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0;
 var $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0;
 var $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0;
 var $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0;
 var $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0;
 var $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0;
 var $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0;
 var $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0;
 var $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0;
 var $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0;
 var $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0;
 var $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0;
 var $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0;
 var $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0;
 var $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0;
 var $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0;
 var $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0;
 var $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0;
 var $K12$0$i = 0, $K2$0$i$i = 0, $K8$0$i$i = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i$i$lcssa = 0, $R$1$i$lcssa = 0, $R$1$i9 = 0, $R$1$i9$lcssa = 0, $R$3$i = 0, $R$3$i$i = 0, $R$3$i11 = 0, $RP$1$i = 0, $RP$1$i$i = 0, $RP$1$i$i$lcssa = 0, $RP$1$i$lcssa = 0, $RP$1$i8 = 0, $RP$1$i8$lcssa = 0, $T$0$i = 0, $T$0$i$i = 0;
 var $T$0$i$i$lcssa = 0, $T$0$i$i$lcssa140 = 0, $T$0$i$lcssa = 0, $T$0$i$lcssa156 = 0, $T$0$i18$i = 0, $T$0$i18$i$lcssa = 0, $T$0$i18$i$lcssa139 = 0, $br$2$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i12 = 0, $exitcond$i$i = 0, $i$01$i$i = 0, $idx$0$i = 0, $nb$0 = 0, $not$$i$i = 0, $not$$i20$i = 0, $not$7$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0;
 var $or$cond$i17 = 0, $or$cond1$i = 0, $or$cond1$i16 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond2$i = 0, $or$cond48$i = 0, $or$cond5$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $p$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i5 = 0, $rsize$1$i = 0, $rsize$3$i = 0, $rsize$4$lcssa$i = 0, $rsize$412$i = 0, $rst$0$i = 0;
 var $rst$1$i = 0, $sizebits$0$$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$068$i = 0, $sp$068$i$lcssa = 0, $sp$167$i = 0, $sp$167$i$lcssa = 0, $ssize$0$i = 0, $ssize$2$ph$i = 0, $ssize$5$i = 0, $t$0$i = 0, $t$0$i4 = 0, $t$2$i = 0, $t$4$ph$i = 0, $t$4$v$4$i = 0, $t$411$i = 0, $tbase$746$i = 0, $tsize$745$i = 0;
 var $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i6 = 0, $v$1$i = 0, $v$3$i = 0, $v$4$lcssa$i = 0, $v$413$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($bytes>>>0)<(245);
 do {
  if ($0) {
   $1 = ($bytes>>>0)<(11);
   $2 = (($bytes) + 11)|0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = HEAP32[1908]|0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8|0)==(0);
   if (!($9)) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = (($11) + ($5))|0;
    $13 = $12 << 1;
    $14 = (7672 + ($13<<2)|0);
    $15 = ((($14)) + 8|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($14|0)==($18|0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      HEAP32[1908] = $22;
     } else {
      $23 = HEAP32[(7648)>>2]|0;
      $24 = ($18>>>0)<($23>>>0);
      if ($24) {
       _abort();
       // unreachable;
      }
      $25 = ((($18)) + 12|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($26|0)==($16|0);
      if ($27) {
       HEAP32[$25>>2] = $14;
       HEAP32[$15>>2] = $18;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = ((($16)) + 4|0);
    HEAP32[$30>>2] = $29;
    $31 = (($16) + ($28)|0);
    $32 = ((($31)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = $33 | 1;
    HEAP32[$32>>2] = $34;
    $$0 = $17;
    return ($$0|0);
   }
   $35 = HEAP32[(7640)>>2]|0;
   $36 = ($4>>>0)>($35>>>0);
   if ($36) {
    $37 = ($7|0)==(0);
    if (!($37)) {
     $38 = $7 << $5;
     $39 = 2 << $5;
     $40 = (0 - ($39))|0;
     $41 = $39 | $40;
     $42 = $38 & $41;
     $43 = (0 - ($42))|0;
     $44 = $42 & $43;
     $45 = (($44) + -1)|0;
     $46 = $45 >>> 12;
     $47 = $46 & 16;
     $48 = $45 >>> $47;
     $49 = $48 >>> 5;
     $50 = $49 & 8;
     $51 = $50 | $47;
     $52 = $48 >>> $50;
     $53 = $52 >>> 2;
     $54 = $53 & 4;
     $55 = $51 | $54;
     $56 = $52 >>> $54;
     $57 = $56 >>> 1;
     $58 = $57 & 2;
     $59 = $55 | $58;
     $60 = $56 >>> $58;
     $61 = $60 >>> 1;
     $62 = $61 & 1;
     $63 = $59 | $62;
     $64 = $60 >>> $62;
     $65 = (($63) + ($64))|0;
     $66 = $65 << 1;
     $67 = (7672 + ($66<<2)|0);
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($67|0)==($71|0);
     do {
      if ($72) {
       $73 = 1 << $65;
       $74 = $73 ^ -1;
       $75 = $6 & $74;
       HEAP32[1908] = $75;
       $89 = $35;
      } else {
       $76 = HEAP32[(7648)>>2]|0;
       $77 = ($71>>>0)<($76>>>0);
       if ($77) {
        _abort();
        // unreachable;
       }
       $78 = ((($71)) + 12|0);
       $79 = HEAP32[$78>>2]|0;
       $80 = ($79|0)==($69|0);
       if ($80) {
        HEAP32[$78>>2] = $67;
        HEAP32[$68>>2] = $71;
        $$pre = HEAP32[(7640)>>2]|0;
        $89 = $$pre;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $81 = $65 << 3;
     $82 = (($81) - ($4))|0;
     $83 = $4 | 3;
     $84 = ((($69)) + 4|0);
     HEAP32[$84>>2] = $83;
     $85 = (($69) + ($4)|0);
     $86 = $82 | 1;
     $87 = ((($85)) + 4|0);
     HEAP32[$87>>2] = $86;
     $88 = (($85) + ($82)|0);
     HEAP32[$88>>2] = $82;
     $90 = ($89|0)==(0);
     if (!($90)) {
      $91 = HEAP32[(7652)>>2]|0;
      $92 = $89 >>> 3;
      $93 = $92 << 1;
      $94 = (7672 + ($93<<2)|0);
      $95 = HEAP32[1908]|0;
      $96 = 1 << $92;
      $97 = $95 & $96;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $95 | $96;
       HEAP32[1908] = $99;
       $$pre71 = ((($94)) + 8|0);
       $$pre$phiZ2D = $$pre71;$F4$0 = $94;
      } else {
       $100 = ((($94)) + 8|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = HEAP32[(7648)>>2]|0;
       $103 = ($101>>>0)<($102>>>0);
       if ($103) {
        _abort();
        // unreachable;
       } else {
        $$pre$phiZ2D = $100;$F4$0 = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $91;
      $104 = ((($F4$0)) + 12|0);
      HEAP32[$104>>2] = $91;
      $105 = ((($91)) + 8|0);
      HEAP32[$105>>2] = $F4$0;
      $106 = ((($91)) + 12|0);
      HEAP32[$106>>2] = $94;
     }
     HEAP32[(7640)>>2] = $82;
     HEAP32[(7652)>>2] = $85;
     $$0 = $70;
     return ($$0|0);
    }
    $107 = HEAP32[(7636)>>2]|0;
    $108 = ($107|0)==(0);
    if ($108) {
     $nb$0 = $4;
    } else {
     $109 = (0 - ($107))|0;
     $110 = $107 & $109;
     $111 = (($110) + -1)|0;
     $112 = $111 >>> 12;
     $113 = $112 & 16;
     $114 = $111 >>> $113;
     $115 = $114 >>> 5;
     $116 = $115 & 8;
     $117 = $116 | $113;
     $118 = $114 >>> $116;
     $119 = $118 >>> 2;
     $120 = $119 & 4;
     $121 = $117 | $120;
     $122 = $118 >>> $120;
     $123 = $122 >>> 1;
     $124 = $123 & 2;
     $125 = $121 | $124;
     $126 = $122 >>> $124;
     $127 = $126 >>> 1;
     $128 = $127 & 1;
     $129 = $125 | $128;
     $130 = $126 >>> $128;
     $131 = (($129) + ($130))|0;
     $132 = (7936 + ($131<<2)|0);
     $133 = HEAP32[$132>>2]|0;
     $134 = ((($133)) + 4|0);
     $135 = HEAP32[$134>>2]|0;
     $136 = $135 & -8;
     $137 = (($136) - ($4))|0;
     $rsize$0$i = $137;$t$0$i = $133;$v$0$i = $133;
     while(1) {
      $138 = ((($t$0$i)) + 16|0);
      $139 = HEAP32[$138>>2]|0;
      $140 = ($139|0)==(0|0);
      if ($140) {
       $141 = ((($t$0$i)) + 20|0);
       $142 = HEAP32[$141>>2]|0;
       $143 = ($142|0)==(0|0);
       if ($143) {
        $rsize$0$i$lcssa = $rsize$0$i;$v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $145 = $142;
       }
      } else {
       $145 = $139;
      }
      $144 = ((($145)) + 4|0);
      $146 = HEAP32[$144>>2]|0;
      $147 = $146 & -8;
      $148 = (($147) - ($4))|0;
      $149 = ($148>>>0)<($rsize$0$i>>>0);
      $$rsize$0$i = $149 ? $148 : $rsize$0$i;
      $$v$0$i = $149 ? $145 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;$t$0$i = $145;$v$0$i = $$v$0$i;
     }
     $150 = HEAP32[(7648)>>2]|0;
     $151 = ($v$0$i$lcssa>>>0)<($150>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = (($v$0$i$lcssa) + ($4)|0);
     $153 = ($v$0$i$lcssa>>>0)<($152>>>0);
     if (!($153)) {
      _abort();
      // unreachable;
     }
     $154 = ((($v$0$i$lcssa)) + 24|0);
     $155 = HEAP32[$154>>2]|0;
     $156 = ((($v$0$i$lcssa)) + 12|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = ($157|0)==($v$0$i$lcssa|0);
     do {
      if ($158) {
       $168 = ((($v$0$i$lcssa)) + 20|0);
       $169 = HEAP32[$168>>2]|0;
       $170 = ($169|0)==(0|0);
       if ($170) {
        $171 = ((($v$0$i$lcssa)) + 16|0);
        $172 = HEAP32[$171>>2]|0;
        $173 = ($172|0)==(0|0);
        if ($173) {
         $R$3$i = 0;
         break;
        } else {
         $R$1$i = $172;$RP$1$i = $171;
        }
       } else {
        $R$1$i = $169;$RP$1$i = $168;
       }
       while(1) {
        $174 = ((($R$1$i)) + 20|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(0|0);
        if (!($176)) {
         $R$1$i = $175;$RP$1$i = $174;
         continue;
        }
        $177 = ((($R$1$i)) + 16|0);
        $178 = HEAP32[$177>>2]|0;
        $179 = ($178|0)==(0|0);
        if ($179) {
         $R$1$i$lcssa = $R$1$i;$RP$1$i$lcssa = $RP$1$i;
         break;
        } else {
         $R$1$i = $178;$RP$1$i = $177;
        }
       }
       $180 = ($RP$1$i$lcssa>>>0)<($150>>>0);
       if ($180) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$RP$1$i$lcssa>>2] = 0;
        $R$3$i = $R$1$i$lcssa;
        break;
       }
      } else {
       $159 = ((($v$0$i$lcssa)) + 8|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160>>>0)<($150>>>0);
       if ($161) {
        _abort();
        // unreachable;
       }
       $162 = ((($160)) + 12|0);
       $163 = HEAP32[$162>>2]|0;
       $164 = ($163|0)==($v$0$i$lcssa|0);
       if (!($164)) {
        _abort();
        // unreachable;
       }
       $165 = ((($157)) + 8|0);
       $166 = HEAP32[$165>>2]|0;
       $167 = ($166|0)==($v$0$i$lcssa|0);
       if ($167) {
        HEAP32[$162>>2] = $157;
        HEAP32[$165>>2] = $160;
        $R$3$i = $157;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $181 = ($155|0)==(0|0);
     do {
      if (!($181)) {
       $182 = ((($v$0$i$lcssa)) + 28|0);
       $183 = HEAP32[$182>>2]|0;
       $184 = (7936 + ($183<<2)|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($v$0$i$lcssa|0)==($185|0);
       if ($186) {
        HEAP32[$184>>2] = $R$3$i;
        $cond$i = ($R$3$i|0)==(0|0);
        if ($cond$i) {
         $187 = 1 << $183;
         $188 = $187 ^ -1;
         $189 = HEAP32[(7636)>>2]|0;
         $190 = $189 & $188;
         HEAP32[(7636)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(7648)>>2]|0;
        $192 = ($155>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($155)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($v$0$i$lcssa|0);
        if ($195) {
         HEAP32[$193>>2] = $R$3$i;
        } else {
         $196 = ((($155)) + 20|0);
         HEAP32[$196>>2] = $R$3$i;
        }
        $197 = ($R$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(7648)>>2]|0;
       $199 = ($R$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($R$3$i)) + 24|0);
       HEAP32[$200>>2] = $155;
       $201 = ((($v$0$i$lcssa)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($R$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $R$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($v$0$i$lcssa)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(7648)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($R$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $R$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($rsize$0$i$lcssa>>>0)<(16);
     if ($214) {
      $215 = (($rsize$0$i$lcssa) + ($4))|0;
      $216 = $215 | 3;
      $217 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($v$0$i$lcssa) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $4 | 3;
      $223 = ((($v$0$i$lcssa)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $rsize$0$i$lcssa | 1;
      $225 = ((($152)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($152) + ($rsize$0$i$lcssa)|0);
      HEAP32[$226>>2] = $rsize$0$i$lcssa;
      $227 = HEAP32[(7640)>>2]|0;
      $228 = ($227|0)==(0);
      if (!($228)) {
       $229 = HEAP32[(7652)>>2]|0;
       $230 = $227 >>> 3;
       $231 = $230 << 1;
       $232 = (7672 + ($231<<2)|0);
       $233 = HEAP32[1908]|0;
       $234 = 1 << $230;
       $235 = $233 & $234;
       $236 = ($235|0)==(0);
       if ($236) {
        $237 = $233 | $234;
        HEAP32[1908] = $237;
        $$pre$i = ((($232)) + 8|0);
        $$pre$phi$iZ2D = $$pre$i;$F1$0$i = $232;
       } else {
        $238 = ((($232)) + 8|0);
        $239 = HEAP32[$238>>2]|0;
        $240 = HEAP32[(7648)>>2]|0;
        $241 = ($239>>>0)<($240>>>0);
        if ($241) {
         _abort();
         // unreachable;
        } else {
         $$pre$phi$iZ2D = $238;$F1$0$i = $239;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $229;
       $242 = ((($F1$0$i)) + 12|0);
       HEAP32[$242>>2] = $229;
       $243 = ((($229)) + 8|0);
       HEAP32[$243>>2] = $F1$0$i;
       $244 = ((($229)) + 12|0);
       HEAP32[$244>>2] = $232;
      }
      HEAP32[(7640)>>2] = $rsize$0$i$lcssa;
      HEAP32[(7652)>>2] = $152;
     }
     $245 = ((($v$0$i$lcssa)) + 8|0);
     $$0 = $245;
     return ($$0|0);
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $246 = ($bytes>>>0)>(4294967231);
   if ($246) {
    $nb$0 = -1;
   } else {
    $247 = (($bytes) + 11)|0;
    $248 = $247 & -8;
    $249 = HEAP32[(7636)>>2]|0;
    $250 = ($249|0)==(0);
    if ($250) {
     $nb$0 = $248;
    } else {
     $251 = (0 - ($248))|0;
     $252 = $247 >>> 8;
     $253 = ($252|0)==(0);
     if ($253) {
      $idx$0$i = 0;
     } else {
      $254 = ($248>>>0)>(16777215);
      if ($254) {
       $idx$0$i = 31;
      } else {
       $255 = (($252) + 1048320)|0;
       $256 = $255 >>> 16;
       $257 = $256 & 8;
       $258 = $252 << $257;
       $259 = (($258) + 520192)|0;
       $260 = $259 >>> 16;
       $261 = $260 & 4;
       $262 = $261 | $257;
       $263 = $258 << $261;
       $264 = (($263) + 245760)|0;
       $265 = $264 >>> 16;
       $266 = $265 & 2;
       $267 = $262 | $266;
       $268 = (14 - ($267))|0;
       $269 = $263 << $266;
       $270 = $269 >>> 15;
       $271 = (($268) + ($270))|0;
       $272 = $271 << 1;
       $273 = (($271) + 7)|0;
       $274 = $248 >>> $273;
       $275 = $274 & 1;
       $276 = $275 | $272;
       $idx$0$i = $276;
      }
     }
     $277 = (7936 + ($idx$0$i<<2)|0);
     $278 = HEAP32[$277>>2]|0;
     $279 = ($278|0)==(0|0);
     L123: do {
      if ($279) {
       $rsize$3$i = $251;$t$2$i = 0;$v$3$i = 0;
       label = 86;
      } else {
       $280 = ($idx$0$i|0)==(31);
       $281 = $idx$0$i >>> 1;
       $282 = (25 - ($281))|0;
       $283 = $280 ? 0 : $282;
       $284 = $248 << $283;
       $rsize$0$i5 = $251;$rst$0$i = 0;$sizebits$0$i = $284;$t$0$i4 = $278;$v$0$i6 = 0;
       while(1) {
        $285 = ((($t$0$i4)) + 4|0);
        $286 = HEAP32[$285>>2]|0;
        $287 = $286 & -8;
        $288 = (($287) - ($248))|0;
        $289 = ($288>>>0)<($rsize$0$i5>>>0);
        if ($289) {
         $290 = ($287|0)==($248|0);
         if ($290) {
          $rsize$412$i = $288;$t$411$i = $t$0$i4;$v$413$i = $t$0$i4;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $288;$v$1$i = $t$0$i4;
         }
        } else {
         $rsize$1$i = $rsize$0$i5;$v$1$i = $v$0$i6;
        }
        $291 = ((($t$0$i4)) + 20|0);
        $292 = HEAP32[$291>>2]|0;
        $293 = $sizebits$0$i >>> 31;
        $294 = (((($t$0$i4)) + 16|0) + ($293<<2)|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($292|0)==(0|0);
        $297 = ($292|0)==($295|0);
        $or$cond1$i = $296 | $297;
        $rst$1$i = $or$cond1$i ? $rst$0$i : $292;
        $298 = ($295|0)==(0|0);
        $299 = $298&1;
        $300 = $299 ^ 1;
        $sizebits$0$$i = $sizebits$0$i << $300;
        if ($298) {
         $rsize$3$i = $rsize$1$i;$t$2$i = $rst$1$i;$v$3$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i5 = $rsize$1$i;$rst$0$i = $rst$1$i;$sizebits$0$i = $sizebits$0$$i;$t$0$i4 = $295;$v$0$i6 = $v$1$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $301 = ($t$2$i|0)==(0|0);
      $302 = ($v$3$i|0)==(0|0);
      $or$cond$i = $301 & $302;
      if ($or$cond$i) {
       $303 = 2 << $idx$0$i;
       $304 = (0 - ($303))|0;
       $305 = $303 | $304;
       $306 = $249 & $305;
       $307 = ($306|0)==(0);
       if ($307) {
        $nb$0 = $248;
        break;
       }
       $308 = (0 - ($306))|0;
       $309 = $306 & $308;
       $310 = (($309) + -1)|0;
       $311 = $310 >>> 12;
       $312 = $311 & 16;
       $313 = $310 >>> $312;
       $314 = $313 >>> 5;
       $315 = $314 & 8;
       $316 = $315 | $312;
       $317 = $313 >>> $315;
       $318 = $317 >>> 2;
       $319 = $318 & 4;
       $320 = $316 | $319;
       $321 = $317 >>> $319;
       $322 = $321 >>> 1;
       $323 = $322 & 2;
       $324 = $320 | $323;
       $325 = $321 >>> $323;
       $326 = $325 >>> 1;
       $327 = $326 & 1;
       $328 = $324 | $327;
       $329 = $325 >>> $327;
       $330 = (($328) + ($329))|0;
       $331 = (7936 + ($330<<2)|0);
       $332 = HEAP32[$331>>2]|0;
       $t$4$ph$i = $332;
      } else {
       $t$4$ph$i = $t$2$i;
      }
      $333 = ($t$4$ph$i|0)==(0|0);
      if ($333) {
       $rsize$4$lcssa$i = $rsize$3$i;$v$4$lcssa$i = $v$3$i;
      } else {
       $rsize$412$i = $rsize$3$i;$t$411$i = $t$4$ph$i;$v$413$i = $v$3$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $334 = ((($t$411$i)) + 4|0);
       $335 = HEAP32[$334>>2]|0;
       $336 = $335 & -8;
       $337 = (($336) - ($248))|0;
       $338 = ($337>>>0)<($rsize$412$i>>>0);
       $$rsize$4$i = $338 ? $337 : $rsize$412$i;
       $t$4$v$4$i = $338 ? $t$411$i : $v$413$i;
       $339 = ((($t$411$i)) + 16|0);
       $340 = HEAP32[$339>>2]|0;
       $341 = ($340|0)==(0|0);
       if (!($341)) {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $340;$v$413$i = $t$4$v$4$i;
        label = 90;
        continue;
       }
       $342 = ((($t$411$i)) + 20|0);
       $343 = HEAP32[$342>>2]|0;
       $344 = ($343|0)==(0|0);
       if ($344) {
        $rsize$4$lcssa$i = $$rsize$4$i;$v$4$lcssa$i = $t$4$v$4$i;
        break;
       } else {
        $rsize$412$i = $$rsize$4$i;$t$411$i = $343;$v$413$i = $t$4$v$4$i;
        label = 90;
       }
      }
     }
     $345 = ($v$4$lcssa$i|0)==(0|0);
     if ($345) {
      $nb$0 = $248;
     } else {
      $346 = HEAP32[(7640)>>2]|0;
      $347 = (($346) - ($248))|0;
      $348 = ($rsize$4$lcssa$i>>>0)<($347>>>0);
      if ($348) {
       $349 = HEAP32[(7648)>>2]|0;
       $350 = ($v$4$lcssa$i>>>0)<($349>>>0);
       if ($350) {
        _abort();
        // unreachable;
       }
       $351 = (($v$4$lcssa$i) + ($248)|0);
       $352 = ($v$4$lcssa$i>>>0)<($351>>>0);
       if (!($352)) {
        _abort();
        // unreachable;
       }
       $353 = ((($v$4$lcssa$i)) + 24|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ((($v$4$lcssa$i)) + 12|0);
       $356 = HEAP32[$355>>2]|0;
       $357 = ($356|0)==($v$4$lcssa$i|0);
       do {
        if ($357) {
         $367 = ((($v$4$lcssa$i)) + 20|0);
         $368 = HEAP32[$367>>2]|0;
         $369 = ($368|0)==(0|0);
         if ($369) {
          $370 = ((($v$4$lcssa$i)) + 16|0);
          $371 = HEAP32[$370>>2]|0;
          $372 = ($371|0)==(0|0);
          if ($372) {
           $R$3$i11 = 0;
           break;
          } else {
           $R$1$i9 = $371;$RP$1$i8 = $370;
          }
         } else {
          $R$1$i9 = $368;$RP$1$i8 = $367;
         }
         while(1) {
          $373 = ((($R$1$i9)) + 20|0);
          $374 = HEAP32[$373>>2]|0;
          $375 = ($374|0)==(0|0);
          if (!($375)) {
           $R$1$i9 = $374;$RP$1$i8 = $373;
           continue;
          }
          $376 = ((($R$1$i9)) + 16|0);
          $377 = HEAP32[$376>>2]|0;
          $378 = ($377|0)==(0|0);
          if ($378) {
           $R$1$i9$lcssa = $R$1$i9;$RP$1$i8$lcssa = $RP$1$i8;
           break;
          } else {
           $R$1$i9 = $377;$RP$1$i8 = $376;
          }
         }
         $379 = ($RP$1$i8$lcssa>>>0)<($349>>>0);
         if ($379) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$RP$1$i8$lcssa>>2] = 0;
          $R$3$i11 = $R$1$i9$lcssa;
          break;
         }
        } else {
         $358 = ((($v$4$lcssa$i)) + 8|0);
         $359 = HEAP32[$358>>2]|0;
         $360 = ($359>>>0)<($349>>>0);
         if ($360) {
          _abort();
          // unreachable;
         }
         $361 = ((($359)) + 12|0);
         $362 = HEAP32[$361>>2]|0;
         $363 = ($362|0)==($v$4$lcssa$i|0);
         if (!($363)) {
          _abort();
          // unreachable;
         }
         $364 = ((($356)) + 8|0);
         $365 = HEAP32[$364>>2]|0;
         $366 = ($365|0)==($v$4$lcssa$i|0);
         if ($366) {
          HEAP32[$361>>2] = $356;
          HEAP32[$364>>2] = $359;
          $R$3$i11 = $356;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $380 = ($354|0)==(0|0);
       do {
        if (!($380)) {
         $381 = ((($v$4$lcssa$i)) + 28|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = (7936 + ($382<<2)|0);
         $384 = HEAP32[$383>>2]|0;
         $385 = ($v$4$lcssa$i|0)==($384|0);
         if ($385) {
          HEAP32[$383>>2] = $R$3$i11;
          $cond$i12 = ($R$3$i11|0)==(0|0);
          if ($cond$i12) {
           $386 = 1 << $382;
           $387 = $386 ^ -1;
           $388 = HEAP32[(7636)>>2]|0;
           $389 = $388 & $387;
           HEAP32[(7636)>>2] = $389;
           break;
          }
         } else {
          $390 = HEAP32[(7648)>>2]|0;
          $391 = ($354>>>0)<($390>>>0);
          if ($391) {
           _abort();
           // unreachable;
          }
          $392 = ((($354)) + 16|0);
          $393 = HEAP32[$392>>2]|0;
          $394 = ($393|0)==($v$4$lcssa$i|0);
          if ($394) {
           HEAP32[$392>>2] = $R$3$i11;
          } else {
           $395 = ((($354)) + 20|0);
           HEAP32[$395>>2] = $R$3$i11;
          }
          $396 = ($R$3$i11|0)==(0|0);
          if ($396) {
           break;
          }
         }
         $397 = HEAP32[(7648)>>2]|0;
         $398 = ($R$3$i11>>>0)<($397>>>0);
         if ($398) {
          _abort();
          // unreachable;
         }
         $399 = ((($R$3$i11)) + 24|0);
         HEAP32[$399>>2] = $354;
         $400 = ((($v$4$lcssa$i)) + 16|0);
         $401 = HEAP32[$400>>2]|0;
         $402 = ($401|0)==(0|0);
         do {
          if (!($402)) {
           $403 = ($401>>>0)<($397>>>0);
           if ($403) {
            _abort();
            // unreachable;
           } else {
            $404 = ((($R$3$i11)) + 16|0);
            HEAP32[$404>>2] = $401;
            $405 = ((($401)) + 24|0);
            HEAP32[$405>>2] = $R$3$i11;
            break;
           }
          }
         } while(0);
         $406 = ((($v$4$lcssa$i)) + 20|0);
         $407 = HEAP32[$406>>2]|0;
         $408 = ($407|0)==(0|0);
         if (!($408)) {
          $409 = HEAP32[(7648)>>2]|0;
          $410 = ($407>>>0)<($409>>>0);
          if ($410) {
           _abort();
           // unreachable;
          } else {
           $411 = ((($R$3$i11)) + 20|0);
           HEAP32[$411>>2] = $407;
           $412 = ((($407)) + 24|0);
           HEAP32[$412>>2] = $R$3$i11;
           break;
          }
         }
        }
       } while(0);
       $413 = ($rsize$4$lcssa$i>>>0)<(16);
       do {
        if ($413) {
         $414 = (($rsize$4$lcssa$i) + ($248))|0;
         $415 = $414 | 3;
         $416 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$416>>2] = $415;
         $417 = (($v$4$lcssa$i) + ($414)|0);
         $418 = ((($417)) + 4|0);
         $419 = HEAP32[$418>>2]|0;
         $420 = $419 | 1;
         HEAP32[$418>>2] = $420;
        } else {
         $421 = $248 | 3;
         $422 = ((($v$4$lcssa$i)) + 4|0);
         HEAP32[$422>>2] = $421;
         $423 = $rsize$4$lcssa$i | 1;
         $424 = ((($351)) + 4|0);
         HEAP32[$424>>2] = $423;
         $425 = (($351) + ($rsize$4$lcssa$i)|0);
         HEAP32[$425>>2] = $rsize$4$lcssa$i;
         $426 = $rsize$4$lcssa$i >>> 3;
         $427 = ($rsize$4$lcssa$i>>>0)<(256);
         if ($427) {
          $428 = $426 << 1;
          $429 = (7672 + ($428<<2)|0);
          $430 = HEAP32[1908]|0;
          $431 = 1 << $426;
          $432 = $430 & $431;
          $433 = ($432|0)==(0);
          if ($433) {
           $434 = $430 | $431;
           HEAP32[1908] = $434;
           $$pre$i13 = ((($429)) + 8|0);
           $$pre$phi$i14Z2D = $$pre$i13;$F5$0$i = $429;
          } else {
           $435 = ((($429)) + 8|0);
           $436 = HEAP32[$435>>2]|0;
           $437 = HEAP32[(7648)>>2]|0;
           $438 = ($436>>>0)<($437>>>0);
           if ($438) {
            _abort();
            // unreachable;
           } else {
            $$pre$phi$i14Z2D = $435;$F5$0$i = $436;
           }
          }
          HEAP32[$$pre$phi$i14Z2D>>2] = $351;
          $439 = ((($F5$0$i)) + 12|0);
          HEAP32[$439>>2] = $351;
          $440 = ((($351)) + 8|0);
          HEAP32[$440>>2] = $F5$0$i;
          $441 = ((($351)) + 12|0);
          HEAP32[$441>>2] = $429;
          break;
         }
         $442 = $rsize$4$lcssa$i >>> 8;
         $443 = ($442|0)==(0);
         if ($443) {
          $I7$0$i = 0;
         } else {
          $444 = ($rsize$4$lcssa$i>>>0)>(16777215);
          if ($444) {
           $I7$0$i = 31;
          } else {
           $445 = (($442) + 1048320)|0;
           $446 = $445 >>> 16;
           $447 = $446 & 8;
           $448 = $442 << $447;
           $449 = (($448) + 520192)|0;
           $450 = $449 >>> 16;
           $451 = $450 & 4;
           $452 = $451 | $447;
           $453 = $448 << $451;
           $454 = (($453) + 245760)|0;
           $455 = $454 >>> 16;
           $456 = $455 & 2;
           $457 = $452 | $456;
           $458 = (14 - ($457))|0;
           $459 = $453 << $456;
           $460 = $459 >>> 15;
           $461 = (($458) + ($460))|0;
           $462 = $461 << 1;
           $463 = (($461) + 7)|0;
           $464 = $rsize$4$lcssa$i >>> $463;
           $465 = $464 & 1;
           $466 = $465 | $462;
           $I7$0$i = $466;
          }
         }
         $467 = (7936 + ($I7$0$i<<2)|0);
         $468 = ((($351)) + 28|0);
         HEAP32[$468>>2] = $I7$0$i;
         $469 = ((($351)) + 16|0);
         $470 = ((($469)) + 4|0);
         HEAP32[$470>>2] = 0;
         HEAP32[$469>>2] = 0;
         $471 = HEAP32[(7636)>>2]|0;
         $472 = 1 << $I7$0$i;
         $473 = $471 & $472;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = $471 | $472;
          HEAP32[(7636)>>2] = $475;
          HEAP32[$467>>2] = $351;
          $476 = ((($351)) + 24|0);
          HEAP32[$476>>2] = $467;
          $477 = ((($351)) + 12|0);
          HEAP32[$477>>2] = $351;
          $478 = ((($351)) + 8|0);
          HEAP32[$478>>2] = $351;
          break;
         }
         $479 = HEAP32[$467>>2]|0;
         $480 = ($I7$0$i|0)==(31);
         $481 = $I7$0$i >>> 1;
         $482 = (25 - ($481))|0;
         $483 = $480 ? 0 : $482;
         $484 = $rsize$4$lcssa$i << $483;
         $K12$0$i = $484;$T$0$i = $479;
         while(1) {
          $485 = ((($T$0$i)) + 4|0);
          $486 = HEAP32[$485>>2]|0;
          $487 = $486 & -8;
          $488 = ($487|0)==($rsize$4$lcssa$i|0);
          if ($488) {
           $T$0$i$lcssa = $T$0$i;
           label = 148;
           break;
          }
          $489 = $K12$0$i >>> 31;
          $490 = (((($T$0$i)) + 16|0) + ($489<<2)|0);
          $491 = $K12$0$i << 1;
          $492 = HEAP32[$490>>2]|0;
          $493 = ($492|0)==(0|0);
          if ($493) {
           $$lcssa157 = $490;$T$0$i$lcssa156 = $T$0$i;
           label = 145;
           break;
          } else {
           $K12$0$i = $491;$T$0$i = $492;
          }
         }
         if ((label|0) == 145) {
          $494 = HEAP32[(7648)>>2]|0;
          $495 = ($$lcssa157>>>0)<($494>>>0);
          if ($495) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$$lcssa157>>2] = $351;
           $496 = ((($351)) + 24|0);
           HEAP32[$496>>2] = $T$0$i$lcssa156;
           $497 = ((($351)) + 12|0);
           HEAP32[$497>>2] = $351;
           $498 = ((($351)) + 8|0);
           HEAP32[$498>>2] = $351;
           break;
          }
         }
         else if ((label|0) == 148) {
          $499 = ((($T$0$i$lcssa)) + 8|0);
          $500 = HEAP32[$499>>2]|0;
          $501 = HEAP32[(7648)>>2]|0;
          $502 = ($500>>>0)>=($501>>>0);
          $not$7$i = ($T$0$i$lcssa>>>0)>=($501>>>0);
          $503 = $502 & $not$7$i;
          if ($503) {
           $504 = ((($500)) + 12|0);
           HEAP32[$504>>2] = $351;
           HEAP32[$499>>2] = $351;
           $505 = ((($351)) + 8|0);
           HEAP32[$505>>2] = $500;
           $506 = ((($351)) + 12|0);
           HEAP32[$506>>2] = $T$0$i$lcssa;
           $507 = ((($351)) + 24|0);
           HEAP32[$507>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $508 = ((($v$4$lcssa$i)) + 8|0);
       $$0 = $508;
       return ($$0|0);
      } else {
       $nb$0 = $248;
      }
     }
    }
   }
  }
 } while(0);
 $509 = HEAP32[(7640)>>2]|0;
 $510 = ($509>>>0)<($nb$0>>>0);
 if (!($510)) {
  $511 = (($509) - ($nb$0))|0;
  $512 = HEAP32[(7652)>>2]|0;
  $513 = ($511>>>0)>(15);
  if ($513) {
   $514 = (($512) + ($nb$0)|0);
   HEAP32[(7652)>>2] = $514;
   HEAP32[(7640)>>2] = $511;
   $515 = $511 | 1;
   $516 = ((($514)) + 4|0);
   HEAP32[$516>>2] = $515;
   $517 = (($514) + ($511)|0);
   HEAP32[$517>>2] = $511;
   $518 = $nb$0 | 3;
   $519 = ((($512)) + 4|0);
   HEAP32[$519>>2] = $518;
  } else {
   HEAP32[(7640)>>2] = 0;
   HEAP32[(7652)>>2] = 0;
   $520 = $509 | 3;
   $521 = ((($512)) + 4|0);
   HEAP32[$521>>2] = $520;
   $522 = (($512) + ($509)|0);
   $523 = ((($522)) + 4|0);
   $524 = HEAP32[$523>>2]|0;
   $525 = $524 | 1;
   HEAP32[$523>>2] = $525;
  }
  $526 = ((($512)) + 8|0);
  $$0 = $526;
  return ($$0|0);
 }
 $527 = HEAP32[(7644)>>2]|0;
 $528 = ($527>>>0)>($nb$0>>>0);
 if ($528) {
  $529 = (($527) - ($nb$0))|0;
  HEAP32[(7644)>>2] = $529;
  $530 = HEAP32[(7656)>>2]|0;
  $531 = (($530) + ($nb$0)|0);
  HEAP32[(7656)>>2] = $531;
  $532 = $529 | 1;
  $533 = ((($531)) + 4|0);
  HEAP32[$533>>2] = $532;
  $534 = $nb$0 | 3;
  $535 = ((($530)) + 4|0);
  HEAP32[$535>>2] = $534;
  $536 = ((($530)) + 8|0);
  $$0 = $536;
  return ($$0|0);
 }
 $537 = HEAP32[2026]|0;
 $538 = ($537|0)==(0);
 do {
  if ($538) {
   $539 = (_sysconf(30)|0);
   $540 = (($539) + -1)|0;
   $541 = $540 & $539;
   $542 = ($541|0)==(0);
   if ($542) {
    HEAP32[(8112)>>2] = $539;
    HEAP32[(8108)>>2] = $539;
    HEAP32[(8116)>>2] = -1;
    HEAP32[(8120)>>2] = -1;
    HEAP32[(8124)>>2] = 0;
    HEAP32[(8076)>>2] = 0;
    $543 = (_time((0|0))|0);
    $544 = $543 & -16;
    $545 = $544 ^ 1431655768;
    HEAP32[2026] = $545;
    break;
   } else {
    _abort();
    // unreachable;
   }
  }
 } while(0);
 $546 = (($nb$0) + 48)|0;
 $547 = HEAP32[(8112)>>2]|0;
 $548 = (($nb$0) + 47)|0;
 $549 = (($547) + ($548))|0;
 $550 = (0 - ($547))|0;
 $551 = $549 & $550;
 $552 = ($551>>>0)>($nb$0>>>0);
 if (!($552)) {
  $$0 = 0;
  return ($$0|0);
 }
 $553 = HEAP32[(8072)>>2]|0;
 $554 = ($553|0)==(0);
 if (!($554)) {
  $555 = HEAP32[(8064)>>2]|0;
  $556 = (($555) + ($551))|0;
  $557 = ($556>>>0)<=($555>>>0);
  $558 = ($556>>>0)>($553>>>0);
  $or$cond1$i16 = $557 | $558;
  if ($or$cond1$i16) {
   $$0 = 0;
   return ($$0|0);
  }
 }
 $559 = HEAP32[(8076)>>2]|0;
 $560 = $559 & 4;
 $561 = ($560|0)==(0);
 L257: do {
  if ($561) {
   $562 = HEAP32[(7656)>>2]|0;
   $563 = ($562|0)==(0|0);
   L259: do {
    if ($563) {
     label = 173;
    } else {
     $sp$0$i$i = (8080);
     while(1) {
      $564 = HEAP32[$sp$0$i$i>>2]|0;
      $565 = ($564>>>0)>($562>>>0);
      if (!($565)) {
       $566 = ((($sp$0$i$i)) + 4|0);
       $567 = HEAP32[$566>>2]|0;
       $568 = (($564) + ($567)|0);
       $569 = ($568>>>0)>($562>>>0);
       if ($569) {
        $$lcssa153 = $sp$0$i$i;$$lcssa155 = $566;
        break;
       }
      }
      $570 = ((($sp$0$i$i)) + 8|0);
      $571 = HEAP32[$570>>2]|0;
      $572 = ($571|0)==(0|0);
      if ($572) {
       label = 173;
       break L259;
      } else {
       $sp$0$i$i = $571;
      }
     }
     $595 = HEAP32[(7644)>>2]|0;
     $596 = (($549) - ($595))|0;
     $597 = $596 & $550;
     $598 = ($597>>>0)<(2147483647);
     if ($598) {
      $599 = (_sbrk(($597|0))|0);
      $600 = HEAP32[$$lcssa153>>2]|0;
      $601 = HEAP32[$$lcssa155>>2]|0;
      $602 = (($600) + ($601)|0);
      $603 = ($599|0)==($602|0);
      if ($603) {
       $604 = ($599|0)==((-1)|0);
       if (!($604)) {
        $tbase$746$i = $599;$tsize$745$i = $597;
        label = 193;
        break L257;
       }
      } else {
       $br$2$ph$i = $599;$ssize$2$ph$i = $597;
       label = 183;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 173) {
     $573 = (_sbrk(0)|0);
     $574 = ($573|0)==((-1)|0);
     if (!($574)) {
      $575 = $573;
      $576 = HEAP32[(8108)>>2]|0;
      $577 = (($576) + -1)|0;
      $578 = $577 & $575;
      $579 = ($578|0)==(0);
      if ($579) {
       $ssize$0$i = $551;
      } else {
       $580 = (($577) + ($575))|0;
       $581 = (0 - ($576))|0;
       $582 = $580 & $581;
       $583 = (($551) - ($575))|0;
       $584 = (($583) + ($582))|0;
       $ssize$0$i = $584;
      }
      $585 = HEAP32[(8064)>>2]|0;
      $586 = (($585) + ($ssize$0$i))|0;
      $587 = ($ssize$0$i>>>0)>($nb$0>>>0);
      $588 = ($ssize$0$i>>>0)<(2147483647);
      $or$cond$i17 = $587 & $588;
      if ($or$cond$i17) {
       $589 = HEAP32[(8072)>>2]|0;
       $590 = ($589|0)==(0);
       if (!($590)) {
        $591 = ($586>>>0)<=($585>>>0);
        $592 = ($586>>>0)>($589>>>0);
        $or$cond2$i = $591 | $592;
        if ($or$cond2$i) {
         break;
        }
       }
       $593 = (_sbrk(($ssize$0$i|0))|0);
       $594 = ($593|0)==($573|0);
       if ($594) {
        $tbase$746$i = $573;$tsize$745$i = $ssize$0$i;
        label = 193;
        break L257;
       } else {
        $br$2$ph$i = $593;$ssize$2$ph$i = $ssize$0$i;
        label = 183;
       }
      }
     }
    }
   } while(0);
   L279: do {
    if ((label|0) == 183) {
     $605 = (0 - ($ssize$2$ph$i))|0;
     $606 = ($br$2$ph$i|0)!=((-1)|0);
     $607 = ($ssize$2$ph$i>>>0)<(2147483647);
     $or$cond7$i = $607 & $606;
     $608 = ($546>>>0)>($ssize$2$ph$i>>>0);
     $or$cond8$i = $608 & $or$cond7$i;
     do {
      if ($or$cond8$i) {
       $609 = HEAP32[(8112)>>2]|0;
       $610 = (($548) - ($ssize$2$ph$i))|0;
       $611 = (($610) + ($609))|0;
       $612 = (0 - ($609))|0;
       $613 = $611 & $612;
       $614 = ($613>>>0)<(2147483647);
       if ($614) {
        $615 = (_sbrk(($613|0))|0);
        $616 = ($615|0)==((-1)|0);
        if ($616) {
         (_sbrk(($605|0))|0);
         break L279;
        } else {
         $617 = (($613) + ($ssize$2$ph$i))|0;
         $ssize$5$i = $617;
         break;
        }
       } else {
        $ssize$5$i = $ssize$2$ph$i;
       }
      } else {
       $ssize$5$i = $ssize$2$ph$i;
      }
     } while(0);
     $618 = ($br$2$ph$i|0)==((-1)|0);
     if (!($618)) {
      $tbase$746$i = $br$2$ph$i;$tsize$745$i = $ssize$5$i;
      label = 193;
      break L257;
     }
    }
   } while(0);
   $619 = HEAP32[(8076)>>2]|0;
   $620 = $619 | 4;
   HEAP32[(8076)>>2] = $620;
   label = 190;
  } else {
   label = 190;
  }
 } while(0);
 if ((label|0) == 190) {
  $621 = ($551>>>0)<(2147483647);
  if ($621) {
   $622 = (_sbrk(($551|0))|0);
   $623 = (_sbrk(0)|0);
   $624 = ($622|0)!=((-1)|0);
   $625 = ($623|0)!=((-1)|0);
   $or$cond5$i = $624 & $625;
   $626 = ($622>>>0)<($623>>>0);
   $or$cond10$i = $626 & $or$cond5$i;
   if ($or$cond10$i) {
    $627 = $623;
    $628 = $622;
    $629 = (($627) - ($628))|0;
    $630 = (($nb$0) + 40)|0;
    $$not$i = ($629>>>0)>($630>>>0);
    if ($$not$i) {
     $tbase$746$i = $622;$tsize$745$i = $629;
     label = 193;
    }
   }
  }
 }
 if ((label|0) == 193) {
  $631 = HEAP32[(8064)>>2]|0;
  $632 = (($631) + ($tsize$745$i))|0;
  HEAP32[(8064)>>2] = $632;
  $633 = HEAP32[(8068)>>2]|0;
  $634 = ($632>>>0)>($633>>>0);
  if ($634) {
   HEAP32[(8068)>>2] = $632;
  }
  $635 = HEAP32[(7656)>>2]|0;
  $636 = ($635|0)==(0|0);
  do {
   if ($636) {
    $637 = HEAP32[(7648)>>2]|0;
    $638 = ($637|0)==(0|0);
    $639 = ($tbase$746$i>>>0)<($637>>>0);
    $or$cond11$i = $638 | $639;
    if ($or$cond11$i) {
     HEAP32[(7648)>>2] = $tbase$746$i;
    }
    HEAP32[(8080)>>2] = $tbase$746$i;
    HEAP32[(8084)>>2] = $tsize$745$i;
    HEAP32[(8092)>>2] = 0;
    $640 = HEAP32[2026]|0;
    HEAP32[(7668)>>2] = $640;
    HEAP32[(7664)>>2] = -1;
    $i$01$i$i = 0;
    while(1) {
     $641 = $i$01$i$i << 1;
     $642 = (7672 + ($641<<2)|0);
     $643 = ((($642)) + 12|0);
     HEAP32[$643>>2] = $642;
     $644 = ((($642)) + 8|0);
     HEAP32[$644>>2] = $642;
     $645 = (($i$01$i$i) + 1)|0;
     $exitcond$i$i = ($645|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $i$01$i$i = $645;
     }
    }
    $646 = (($tsize$745$i) + -40)|0;
    $647 = ((($tbase$746$i)) + 8|0);
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649|0)==(0);
    $651 = (0 - ($648))|0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = (($tbase$746$i) + ($653)|0);
    $655 = (($646) - ($653))|0;
    HEAP32[(7656)>>2] = $654;
    HEAP32[(7644)>>2] = $655;
    $656 = $655 | 1;
    $657 = ((($654)) + 4|0);
    HEAP32[$657>>2] = $656;
    $658 = (($654) + ($655)|0);
    $659 = ((($658)) + 4|0);
    HEAP32[$659>>2] = 40;
    $660 = HEAP32[(8120)>>2]|0;
    HEAP32[(7660)>>2] = $660;
   } else {
    $sp$068$i = (8080);
    while(1) {
     $661 = HEAP32[$sp$068$i>>2]|0;
     $662 = ((($sp$068$i)) + 4|0);
     $663 = HEAP32[$662>>2]|0;
     $664 = (($661) + ($663)|0);
     $665 = ($tbase$746$i|0)==($664|0);
     if ($665) {
      $$lcssa147 = $661;$$lcssa149 = $662;$$lcssa151 = $663;$sp$068$i$lcssa = $sp$068$i;
      label = 203;
      break;
     }
     $666 = ((($sp$068$i)) + 8|0);
     $667 = HEAP32[$666>>2]|0;
     $668 = ($667|0)==(0|0);
     if ($668) {
      break;
     } else {
      $sp$068$i = $667;
     }
    }
    if ((label|0) == 203) {
     $669 = ((($sp$068$i$lcssa)) + 12|0);
     $670 = HEAP32[$669>>2]|0;
     $671 = $670 & 8;
     $672 = ($671|0)==(0);
     if ($672) {
      $673 = ($635>>>0)>=($$lcssa147>>>0);
      $674 = ($635>>>0)<($tbase$746$i>>>0);
      $or$cond48$i = $674 & $673;
      if ($or$cond48$i) {
       $675 = (($$lcssa151) + ($tsize$745$i))|0;
       HEAP32[$$lcssa149>>2] = $675;
       $676 = HEAP32[(7644)>>2]|0;
       $677 = ((($635)) + 8|0);
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679|0)==(0);
       $681 = (0 - ($678))|0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = (($635) + ($683)|0);
       $685 = (($tsize$745$i) - ($683))|0;
       $686 = (($685) + ($676))|0;
       HEAP32[(7656)>>2] = $684;
       HEAP32[(7644)>>2] = $686;
       $687 = $686 | 1;
       $688 = ((($684)) + 4|0);
       HEAP32[$688>>2] = $687;
       $689 = (($684) + ($686)|0);
       $690 = ((($689)) + 4|0);
       HEAP32[$690>>2] = 40;
       $691 = HEAP32[(8120)>>2]|0;
       HEAP32[(7660)>>2] = $691;
       break;
      }
     }
    }
    $692 = HEAP32[(7648)>>2]|0;
    $693 = ($tbase$746$i>>>0)<($692>>>0);
    if ($693) {
     HEAP32[(7648)>>2] = $tbase$746$i;
     $757 = $tbase$746$i;
    } else {
     $757 = $692;
    }
    $694 = (($tbase$746$i) + ($tsize$745$i)|0);
    $sp$167$i = (8080);
    while(1) {
     $695 = HEAP32[$sp$167$i>>2]|0;
     $696 = ($695|0)==($694|0);
     if ($696) {
      $$lcssa144 = $sp$167$i;$sp$167$i$lcssa = $sp$167$i;
      label = 211;
      break;
     }
     $697 = ((($sp$167$i)) + 8|0);
     $698 = HEAP32[$697>>2]|0;
     $699 = ($698|0)==(0|0);
     if ($699) {
      $sp$0$i$i$i = (8080);
      break;
     } else {
      $sp$167$i = $698;
     }
    }
    if ((label|0) == 211) {
     $700 = ((($sp$167$i$lcssa)) + 12|0);
     $701 = HEAP32[$700>>2]|0;
     $702 = $701 & 8;
     $703 = ($702|0)==(0);
     if ($703) {
      HEAP32[$$lcssa144>>2] = $tbase$746$i;
      $704 = ((($sp$167$i$lcssa)) + 4|0);
      $705 = HEAP32[$704>>2]|0;
      $706 = (($705) + ($tsize$745$i))|0;
      HEAP32[$704>>2] = $706;
      $707 = ((($tbase$746$i)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($tbase$746$i) + ($713)|0);
      $715 = ((($694)) + 8|0);
      $716 = $715;
      $717 = $716 & 7;
      $718 = ($717|0)==(0);
      $719 = (0 - ($716))|0;
      $720 = $719 & 7;
      $721 = $718 ? 0 : $720;
      $722 = (($694) + ($721)|0);
      $723 = $722;
      $724 = $714;
      $725 = (($723) - ($724))|0;
      $726 = (($714) + ($nb$0)|0);
      $727 = (($725) - ($nb$0))|0;
      $728 = $nb$0 | 3;
      $729 = ((($714)) + 4|0);
      HEAP32[$729>>2] = $728;
      $730 = ($722|0)==($635|0);
      do {
       if ($730) {
        $731 = HEAP32[(7644)>>2]|0;
        $732 = (($731) + ($727))|0;
        HEAP32[(7644)>>2] = $732;
        HEAP32[(7656)>>2] = $726;
        $733 = $732 | 1;
        $734 = ((($726)) + 4|0);
        HEAP32[$734>>2] = $733;
       } else {
        $735 = HEAP32[(7652)>>2]|0;
        $736 = ($722|0)==($735|0);
        if ($736) {
         $737 = HEAP32[(7640)>>2]|0;
         $738 = (($737) + ($727))|0;
         HEAP32[(7640)>>2] = $738;
         HEAP32[(7652)>>2] = $726;
         $739 = $738 | 1;
         $740 = ((($726)) + 4|0);
         HEAP32[$740>>2] = $739;
         $741 = (($726) + ($738)|0);
         HEAP32[$741>>2] = $738;
         break;
        }
        $742 = ((($722)) + 4|0);
        $743 = HEAP32[$742>>2]|0;
        $744 = $743 & 3;
        $745 = ($744|0)==(1);
        if ($745) {
         $746 = $743 & -8;
         $747 = $743 >>> 3;
         $748 = ($743>>>0)<(256);
         L331: do {
          if ($748) {
           $749 = ((($722)) + 8|0);
           $750 = HEAP32[$749>>2]|0;
           $751 = ((($722)) + 12|0);
           $752 = HEAP32[$751>>2]|0;
           $753 = $747 << 1;
           $754 = (7672 + ($753<<2)|0);
           $755 = ($750|0)==($754|0);
           do {
            if (!($755)) {
             $756 = ($750>>>0)<($757>>>0);
             if ($756) {
              _abort();
              // unreachable;
             }
             $758 = ((($750)) + 12|0);
             $759 = HEAP32[$758>>2]|0;
             $760 = ($759|0)==($722|0);
             if ($760) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $761 = ($752|0)==($750|0);
           if ($761) {
            $762 = 1 << $747;
            $763 = $762 ^ -1;
            $764 = HEAP32[1908]|0;
            $765 = $764 & $763;
            HEAP32[1908] = $765;
            break;
           }
           $766 = ($752|0)==($754|0);
           do {
            if ($766) {
             $$pre9$i$i = ((($752)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $767 = ($752>>>0)<($757>>>0);
             if ($767) {
              _abort();
              // unreachable;
             }
             $768 = ((($752)) + 8|0);
             $769 = HEAP32[$768>>2]|0;
             $770 = ($769|0)==($722|0);
             if ($770) {
              $$pre$phi10$i$iZ2D = $768;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $771 = ((($750)) + 12|0);
           HEAP32[$771>>2] = $752;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $750;
          } else {
           $772 = ((($722)) + 24|0);
           $773 = HEAP32[$772>>2]|0;
           $774 = ((($722)) + 12|0);
           $775 = HEAP32[$774>>2]|0;
           $776 = ($775|0)==($722|0);
           do {
            if ($776) {
             $786 = ((($722)) + 16|0);
             $787 = ((($786)) + 4|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)==(0|0);
             if ($789) {
              $790 = HEAP32[$786>>2]|0;
              $791 = ($790|0)==(0|0);
              if ($791) {
               $R$3$i$i = 0;
               break;
              } else {
               $R$1$i$i = $790;$RP$1$i$i = $786;
              }
             } else {
              $R$1$i$i = $788;$RP$1$i$i = $787;
             }
             while(1) {
              $792 = ((($R$1$i$i)) + 20|0);
              $793 = HEAP32[$792>>2]|0;
              $794 = ($793|0)==(0|0);
              if (!($794)) {
               $R$1$i$i = $793;$RP$1$i$i = $792;
               continue;
              }
              $795 = ((($R$1$i$i)) + 16|0);
              $796 = HEAP32[$795>>2]|0;
              $797 = ($796|0)==(0|0);
              if ($797) {
               $R$1$i$i$lcssa = $R$1$i$i;$RP$1$i$i$lcssa = $RP$1$i$i;
               break;
              } else {
               $R$1$i$i = $796;$RP$1$i$i = $795;
              }
             }
             $798 = ($RP$1$i$i$lcssa>>>0)<($757>>>0);
             if ($798) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$RP$1$i$i$lcssa>>2] = 0;
              $R$3$i$i = $R$1$i$i$lcssa;
              break;
             }
            } else {
             $777 = ((($722)) + 8|0);
             $778 = HEAP32[$777>>2]|0;
             $779 = ($778>>>0)<($757>>>0);
             if ($779) {
              _abort();
              // unreachable;
             }
             $780 = ((($778)) + 12|0);
             $781 = HEAP32[$780>>2]|0;
             $782 = ($781|0)==($722|0);
             if (!($782)) {
              _abort();
              // unreachable;
             }
             $783 = ((($775)) + 8|0);
             $784 = HEAP32[$783>>2]|0;
             $785 = ($784|0)==($722|0);
             if ($785) {
              HEAP32[$780>>2] = $775;
              HEAP32[$783>>2] = $778;
              $R$3$i$i = $775;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $799 = ($773|0)==(0|0);
           if ($799) {
            break;
           }
           $800 = ((($722)) + 28|0);
           $801 = HEAP32[$800>>2]|0;
           $802 = (7936 + ($801<<2)|0);
           $803 = HEAP32[$802>>2]|0;
           $804 = ($722|0)==($803|0);
           do {
            if ($804) {
             HEAP32[$802>>2] = $R$3$i$i;
             $cond$i$i = ($R$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $805 = 1 << $801;
             $806 = $805 ^ -1;
             $807 = HEAP32[(7636)>>2]|0;
             $808 = $807 & $806;
             HEAP32[(7636)>>2] = $808;
             break L331;
            } else {
             $809 = HEAP32[(7648)>>2]|0;
             $810 = ($773>>>0)<($809>>>0);
             if ($810) {
              _abort();
              // unreachable;
             }
             $811 = ((($773)) + 16|0);
             $812 = HEAP32[$811>>2]|0;
             $813 = ($812|0)==($722|0);
             if ($813) {
              HEAP32[$811>>2] = $R$3$i$i;
             } else {
              $814 = ((($773)) + 20|0);
              HEAP32[$814>>2] = $R$3$i$i;
             }
             $815 = ($R$3$i$i|0)==(0|0);
             if ($815) {
              break L331;
             }
            }
           } while(0);
           $816 = HEAP32[(7648)>>2]|0;
           $817 = ($R$3$i$i>>>0)<($816>>>0);
           if ($817) {
            _abort();
            // unreachable;
           }
           $818 = ((($R$3$i$i)) + 24|0);
           HEAP32[$818>>2] = $773;
           $819 = ((($722)) + 16|0);
           $820 = HEAP32[$819>>2]|0;
           $821 = ($820|0)==(0|0);
           do {
            if (!($821)) {
             $822 = ($820>>>0)<($816>>>0);
             if ($822) {
              _abort();
              // unreachable;
             } else {
              $823 = ((($R$3$i$i)) + 16|0);
              HEAP32[$823>>2] = $820;
              $824 = ((($820)) + 24|0);
              HEAP32[$824>>2] = $R$3$i$i;
              break;
             }
            }
           } while(0);
           $825 = ((($819)) + 4|0);
           $826 = HEAP32[$825>>2]|0;
           $827 = ($826|0)==(0|0);
           if ($827) {
            break;
           }
           $828 = HEAP32[(7648)>>2]|0;
           $829 = ($826>>>0)<($828>>>0);
           if ($829) {
            _abort();
            // unreachable;
           } else {
            $830 = ((($R$3$i$i)) + 20|0);
            HEAP32[$830>>2] = $826;
            $831 = ((($826)) + 24|0);
            HEAP32[$831>>2] = $R$3$i$i;
            break;
           }
          }
         } while(0);
         $832 = (($722) + ($746)|0);
         $833 = (($746) + ($727))|0;
         $oldfirst$0$i$i = $832;$qsize$0$i$i = $833;
        } else {
         $oldfirst$0$i$i = $722;$qsize$0$i$i = $727;
        }
        $834 = ((($oldfirst$0$i$i)) + 4|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = $835 & -2;
        HEAP32[$834>>2] = $836;
        $837 = $qsize$0$i$i | 1;
        $838 = ((($726)) + 4|0);
        HEAP32[$838>>2] = $837;
        $839 = (($726) + ($qsize$0$i$i)|0);
        HEAP32[$839>>2] = $qsize$0$i$i;
        $840 = $qsize$0$i$i >>> 3;
        $841 = ($qsize$0$i$i>>>0)<(256);
        if ($841) {
         $842 = $840 << 1;
         $843 = (7672 + ($842<<2)|0);
         $844 = HEAP32[1908]|0;
         $845 = 1 << $840;
         $846 = $844 & $845;
         $847 = ($846|0)==(0);
         do {
          if ($847) {
           $848 = $844 | $845;
           HEAP32[1908] = $848;
           $$pre$i16$i = ((($843)) + 8|0);
           $$pre$phi$i17$iZ2D = $$pre$i16$i;$F4$0$i$i = $843;
          } else {
           $849 = ((($843)) + 8|0);
           $850 = HEAP32[$849>>2]|0;
           $851 = HEAP32[(7648)>>2]|0;
           $852 = ($850>>>0)<($851>>>0);
           if (!($852)) {
            $$pre$phi$i17$iZ2D = $849;$F4$0$i$i = $850;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $726;
         $853 = ((($F4$0$i$i)) + 12|0);
         HEAP32[$853>>2] = $726;
         $854 = ((($726)) + 8|0);
         HEAP32[$854>>2] = $F4$0$i$i;
         $855 = ((($726)) + 12|0);
         HEAP32[$855>>2] = $843;
         break;
        }
        $856 = $qsize$0$i$i >>> 8;
        $857 = ($856|0)==(0);
        do {
         if ($857) {
          $I7$0$i$i = 0;
         } else {
          $858 = ($qsize$0$i$i>>>0)>(16777215);
          if ($858) {
           $I7$0$i$i = 31;
           break;
          }
          $859 = (($856) + 1048320)|0;
          $860 = $859 >>> 16;
          $861 = $860 & 8;
          $862 = $856 << $861;
          $863 = (($862) + 520192)|0;
          $864 = $863 >>> 16;
          $865 = $864 & 4;
          $866 = $865 | $861;
          $867 = $862 << $865;
          $868 = (($867) + 245760)|0;
          $869 = $868 >>> 16;
          $870 = $869 & 2;
          $871 = $866 | $870;
          $872 = (14 - ($871))|0;
          $873 = $867 << $870;
          $874 = $873 >>> 15;
          $875 = (($872) + ($874))|0;
          $876 = $875 << 1;
          $877 = (($875) + 7)|0;
          $878 = $qsize$0$i$i >>> $877;
          $879 = $878 & 1;
          $880 = $879 | $876;
          $I7$0$i$i = $880;
         }
        } while(0);
        $881 = (7936 + ($I7$0$i$i<<2)|0);
        $882 = ((($726)) + 28|0);
        HEAP32[$882>>2] = $I7$0$i$i;
        $883 = ((($726)) + 16|0);
        $884 = ((($883)) + 4|0);
        HEAP32[$884>>2] = 0;
        HEAP32[$883>>2] = 0;
        $885 = HEAP32[(7636)>>2]|0;
        $886 = 1 << $I7$0$i$i;
        $887 = $885 & $886;
        $888 = ($887|0)==(0);
        if ($888) {
         $889 = $885 | $886;
         HEAP32[(7636)>>2] = $889;
         HEAP32[$881>>2] = $726;
         $890 = ((($726)) + 24|0);
         HEAP32[$890>>2] = $881;
         $891 = ((($726)) + 12|0);
         HEAP32[$891>>2] = $726;
         $892 = ((($726)) + 8|0);
         HEAP32[$892>>2] = $726;
         break;
        }
        $893 = HEAP32[$881>>2]|0;
        $894 = ($I7$0$i$i|0)==(31);
        $895 = $I7$0$i$i >>> 1;
        $896 = (25 - ($895))|0;
        $897 = $894 ? 0 : $896;
        $898 = $qsize$0$i$i << $897;
        $K8$0$i$i = $898;$T$0$i18$i = $893;
        while(1) {
         $899 = ((($T$0$i18$i)) + 4|0);
         $900 = HEAP32[$899>>2]|0;
         $901 = $900 & -8;
         $902 = ($901|0)==($qsize$0$i$i|0);
         if ($902) {
          $T$0$i18$i$lcssa = $T$0$i18$i;
          label = 281;
          break;
         }
         $903 = $K8$0$i$i >>> 31;
         $904 = (((($T$0$i18$i)) + 16|0) + ($903<<2)|0);
         $905 = $K8$0$i$i << 1;
         $906 = HEAP32[$904>>2]|0;
         $907 = ($906|0)==(0|0);
         if ($907) {
          $$lcssa = $904;$T$0$i18$i$lcssa139 = $T$0$i18$i;
          label = 278;
          break;
         } else {
          $K8$0$i$i = $905;$T$0$i18$i = $906;
         }
        }
        if ((label|0) == 278) {
         $908 = HEAP32[(7648)>>2]|0;
         $909 = ($$lcssa>>>0)<($908>>>0);
         if ($909) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$lcssa>>2] = $726;
          $910 = ((($726)) + 24|0);
          HEAP32[$910>>2] = $T$0$i18$i$lcssa139;
          $911 = ((($726)) + 12|0);
          HEAP32[$911>>2] = $726;
          $912 = ((($726)) + 8|0);
          HEAP32[$912>>2] = $726;
          break;
         }
        }
        else if ((label|0) == 281) {
         $913 = ((($T$0$i18$i$lcssa)) + 8|0);
         $914 = HEAP32[$913>>2]|0;
         $915 = HEAP32[(7648)>>2]|0;
         $916 = ($914>>>0)>=($915>>>0);
         $not$$i20$i = ($T$0$i18$i$lcssa>>>0)>=($915>>>0);
         $917 = $916 & $not$$i20$i;
         if ($917) {
          $918 = ((($914)) + 12|0);
          HEAP32[$918>>2] = $726;
          HEAP32[$913>>2] = $726;
          $919 = ((($726)) + 8|0);
          HEAP32[$919>>2] = $914;
          $920 = ((($726)) + 12|0);
          HEAP32[$920>>2] = $T$0$i18$i$lcssa;
          $921 = ((($726)) + 24|0);
          HEAP32[$921>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1052 = ((($714)) + 8|0);
      $$0 = $1052;
      return ($$0|0);
     } else {
      $sp$0$i$i$i = (8080);
     }
    }
    while(1) {
     $922 = HEAP32[$sp$0$i$i$i>>2]|0;
     $923 = ($922>>>0)>($635>>>0);
     if (!($923)) {
      $924 = ((($sp$0$i$i$i)) + 4|0);
      $925 = HEAP32[$924>>2]|0;
      $926 = (($922) + ($925)|0);
      $927 = ($926>>>0)>($635>>>0);
      if ($927) {
       $$lcssa142 = $926;
       break;
      }
     }
     $928 = ((($sp$0$i$i$i)) + 8|0);
     $929 = HEAP32[$928>>2]|0;
     $sp$0$i$i$i = $929;
    }
    $930 = ((($$lcssa142)) + -47|0);
    $931 = ((($930)) + 8|0);
    $932 = $931;
    $933 = $932 & 7;
    $934 = ($933|0)==(0);
    $935 = (0 - ($932))|0;
    $936 = $935 & 7;
    $937 = $934 ? 0 : $936;
    $938 = (($930) + ($937)|0);
    $939 = ((($635)) + 16|0);
    $940 = ($938>>>0)<($939>>>0);
    $941 = $940 ? $635 : $938;
    $942 = ((($941)) + 8|0);
    $943 = ((($941)) + 24|0);
    $944 = (($tsize$745$i) + -40)|0;
    $945 = ((($tbase$746$i)) + 8|0);
    $946 = $945;
    $947 = $946 & 7;
    $948 = ($947|0)==(0);
    $949 = (0 - ($946))|0;
    $950 = $949 & 7;
    $951 = $948 ? 0 : $950;
    $952 = (($tbase$746$i) + ($951)|0);
    $953 = (($944) - ($951))|0;
    HEAP32[(7656)>>2] = $952;
    HEAP32[(7644)>>2] = $953;
    $954 = $953 | 1;
    $955 = ((($952)) + 4|0);
    HEAP32[$955>>2] = $954;
    $956 = (($952) + ($953)|0);
    $957 = ((($956)) + 4|0);
    HEAP32[$957>>2] = 40;
    $958 = HEAP32[(8120)>>2]|0;
    HEAP32[(7660)>>2] = $958;
    $959 = ((($941)) + 4|0);
    HEAP32[$959>>2] = 27;
    ;HEAP32[$942>>2]=HEAP32[(8080)>>2]|0;HEAP32[$942+4>>2]=HEAP32[(8080)+4>>2]|0;HEAP32[$942+8>>2]=HEAP32[(8080)+8>>2]|0;HEAP32[$942+12>>2]=HEAP32[(8080)+12>>2]|0;
    HEAP32[(8080)>>2] = $tbase$746$i;
    HEAP32[(8084)>>2] = $tsize$745$i;
    HEAP32[(8092)>>2] = 0;
    HEAP32[(8088)>>2] = $942;
    $p$0$i$i = $943;
    while(1) {
     $960 = ((($p$0$i$i)) + 4|0);
     HEAP32[$960>>2] = 7;
     $961 = ((($960)) + 4|0);
     $962 = ($961>>>0)<($$lcssa142>>>0);
     if ($962) {
      $p$0$i$i = $960;
     } else {
      break;
     }
    }
    $963 = ($941|0)==($635|0);
    if (!($963)) {
     $964 = $941;
     $965 = $635;
     $966 = (($964) - ($965))|0;
     $967 = HEAP32[$959>>2]|0;
     $968 = $967 & -2;
     HEAP32[$959>>2] = $968;
     $969 = $966 | 1;
     $970 = ((($635)) + 4|0);
     HEAP32[$970>>2] = $969;
     HEAP32[$941>>2] = $966;
     $971 = $966 >>> 3;
     $972 = ($966>>>0)<(256);
     if ($972) {
      $973 = $971 << 1;
      $974 = (7672 + ($973<<2)|0);
      $975 = HEAP32[1908]|0;
      $976 = 1 << $971;
      $977 = $975 & $976;
      $978 = ($977|0)==(0);
      if ($978) {
       $979 = $975 | $976;
       HEAP32[1908] = $979;
       $$pre$i$i = ((($974)) + 8|0);
       $$pre$phi$i$iZ2D = $$pre$i$i;$F$0$i$i = $974;
      } else {
       $980 = ((($974)) + 8|0);
       $981 = HEAP32[$980>>2]|0;
       $982 = HEAP32[(7648)>>2]|0;
       $983 = ($981>>>0)<($982>>>0);
       if ($983) {
        _abort();
        // unreachable;
       } else {
        $$pre$phi$i$iZ2D = $980;$F$0$i$i = $981;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $635;
      $984 = ((($F$0$i$i)) + 12|0);
      HEAP32[$984>>2] = $635;
      $985 = ((($635)) + 8|0);
      HEAP32[$985>>2] = $F$0$i$i;
      $986 = ((($635)) + 12|0);
      HEAP32[$986>>2] = $974;
      break;
     }
     $987 = $966 >>> 8;
     $988 = ($987|0)==(0);
     if ($988) {
      $I1$0$i$i = 0;
     } else {
      $989 = ($966>>>0)>(16777215);
      if ($989) {
       $I1$0$i$i = 31;
      } else {
       $990 = (($987) + 1048320)|0;
       $991 = $990 >>> 16;
       $992 = $991 & 8;
       $993 = $987 << $992;
       $994 = (($993) + 520192)|0;
       $995 = $994 >>> 16;
       $996 = $995 & 4;
       $997 = $996 | $992;
       $998 = $993 << $996;
       $999 = (($998) + 245760)|0;
       $1000 = $999 >>> 16;
       $1001 = $1000 & 2;
       $1002 = $997 | $1001;
       $1003 = (14 - ($1002))|0;
       $1004 = $998 << $1001;
       $1005 = $1004 >>> 15;
       $1006 = (($1003) + ($1005))|0;
       $1007 = $1006 << 1;
       $1008 = (($1006) + 7)|0;
       $1009 = $966 >>> $1008;
       $1010 = $1009 & 1;
       $1011 = $1010 | $1007;
       $I1$0$i$i = $1011;
      }
     }
     $1012 = (7936 + ($I1$0$i$i<<2)|0);
     $1013 = ((($635)) + 28|0);
     HEAP32[$1013>>2] = $I1$0$i$i;
     $1014 = ((($635)) + 20|0);
     HEAP32[$1014>>2] = 0;
     HEAP32[$939>>2] = 0;
     $1015 = HEAP32[(7636)>>2]|0;
     $1016 = 1 << $I1$0$i$i;
     $1017 = $1015 & $1016;
     $1018 = ($1017|0)==(0);
     if ($1018) {
      $1019 = $1015 | $1016;
      HEAP32[(7636)>>2] = $1019;
      HEAP32[$1012>>2] = $635;
      $1020 = ((($635)) + 24|0);
      HEAP32[$1020>>2] = $1012;
      $1021 = ((($635)) + 12|0);
      HEAP32[$1021>>2] = $635;
      $1022 = ((($635)) + 8|0);
      HEAP32[$1022>>2] = $635;
      break;
     }
     $1023 = HEAP32[$1012>>2]|0;
     $1024 = ($I1$0$i$i|0)==(31);
     $1025 = $I1$0$i$i >>> 1;
     $1026 = (25 - ($1025))|0;
     $1027 = $1024 ? 0 : $1026;
     $1028 = $966 << $1027;
     $K2$0$i$i = $1028;$T$0$i$i = $1023;
     while(1) {
      $1029 = ((($T$0$i$i)) + 4|0);
      $1030 = HEAP32[$1029>>2]|0;
      $1031 = $1030 & -8;
      $1032 = ($1031|0)==($966|0);
      if ($1032) {
       $T$0$i$i$lcssa = $T$0$i$i;
       label = 307;
       break;
      }
      $1033 = $K2$0$i$i >>> 31;
      $1034 = (((($T$0$i$i)) + 16|0) + ($1033<<2)|0);
      $1035 = $K2$0$i$i << 1;
      $1036 = HEAP32[$1034>>2]|0;
      $1037 = ($1036|0)==(0|0);
      if ($1037) {
       $$lcssa141 = $1034;$T$0$i$i$lcssa140 = $T$0$i$i;
       label = 304;
       break;
      } else {
       $K2$0$i$i = $1035;$T$0$i$i = $1036;
      }
     }
     if ((label|0) == 304) {
      $1038 = HEAP32[(7648)>>2]|0;
      $1039 = ($$lcssa141>>>0)<($1038>>>0);
      if ($1039) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$lcssa141>>2] = $635;
       $1040 = ((($635)) + 24|0);
       HEAP32[$1040>>2] = $T$0$i$i$lcssa140;
       $1041 = ((($635)) + 12|0);
       HEAP32[$1041>>2] = $635;
       $1042 = ((($635)) + 8|0);
       HEAP32[$1042>>2] = $635;
       break;
      }
     }
     else if ((label|0) == 307) {
      $1043 = ((($T$0$i$i$lcssa)) + 8|0);
      $1044 = HEAP32[$1043>>2]|0;
      $1045 = HEAP32[(7648)>>2]|0;
      $1046 = ($1044>>>0)>=($1045>>>0);
      $not$$i$i = ($T$0$i$i$lcssa>>>0)>=($1045>>>0);
      $1047 = $1046 & $not$$i$i;
      if ($1047) {
       $1048 = ((($1044)) + 12|0);
       HEAP32[$1048>>2] = $635;
       HEAP32[$1043>>2] = $635;
       $1049 = ((($635)) + 8|0);
       HEAP32[$1049>>2] = $1044;
       $1050 = ((($635)) + 12|0);
       HEAP32[$1050>>2] = $T$0$i$i$lcssa;
       $1051 = ((($635)) + 24|0);
       HEAP32[$1051>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1053 = HEAP32[(7644)>>2]|0;
  $1054 = ($1053>>>0)>($nb$0>>>0);
  if ($1054) {
   $1055 = (($1053) - ($nb$0))|0;
   HEAP32[(7644)>>2] = $1055;
   $1056 = HEAP32[(7656)>>2]|0;
   $1057 = (($1056) + ($nb$0)|0);
   HEAP32[(7656)>>2] = $1057;
   $1058 = $1055 | 1;
   $1059 = ((($1057)) + 4|0);
   HEAP32[$1059>>2] = $1058;
   $1060 = $nb$0 | 3;
   $1061 = ((($1056)) + 4|0);
   HEAP32[$1061>>2] = $1060;
   $1062 = ((($1056)) + 8|0);
   $$0 = $1062;
   return ($$0|0);
  }
 }
 $1063 = (___errno_location()|0);
 HEAP32[$1063>>2] = 12;
 $$0 = 0;
 return ($$0|0);
}
function _free($mem) {
 $mem = $mem|0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi41Z2D = 0, $$pre$phi43Z2D = 0, $$pre$phiZ2D = 0, $$pre40 = 0, $$pre42 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F18$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0, $R$3 = 0, $R8$1 = 0, $R8$1$lcssa = 0, $R8$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP10$1 = 0, $RP10$1$lcssa = 0;
 var $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa48 = 0, $cond20 = 0, $cond21 = 0, $not$ = 0, $p$1 = 0, $psize$1 = 0, $psize$2 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem|0)==(0|0);
 if ($0) {
  return;
 }
 $1 = ((($mem)) + -8|0);
 $2 = HEAP32[(7648)>>2]|0;
 $3 = ($1>>>0)<($2>>>0);
 if ($3) {
  _abort();
  // unreachable;
 }
 $4 = ((($mem)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 3;
 $7 = ($6|0)==(1);
 if ($7) {
  _abort();
  // unreachable;
 }
 $8 = $5 & -8;
 $9 = (($1) + ($8)|0);
 $10 = $5 & 1;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = HEAP32[$1>>2]|0;
   $13 = ($6|0)==(0);
   if ($13) {
    return;
   }
   $14 = (0 - ($12))|0;
   $15 = (($1) + ($14)|0);
   $16 = (($12) + ($8))|0;
   $17 = ($15>>>0)<($2>>>0);
   if ($17) {
    _abort();
    // unreachable;
   }
   $18 = HEAP32[(7652)>>2]|0;
   $19 = ($15|0)==($18|0);
   if ($19) {
    $104 = ((($9)) + 4|0);
    $105 = HEAP32[$104>>2]|0;
    $106 = $105 & 3;
    $107 = ($106|0)==(3);
    if (!($107)) {
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    HEAP32[(7640)>>2] = $16;
    $108 = $105 & -2;
    HEAP32[$104>>2] = $108;
    $109 = $16 | 1;
    $110 = ((($15)) + 4|0);
    HEAP32[$110>>2] = $109;
    $111 = (($15) + ($16)|0);
    HEAP32[$111>>2] = $16;
    return;
   }
   $20 = $12 >>> 3;
   $21 = ($12>>>0)<(256);
   if ($21) {
    $22 = ((($15)) + 8|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ((($15)) + 12|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $20 << 1;
    $27 = (7672 + ($26<<2)|0);
    $28 = ($23|0)==($27|0);
    if (!($28)) {
     $29 = ($23>>>0)<($2>>>0);
     if ($29) {
      _abort();
      // unreachable;
     }
     $30 = ((($23)) + 12|0);
     $31 = HEAP32[$30>>2]|0;
     $32 = ($31|0)==($15|0);
     if (!($32)) {
      _abort();
      // unreachable;
     }
    }
    $33 = ($25|0)==($23|0);
    if ($33) {
     $34 = 1 << $20;
     $35 = $34 ^ -1;
     $36 = HEAP32[1908]|0;
     $37 = $36 & $35;
     HEAP32[1908] = $37;
     $p$1 = $15;$psize$1 = $16;
     break;
    }
    $38 = ($25|0)==($27|0);
    if ($38) {
     $$pre42 = ((($25)) + 8|0);
     $$pre$phi43Z2D = $$pre42;
    } else {
     $39 = ($25>>>0)<($2>>>0);
     if ($39) {
      _abort();
      // unreachable;
     }
     $40 = ((($25)) + 8|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==($15|0);
     if ($42) {
      $$pre$phi43Z2D = $40;
     } else {
      _abort();
      // unreachable;
     }
    }
    $43 = ((($23)) + 12|0);
    HEAP32[$43>>2] = $25;
    HEAP32[$$pre$phi43Z2D>>2] = $23;
    $p$1 = $15;$psize$1 = $16;
    break;
   }
   $44 = ((($15)) + 24|0);
   $45 = HEAP32[$44>>2]|0;
   $46 = ((($15)) + 12|0);
   $47 = HEAP32[$46>>2]|0;
   $48 = ($47|0)==($15|0);
   do {
    if ($48) {
     $58 = ((($15)) + 16|0);
     $59 = ((($58)) + 4|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==(0|0);
     if ($61) {
      $62 = HEAP32[$58>>2]|0;
      $63 = ($62|0)==(0|0);
      if ($63) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $62;$RP$1 = $58;
      }
     } else {
      $R$1 = $60;$RP$1 = $59;
     }
     while(1) {
      $64 = ((($R$1)) + 20|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if (!($66)) {
       $R$1 = $65;$RP$1 = $64;
       continue;
      }
      $67 = ((($R$1)) + 16|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0|0);
      if ($69) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $68;$RP$1 = $67;
      }
     }
     $70 = ($RP$1$lcssa>>>0)<($2>>>0);
     if ($70) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $49 = ((($15)) + 8|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50>>>0)<($2>>>0);
     if ($51) {
      _abort();
      // unreachable;
     }
     $52 = ((($50)) + 12|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($15|0);
     if (!($54)) {
      _abort();
      // unreachable;
     }
     $55 = ((($47)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     $57 = ($56|0)==($15|0);
     if ($57) {
      HEAP32[$52>>2] = $47;
      HEAP32[$55>>2] = $50;
      $R$3 = $47;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $71 = ($45|0)==(0|0);
   if ($71) {
    $p$1 = $15;$psize$1 = $16;
   } else {
    $72 = ((($15)) + 28|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = (7936 + ($73<<2)|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($15|0)==($75|0);
    if ($76) {
     HEAP32[$74>>2] = $R$3;
     $cond20 = ($R$3|0)==(0|0);
     if ($cond20) {
      $77 = 1 << $73;
      $78 = $77 ^ -1;
      $79 = HEAP32[(7636)>>2]|0;
      $80 = $79 & $78;
      HEAP32[(7636)>>2] = $80;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    } else {
     $81 = HEAP32[(7648)>>2]|0;
     $82 = ($45>>>0)<($81>>>0);
     if ($82) {
      _abort();
      // unreachable;
     }
     $83 = ((($45)) + 16|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==($15|0);
     if ($85) {
      HEAP32[$83>>2] = $R$3;
     } else {
      $86 = ((($45)) + 20|0);
      HEAP32[$86>>2] = $R$3;
     }
     $87 = ($R$3|0)==(0|0);
     if ($87) {
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
    $88 = HEAP32[(7648)>>2]|0;
    $89 = ($R$3>>>0)<($88>>>0);
    if ($89) {
     _abort();
     // unreachable;
    }
    $90 = ((($R$3)) + 24|0);
    HEAP32[$90>>2] = $45;
    $91 = ((($15)) + 16|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = ($92|0)==(0|0);
    do {
     if (!($93)) {
      $94 = ($92>>>0)<($88>>>0);
      if ($94) {
       _abort();
       // unreachable;
      } else {
       $95 = ((($R$3)) + 16|0);
       HEAP32[$95>>2] = $92;
       $96 = ((($92)) + 24|0);
       HEAP32[$96>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $97 = ((($91)) + 4|0);
    $98 = HEAP32[$97>>2]|0;
    $99 = ($98|0)==(0|0);
    if ($99) {
     $p$1 = $15;$psize$1 = $16;
    } else {
     $100 = HEAP32[(7648)>>2]|0;
     $101 = ($98>>>0)<($100>>>0);
     if ($101) {
      _abort();
      // unreachable;
     } else {
      $102 = ((($R$3)) + 20|0);
      HEAP32[$102>>2] = $98;
      $103 = ((($98)) + 24|0);
      HEAP32[$103>>2] = $R$3;
      $p$1 = $15;$psize$1 = $16;
      break;
     }
    }
   }
  } else {
   $p$1 = $1;$psize$1 = $8;
  }
 } while(0);
 $112 = ($p$1>>>0)<($9>>>0);
 if (!($112)) {
  _abort();
  // unreachable;
 }
 $113 = ((($9)) + 4|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = $114 & 1;
 $116 = ($115|0)==(0);
 if ($116) {
  _abort();
  // unreachable;
 }
 $117 = $114 & 2;
 $118 = ($117|0)==(0);
 if ($118) {
  $119 = HEAP32[(7656)>>2]|0;
  $120 = ($9|0)==($119|0);
  if ($120) {
   $121 = HEAP32[(7644)>>2]|0;
   $122 = (($121) + ($psize$1))|0;
   HEAP32[(7644)>>2] = $122;
   HEAP32[(7656)>>2] = $p$1;
   $123 = $122 | 1;
   $124 = ((($p$1)) + 4|0);
   HEAP32[$124>>2] = $123;
   $125 = HEAP32[(7652)>>2]|0;
   $126 = ($p$1|0)==($125|0);
   if (!($126)) {
    return;
   }
   HEAP32[(7652)>>2] = 0;
   HEAP32[(7640)>>2] = 0;
   return;
  }
  $127 = HEAP32[(7652)>>2]|0;
  $128 = ($9|0)==($127|0);
  if ($128) {
   $129 = HEAP32[(7640)>>2]|0;
   $130 = (($129) + ($psize$1))|0;
   HEAP32[(7640)>>2] = $130;
   HEAP32[(7652)>>2] = $p$1;
   $131 = $130 | 1;
   $132 = ((($p$1)) + 4|0);
   HEAP32[$132>>2] = $131;
   $133 = (($p$1) + ($130)|0);
   HEAP32[$133>>2] = $130;
   return;
  }
  $134 = $114 & -8;
  $135 = (($134) + ($psize$1))|0;
  $136 = $114 >>> 3;
  $137 = ($114>>>0)<(256);
  do {
   if ($137) {
    $138 = ((($9)) + 8|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ((($9)) + 12|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = $136 << 1;
    $143 = (7672 + ($142<<2)|0);
    $144 = ($139|0)==($143|0);
    if (!($144)) {
     $145 = HEAP32[(7648)>>2]|0;
     $146 = ($139>>>0)<($145>>>0);
     if ($146) {
      _abort();
      // unreachable;
     }
     $147 = ((($139)) + 12|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = ($148|0)==($9|0);
     if (!($149)) {
      _abort();
      // unreachable;
     }
    }
    $150 = ($141|0)==($139|0);
    if ($150) {
     $151 = 1 << $136;
     $152 = $151 ^ -1;
     $153 = HEAP32[1908]|0;
     $154 = $153 & $152;
     HEAP32[1908] = $154;
     break;
    }
    $155 = ($141|0)==($143|0);
    if ($155) {
     $$pre40 = ((($141)) + 8|0);
     $$pre$phi41Z2D = $$pre40;
    } else {
     $156 = HEAP32[(7648)>>2]|0;
     $157 = ($141>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     }
     $158 = ((($141)) + 8|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==($9|0);
     if ($160) {
      $$pre$phi41Z2D = $158;
     } else {
      _abort();
      // unreachable;
     }
    }
    $161 = ((($139)) + 12|0);
    HEAP32[$161>>2] = $141;
    HEAP32[$$pre$phi41Z2D>>2] = $139;
   } else {
    $162 = ((($9)) + 24|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($9)) + 12|0);
    $165 = HEAP32[$164>>2]|0;
    $166 = ($165|0)==($9|0);
    do {
     if ($166) {
      $177 = ((($9)) + 16|0);
      $178 = ((($177)) + 4|0);
      $179 = HEAP32[$178>>2]|0;
      $180 = ($179|0)==(0|0);
      if ($180) {
       $181 = HEAP32[$177>>2]|0;
       $182 = ($181|0)==(0|0);
       if ($182) {
        $R8$3 = 0;
        break;
       } else {
        $R8$1 = $181;$RP10$1 = $177;
       }
      } else {
       $R8$1 = $179;$RP10$1 = $178;
      }
      while(1) {
       $183 = ((($R8$1)) + 20|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = ($184|0)==(0|0);
       if (!($185)) {
        $R8$1 = $184;$RP10$1 = $183;
        continue;
       }
       $186 = ((($R8$1)) + 16|0);
       $187 = HEAP32[$186>>2]|0;
       $188 = ($187|0)==(0|0);
       if ($188) {
        $R8$1$lcssa = $R8$1;$RP10$1$lcssa = $RP10$1;
        break;
       } else {
        $R8$1 = $187;$RP10$1 = $186;
       }
      }
      $189 = HEAP32[(7648)>>2]|0;
      $190 = ($RP10$1$lcssa>>>0)<($189>>>0);
      if ($190) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP10$1$lcssa>>2] = 0;
       $R8$3 = $R8$1$lcssa;
       break;
      }
     } else {
      $167 = ((($9)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = HEAP32[(7648)>>2]|0;
      $170 = ($168>>>0)<($169>>>0);
      if ($170) {
       _abort();
       // unreachable;
      }
      $171 = ((($168)) + 12|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==($9|0);
      if (!($173)) {
       _abort();
       // unreachable;
      }
      $174 = ((($165)) + 8|0);
      $175 = HEAP32[$174>>2]|0;
      $176 = ($175|0)==($9|0);
      if ($176) {
       HEAP32[$171>>2] = $165;
       HEAP32[$174>>2] = $168;
       $R8$3 = $165;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $191 = ($163|0)==(0|0);
    if (!($191)) {
     $192 = ((($9)) + 28|0);
     $193 = HEAP32[$192>>2]|0;
     $194 = (7936 + ($193<<2)|0);
     $195 = HEAP32[$194>>2]|0;
     $196 = ($9|0)==($195|0);
     if ($196) {
      HEAP32[$194>>2] = $R8$3;
      $cond21 = ($R8$3|0)==(0|0);
      if ($cond21) {
       $197 = 1 << $193;
       $198 = $197 ^ -1;
       $199 = HEAP32[(7636)>>2]|0;
       $200 = $199 & $198;
       HEAP32[(7636)>>2] = $200;
       break;
      }
     } else {
      $201 = HEAP32[(7648)>>2]|0;
      $202 = ($163>>>0)<($201>>>0);
      if ($202) {
       _abort();
       // unreachable;
      }
      $203 = ((($163)) + 16|0);
      $204 = HEAP32[$203>>2]|0;
      $205 = ($204|0)==($9|0);
      if ($205) {
       HEAP32[$203>>2] = $R8$3;
      } else {
       $206 = ((($163)) + 20|0);
       HEAP32[$206>>2] = $R8$3;
      }
      $207 = ($R8$3|0)==(0|0);
      if ($207) {
       break;
      }
     }
     $208 = HEAP32[(7648)>>2]|0;
     $209 = ($R8$3>>>0)<($208>>>0);
     if ($209) {
      _abort();
      // unreachable;
     }
     $210 = ((($R8$3)) + 24|0);
     HEAP32[$210>>2] = $163;
     $211 = ((($9)) + 16|0);
     $212 = HEAP32[$211>>2]|0;
     $213 = ($212|0)==(0|0);
     do {
      if (!($213)) {
       $214 = ($212>>>0)<($208>>>0);
       if ($214) {
        _abort();
        // unreachable;
       } else {
        $215 = ((($R8$3)) + 16|0);
        HEAP32[$215>>2] = $212;
        $216 = ((($212)) + 24|0);
        HEAP32[$216>>2] = $R8$3;
        break;
       }
      }
     } while(0);
     $217 = ((($211)) + 4|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0|0);
     if (!($219)) {
      $220 = HEAP32[(7648)>>2]|0;
      $221 = ($218>>>0)<($220>>>0);
      if ($221) {
       _abort();
       // unreachable;
      } else {
       $222 = ((($R8$3)) + 20|0);
       HEAP32[$222>>2] = $218;
       $223 = ((($218)) + 24|0);
       HEAP32[$223>>2] = $R8$3;
       break;
      }
     }
    }
   }
  } while(0);
  $224 = $135 | 1;
  $225 = ((($p$1)) + 4|0);
  HEAP32[$225>>2] = $224;
  $226 = (($p$1) + ($135)|0);
  HEAP32[$226>>2] = $135;
  $227 = HEAP32[(7652)>>2]|0;
  $228 = ($p$1|0)==($227|0);
  if ($228) {
   HEAP32[(7640)>>2] = $135;
   return;
  } else {
   $psize$2 = $135;
  }
 } else {
  $229 = $114 & -2;
  HEAP32[$113>>2] = $229;
  $230 = $psize$1 | 1;
  $231 = ((($p$1)) + 4|0);
  HEAP32[$231>>2] = $230;
  $232 = (($p$1) + ($psize$1)|0);
  HEAP32[$232>>2] = $psize$1;
  $psize$2 = $psize$1;
 }
 $233 = $psize$2 >>> 3;
 $234 = ($psize$2>>>0)<(256);
 if ($234) {
  $235 = $233 << 1;
  $236 = (7672 + ($235<<2)|0);
  $237 = HEAP32[1908]|0;
  $238 = 1 << $233;
  $239 = $237 & $238;
  $240 = ($239|0)==(0);
  if ($240) {
   $241 = $237 | $238;
   HEAP32[1908] = $241;
   $$pre = ((($236)) + 8|0);
   $$pre$phiZ2D = $$pre;$F18$0 = $236;
  } else {
   $242 = ((($236)) + 8|0);
   $243 = HEAP32[$242>>2]|0;
   $244 = HEAP32[(7648)>>2]|0;
   $245 = ($243>>>0)<($244>>>0);
   if ($245) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $242;$F18$0 = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $p$1;
  $246 = ((($F18$0)) + 12|0);
  HEAP32[$246>>2] = $p$1;
  $247 = ((($p$1)) + 8|0);
  HEAP32[$247>>2] = $F18$0;
  $248 = ((($p$1)) + 12|0);
  HEAP32[$248>>2] = $236;
  return;
 }
 $249 = $psize$2 >>> 8;
 $250 = ($249|0)==(0);
 if ($250) {
  $I20$0 = 0;
 } else {
  $251 = ($psize$2>>>0)>(16777215);
  if ($251) {
   $I20$0 = 31;
  } else {
   $252 = (($249) + 1048320)|0;
   $253 = $252 >>> 16;
   $254 = $253 & 8;
   $255 = $249 << $254;
   $256 = (($255) + 520192)|0;
   $257 = $256 >>> 16;
   $258 = $257 & 4;
   $259 = $258 | $254;
   $260 = $255 << $258;
   $261 = (($260) + 245760)|0;
   $262 = $261 >>> 16;
   $263 = $262 & 2;
   $264 = $259 | $263;
   $265 = (14 - ($264))|0;
   $266 = $260 << $263;
   $267 = $266 >>> 15;
   $268 = (($265) + ($267))|0;
   $269 = $268 << 1;
   $270 = (($268) + 7)|0;
   $271 = $psize$2 >>> $270;
   $272 = $271 & 1;
   $273 = $272 | $269;
   $I20$0 = $273;
  }
 }
 $274 = (7936 + ($I20$0<<2)|0);
 $275 = ((($p$1)) + 28|0);
 HEAP32[$275>>2] = $I20$0;
 $276 = ((($p$1)) + 16|0);
 $277 = ((($p$1)) + 20|0);
 HEAP32[$277>>2] = 0;
 HEAP32[$276>>2] = 0;
 $278 = HEAP32[(7636)>>2]|0;
 $279 = 1 << $I20$0;
 $280 = $278 & $279;
 $281 = ($280|0)==(0);
 do {
  if ($281) {
   $282 = $278 | $279;
   HEAP32[(7636)>>2] = $282;
   HEAP32[$274>>2] = $p$1;
   $283 = ((($p$1)) + 24|0);
   HEAP32[$283>>2] = $274;
   $284 = ((($p$1)) + 12|0);
   HEAP32[$284>>2] = $p$1;
   $285 = ((($p$1)) + 8|0);
   HEAP32[$285>>2] = $p$1;
  } else {
   $286 = HEAP32[$274>>2]|0;
   $287 = ($I20$0|0)==(31);
   $288 = $I20$0 >>> 1;
   $289 = (25 - ($288))|0;
   $290 = $287 ? 0 : $289;
   $291 = $psize$2 << $290;
   $K21$0 = $291;$T$0 = $286;
   while(1) {
    $292 = ((($T$0)) + 4|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = $293 & -8;
    $295 = ($294|0)==($psize$2|0);
    if ($295) {
     $T$0$lcssa = $T$0;
     label = 130;
     break;
    }
    $296 = $K21$0 >>> 31;
    $297 = (((($T$0)) + 16|0) + ($296<<2)|0);
    $298 = $K21$0 << 1;
    $299 = HEAP32[$297>>2]|0;
    $300 = ($299|0)==(0|0);
    if ($300) {
     $$lcssa = $297;$T$0$lcssa48 = $T$0;
     label = 127;
     break;
    } else {
     $K21$0 = $298;$T$0 = $299;
    }
   }
   if ((label|0) == 127) {
    $301 = HEAP32[(7648)>>2]|0;
    $302 = ($$lcssa>>>0)<($301>>>0);
    if ($302) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$$lcssa>>2] = $p$1;
     $303 = ((($p$1)) + 24|0);
     HEAP32[$303>>2] = $T$0$lcssa48;
     $304 = ((($p$1)) + 12|0);
     HEAP32[$304>>2] = $p$1;
     $305 = ((($p$1)) + 8|0);
     HEAP32[$305>>2] = $p$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $306 = ((($T$0$lcssa)) + 8|0);
    $307 = HEAP32[$306>>2]|0;
    $308 = HEAP32[(7648)>>2]|0;
    $309 = ($307>>>0)>=($308>>>0);
    $not$ = ($T$0$lcssa>>>0)>=($308>>>0);
    $310 = $309 & $not$;
    if ($310) {
     $311 = ((($307)) + 12|0);
     HEAP32[$311>>2] = $p$1;
     HEAP32[$306>>2] = $p$1;
     $312 = ((($p$1)) + 8|0);
     HEAP32[$312>>2] = $307;
     $313 = ((($p$1)) + 12|0);
     HEAP32[$313>>2] = $T$0$lcssa;
     $314 = ((($p$1)) + 24|0);
     HEAP32[$314>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $315 = HEAP32[(7664)>>2]|0;
 $316 = (($315) + -1)|0;
 HEAP32[(7664)>>2] = $316;
 $317 = ($316|0)==(0);
 if ($317) {
  $sp$0$in$i = (8088);
 } else {
  return;
 }
 while(1) {
  $sp$0$i = HEAP32[$sp$0$in$i>>2]|0;
  $318 = ($sp$0$i|0)==(0|0);
  $319 = ((($sp$0$i)) + 8|0);
  if ($318) {
   break;
  } else {
   $sp$0$in$i = $319;
  }
 }
 HEAP32[(7664)>>2] = -1;
 return;
}
function _realloc($oldmem,$bytes) {
 $oldmem = $oldmem|0;
 $bytes = $bytes|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mem$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($oldmem|0)==(0|0);
 if ($0) {
  $1 = (_malloc($bytes)|0);
  $mem$1 = $1;
  return ($mem$1|0);
 }
 $2 = ($bytes>>>0)>(4294967231);
 if ($2) {
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = 12;
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $4 = ($bytes>>>0)<(11);
 $5 = (($bytes) + 11)|0;
 $6 = $5 & -8;
 $7 = $4 ? 16 : $6;
 $8 = ((($oldmem)) + -8|0);
 $9 = (_try_realloc_chunk($8,$7)|0);
 $10 = ($9|0)==(0|0);
 if (!($10)) {
  $11 = ((($9)) + 8|0);
  $mem$1 = $11;
  return ($mem$1|0);
 }
 $12 = (_malloc($bytes)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  $mem$1 = 0;
  return ($mem$1|0);
 }
 $14 = ((($oldmem)) + -4|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 & -8;
 $17 = $15 & 3;
 $18 = ($17|0)==(0);
 $19 = $18 ? 8 : 4;
 $20 = (($16) - ($19))|0;
 $21 = ($20>>>0)<($bytes>>>0);
 $22 = $21 ? $20 : $bytes;
 _memcpy(($12|0),($oldmem|0),($22|0))|0;
 _free($oldmem);
 $mem$1 = $12;
 return ($mem$1|0);
}
function _try_realloc_chunk($p,$nb) {
 $p = $p|0;
 $nb = $nb|0;
 var $$pre = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $cond = 0, $newp$2 = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($p)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & -8;
 $3 = (($p) + ($2)|0);
 $4 = HEAP32[(7648)>>2]|0;
 $5 = $1 & 3;
 $notlhs = ($p>>>0)>=($4>>>0);
 $notrhs = ($5|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $6 = ($p>>>0)<($3>>>0);
 $or$cond3 = $or$cond$not & $6;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $7 = ((($3)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 1;
 $10 = ($9|0)==(0);
 if ($10) {
  _abort();
  // unreachable;
 }
 $11 = ($5|0)==(0);
 if ($11) {
  $12 = ($nb>>>0)<(256);
  if ($12) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $13 = (($nb) + 4)|0;
  $14 = ($2>>>0)<($13>>>0);
  if (!($14)) {
   $15 = (($2) - ($nb))|0;
   $16 = HEAP32[(8112)>>2]|0;
   $17 = $16 << 1;
   $18 = ($15>>>0)>($17>>>0);
   if (!($18)) {
    $newp$2 = $p;
    return ($newp$2|0);
   }
  }
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $19 = ($2>>>0)<($nb>>>0);
 if (!($19)) {
  $20 = (($2) - ($nb))|0;
  $21 = ($20>>>0)>(15);
  if (!($21)) {
   $newp$2 = $p;
   return ($newp$2|0);
  }
  $22 = (($p) + ($nb)|0);
  $23 = $1 & 1;
  $24 = $23 | $nb;
  $25 = $24 | 2;
  HEAP32[$0>>2] = $25;
  $26 = ((($22)) + 4|0);
  $27 = $20 | 3;
  HEAP32[$26>>2] = $27;
  $28 = (($22) + ($20)|0);
  $29 = ((($28)) + 4|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = $30 | 1;
  HEAP32[$29>>2] = $31;
  _dispose_chunk($22,$20);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $32 = HEAP32[(7656)>>2]|0;
 $33 = ($3|0)==($32|0);
 if ($33) {
  $34 = HEAP32[(7644)>>2]|0;
  $35 = (($34) + ($2))|0;
  $36 = ($35>>>0)>($nb>>>0);
  if (!($36)) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $37 = (($35) - ($nb))|0;
  $38 = (($p) + ($nb)|0);
  $39 = $1 & 1;
  $40 = $39 | $nb;
  $41 = $40 | 2;
  HEAP32[$0>>2] = $41;
  $42 = ((($38)) + 4|0);
  $43 = $37 | 1;
  HEAP32[$42>>2] = $43;
  HEAP32[(7656)>>2] = $38;
  HEAP32[(7644)>>2] = $37;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $44 = HEAP32[(7652)>>2]|0;
 $45 = ($3|0)==($44|0);
 if ($45) {
  $46 = HEAP32[(7640)>>2]|0;
  $47 = (($46) + ($2))|0;
  $48 = ($47>>>0)<($nb>>>0);
  if ($48) {
   $newp$2 = 0;
   return ($newp$2|0);
  }
  $49 = (($47) - ($nb))|0;
  $50 = ($49>>>0)>(15);
  if ($50) {
   $51 = (($p) + ($nb)|0);
   $52 = (($51) + ($49)|0);
   $53 = $1 & 1;
   $54 = $53 | $nb;
   $55 = $54 | 2;
   HEAP32[$0>>2] = $55;
   $56 = ((($51)) + 4|0);
   $57 = $49 | 1;
   HEAP32[$56>>2] = $57;
   HEAP32[$52>>2] = $49;
   $58 = ((($52)) + 4|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = $59 & -2;
   HEAP32[$58>>2] = $60;
   $storemerge = $51;$storemerge1 = $49;
  } else {
   $61 = $1 & 1;
   $62 = $61 | $47;
   $63 = $62 | 2;
   HEAP32[$0>>2] = $63;
   $64 = (($p) + ($47)|0);
   $65 = ((($64)) + 4|0);
   $66 = HEAP32[$65>>2]|0;
   $67 = $66 | 1;
   HEAP32[$65>>2] = $67;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(7640)>>2] = $storemerge1;
  HEAP32[(7652)>>2] = $storemerge;
  $newp$2 = $p;
  return ($newp$2|0);
 }
 $68 = $8 & 2;
 $69 = ($68|0)==(0);
 if (!($69)) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $70 = $8 & -8;
 $71 = (($70) + ($2))|0;
 $72 = ($71>>>0)<($nb>>>0);
 if ($72) {
  $newp$2 = 0;
  return ($newp$2|0);
 }
 $73 = (($71) - ($nb))|0;
 $74 = $8 >>> 3;
 $75 = ($8>>>0)<(256);
 do {
  if ($75) {
   $76 = ((($3)) + 8|0);
   $77 = HEAP32[$76>>2]|0;
   $78 = ((($3)) + 12|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = $74 << 1;
   $81 = (7672 + ($80<<2)|0);
   $82 = ($77|0)==($81|0);
   if (!($82)) {
    $83 = ($77>>>0)<($4>>>0);
    if ($83) {
     _abort();
     // unreachable;
    }
    $84 = ((($77)) + 12|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==($3|0);
    if (!($86)) {
     _abort();
     // unreachable;
    }
   }
   $87 = ($79|0)==($77|0);
   if ($87) {
    $88 = 1 << $74;
    $89 = $88 ^ -1;
    $90 = HEAP32[1908]|0;
    $91 = $90 & $89;
    HEAP32[1908] = $91;
    break;
   }
   $92 = ($79|0)==($81|0);
   if ($92) {
    $$pre = ((($79)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $93 = ($79>>>0)<($4>>>0);
    if ($93) {
     _abort();
     // unreachable;
    }
    $94 = ((($79)) + 8|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==($3|0);
    if ($96) {
     $$pre$phiZ2D = $94;
    } else {
     _abort();
     // unreachable;
    }
   }
   $97 = ((($77)) + 12|0);
   HEAP32[$97>>2] = $79;
   HEAP32[$$pre$phiZ2D>>2] = $77;
  } else {
   $98 = ((($3)) + 24|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = ((($3)) + 12|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==($3|0);
   do {
    if ($102) {
     $112 = ((($3)) + 16|0);
     $113 = ((($112)) + 4|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0|0);
     if ($115) {
      $116 = HEAP32[$112>>2]|0;
      $117 = ($116|0)==(0|0);
      if ($117) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $116;$RP$1 = $112;
      }
     } else {
      $R$1 = $114;$RP$1 = $113;
     }
     while(1) {
      $118 = ((($R$1)) + 20|0);
      $119 = HEAP32[$118>>2]|0;
      $120 = ($119|0)==(0|0);
      if (!($120)) {
       $R$1 = $119;$RP$1 = $118;
       continue;
      }
      $121 = ((($R$1)) + 16|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0|0);
      if ($123) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $122;$RP$1 = $121;
      }
     }
     $124 = ($RP$1$lcssa>>>0)<($4>>>0);
     if ($124) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $103 = ((($3)) + 8|0);
     $104 = HEAP32[$103>>2]|0;
     $105 = ($104>>>0)<($4>>>0);
     if ($105) {
      _abort();
      // unreachable;
     }
     $106 = ((($104)) + 12|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = ($107|0)==($3|0);
     if (!($108)) {
      _abort();
      // unreachable;
     }
     $109 = ((($101)) + 8|0);
     $110 = HEAP32[$109>>2]|0;
     $111 = ($110|0)==($3|0);
     if ($111) {
      HEAP32[$106>>2] = $101;
      HEAP32[$109>>2] = $104;
      $R$3 = $101;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $125 = ($99|0)==(0|0);
   if (!($125)) {
    $126 = ((($3)) + 28|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = (7936 + ($127<<2)|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = ($3|0)==($129|0);
    if ($130) {
     HEAP32[$128>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $131 = 1 << $127;
      $132 = $131 ^ -1;
      $133 = HEAP32[(7636)>>2]|0;
      $134 = $133 & $132;
      HEAP32[(7636)>>2] = $134;
      break;
     }
    } else {
     $135 = HEAP32[(7648)>>2]|0;
     $136 = ($99>>>0)<($135>>>0);
     if ($136) {
      _abort();
      // unreachable;
     }
     $137 = ((($99)) + 16|0);
     $138 = HEAP32[$137>>2]|0;
     $139 = ($138|0)==($3|0);
     if ($139) {
      HEAP32[$137>>2] = $R$3;
     } else {
      $140 = ((($99)) + 20|0);
      HEAP32[$140>>2] = $R$3;
     }
     $141 = ($R$3|0)==(0|0);
     if ($141) {
      break;
     }
    }
    $142 = HEAP32[(7648)>>2]|0;
    $143 = ($R$3>>>0)<($142>>>0);
    if ($143) {
     _abort();
     // unreachable;
    }
    $144 = ((($R$3)) + 24|0);
    HEAP32[$144>>2] = $99;
    $145 = ((($3)) + 16|0);
    $146 = HEAP32[$145>>2]|0;
    $147 = ($146|0)==(0|0);
    do {
     if (!($147)) {
      $148 = ($146>>>0)<($142>>>0);
      if ($148) {
       _abort();
       // unreachable;
      } else {
       $149 = ((($R$3)) + 16|0);
       HEAP32[$149>>2] = $146;
       $150 = ((($146)) + 24|0);
       HEAP32[$150>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $151 = ((($145)) + 4|0);
    $152 = HEAP32[$151>>2]|0;
    $153 = ($152|0)==(0|0);
    if (!($153)) {
     $154 = HEAP32[(7648)>>2]|0;
     $155 = ($152>>>0)<($154>>>0);
     if ($155) {
      _abort();
      // unreachable;
     } else {
      $156 = ((($R$3)) + 20|0);
      HEAP32[$156>>2] = $152;
      $157 = ((($152)) + 24|0);
      HEAP32[$157>>2] = $R$3;
      break;
     }
    }
   }
  }
 } while(0);
 $158 = ($73>>>0)<(16);
 if ($158) {
  $159 = $1 & 1;
  $160 = $71 | $159;
  $161 = $160 | 2;
  HEAP32[$0>>2] = $161;
  $162 = (($p) + ($71)|0);
  $163 = ((($162)) + 4|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = $164 | 1;
  HEAP32[$163>>2] = $165;
  $newp$2 = $p;
  return ($newp$2|0);
 } else {
  $166 = (($p) + ($nb)|0);
  $167 = $1 & 1;
  $168 = $167 | $nb;
  $169 = $168 | 2;
  HEAP32[$0>>2] = $169;
  $170 = ((($166)) + 4|0);
  $171 = $73 | 3;
  HEAP32[$170>>2] = $171;
  $172 = (($166) + ($73)|0);
  $173 = ((($172)) + 4|0);
  $174 = HEAP32[$173>>2]|0;
  $175 = $174 | 1;
  HEAP32[$173>>2] = $175;
  _dispose_chunk($166,$73);
  $newp$2 = $p;
  return ($newp$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($p,$psize) {
 $p = $p|0;
 $psize = $psize|0;
 var $$1 = 0, $$14 = 0, $$2 = 0, $$lcssa = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F17$0 = 0, $I20$0 = 0, $K21$0 = 0, $R$1 = 0, $R$1$lcssa = 0;
 var $R$3 = 0, $R7$1 = 0, $R7$1$lcssa = 0, $R7$3 = 0, $RP$1 = 0, $RP$1$lcssa = 0, $RP9$1 = 0, $RP9$1$lcssa = 0, $T$0 = 0, $T$0$lcssa = 0, $T$0$lcssa30 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (($p) + ($psize)|0);
 $1 = ((($p)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 1;
 $4 = ($3|0)==(0);
 do {
  if ($4) {
   $5 = HEAP32[$p>>2]|0;
   $6 = $2 & 3;
   $7 = ($6|0)==(0);
   if ($7) {
    return;
   }
   $8 = (0 - ($5))|0;
   $9 = (($p) + ($8)|0);
   $10 = (($5) + ($psize))|0;
   $11 = HEAP32[(7648)>>2]|0;
   $12 = ($9>>>0)<($11>>>0);
   if ($12) {
    _abort();
    // unreachable;
   }
   $13 = HEAP32[(7652)>>2]|0;
   $14 = ($9|0)==($13|0);
   if ($14) {
    $99 = ((($0)) + 4|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = $100 & 3;
    $102 = ($101|0)==(3);
    if (!($102)) {
     $$1 = $9;$$14 = $10;
     break;
    }
    HEAP32[(7640)>>2] = $10;
    $103 = $100 & -2;
    HEAP32[$99>>2] = $103;
    $104 = $10 | 1;
    $105 = ((($9)) + 4|0);
    HEAP32[$105>>2] = $104;
    $106 = (($9) + ($10)|0);
    HEAP32[$106>>2] = $10;
    return;
   }
   $15 = $5 >>> 3;
   $16 = ($5>>>0)<(256);
   if ($16) {
    $17 = ((($9)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($9)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $15 << 1;
    $22 = (7672 + ($21<<2)|0);
    $23 = ($18|0)==($22|0);
    if (!($23)) {
     $24 = ($18>>>0)<($11>>>0);
     if ($24) {
      _abort();
      // unreachable;
     }
     $25 = ((($18)) + 12|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = ($26|0)==($9|0);
     if (!($27)) {
      _abort();
      // unreachable;
     }
    }
    $28 = ($20|0)==($18|0);
    if ($28) {
     $29 = 1 << $15;
     $30 = $29 ^ -1;
     $31 = HEAP32[1908]|0;
     $32 = $31 & $30;
     HEAP32[1908] = $32;
     $$1 = $9;$$14 = $10;
     break;
    }
    $33 = ($20|0)==($22|0);
    if ($33) {
     $$pre23 = ((($20)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $34 = ($20>>>0)<($11>>>0);
     if ($34) {
      _abort();
      // unreachable;
     }
     $35 = ((($20)) + 8|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = ($36|0)==($9|0);
     if ($37) {
      $$pre$phi24Z2D = $35;
     } else {
      _abort();
      // unreachable;
     }
    }
    $38 = ((($18)) + 12|0);
    HEAP32[$38>>2] = $20;
    HEAP32[$$pre$phi24Z2D>>2] = $18;
    $$1 = $9;$$14 = $10;
    break;
   }
   $39 = ((($9)) + 24|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($9)) + 12|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==($9|0);
   do {
    if ($43) {
     $53 = ((($9)) + 16|0);
     $54 = ((($53)) + 4|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = ($55|0)==(0|0);
     if ($56) {
      $57 = HEAP32[$53>>2]|0;
      $58 = ($57|0)==(0|0);
      if ($58) {
       $R$3 = 0;
       break;
      } else {
       $R$1 = $57;$RP$1 = $53;
      }
     } else {
      $R$1 = $55;$RP$1 = $54;
     }
     while(1) {
      $59 = ((($R$1)) + 20|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0|0);
      if (!($61)) {
       $R$1 = $60;$RP$1 = $59;
       continue;
      }
      $62 = ((($R$1)) + 16|0);
      $63 = HEAP32[$62>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $R$1$lcssa = $R$1;$RP$1$lcssa = $RP$1;
       break;
      } else {
       $R$1 = $63;$RP$1 = $62;
      }
     }
     $65 = ($RP$1$lcssa>>>0)<($11>>>0);
     if ($65) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$RP$1$lcssa>>2] = 0;
      $R$3 = $R$1$lcssa;
      break;
     }
    } else {
     $44 = ((($9)) + 8|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = ($45>>>0)<($11>>>0);
     if ($46) {
      _abort();
      // unreachable;
     }
     $47 = ((($45)) + 12|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = ($48|0)==($9|0);
     if (!($49)) {
      _abort();
      // unreachable;
     }
     $50 = ((($42)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==($9|0);
     if ($52) {
      HEAP32[$47>>2] = $42;
      HEAP32[$50>>2] = $45;
      $R$3 = $42;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $66 = ($40|0)==(0|0);
   if ($66) {
    $$1 = $9;$$14 = $10;
   } else {
    $67 = ((($9)) + 28|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = (7936 + ($68<<2)|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($9|0)==($70|0);
    if ($71) {
     HEAP32[$69>>2] = $R$3;
     $cond = ($R$3|0)==(0|0);
     if ($cond) {
      $72 = 1 << $68;
      $73 = $72 ^ -1;
      $74 = HEAP32[(7636)>>2]|0;
      $75 = $74 & $73;
      HEAP32[(7636)>>2] = $75;
      $$1 = $9;$$14 = $10;
      break;
     }
    } else {
     $76 = HEAP32[(7648)>>2]|0;
     $77 = ($40>>>0)<($76>>>0);
     if ($77) {
      _abort();
      // unreachable;
     }
     $78 = ((($40)) + 16|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)==($9|0);
     if ($80) {
      HEAP32[$78>>2] = $R$3;
     } else {
      $81 = ((($40)) + 20|0);
      HEAP32[$81>>2] = $R$3;
     }
     $82 = ($R$3|0)==(0|0);
     if ($82) {
      $$1 = $9;$$14 = $10;
      break;
     }
    }
    $83 = HEAP32[(7648)>>2]|0;
    $84 = ($R$3>>>0)<($83>>>0);
    if ($84) {
     _abort();
     // unreachable;
    }
    $85 = ((($R$3)) + 24|0);
    HEAP32[$85>>2] = $40;
    $86 = ((($9)) + 16|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0|0);
    do {
     if (!($88)) {
      $89 = ($87>>>0)<($83>>>0);
      if ($89) {
       _abort();
       // unreachable;
      } else {
       $90 = ((($R$3)) + 16|0);
       HEAP32[$90>>2] = $87;
       $91 = ((($87)) + 24|0);
       HEAP32[$91>>2] = $R$3;
       break;
      }
     }
    } while(0);
    $92 = ((($86)) + 4|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    if ($94) {
     $$1 = $9;$$14 = $10;
    } else {
     $95 = HEAP32[(7648)>>2]|0;
     $96 = ($93>>>0)<($95>>>0);
     if ($96) {
      _abort();
      // unreachable;
     } else {
      $97 = ((($R$3)) + 20|0);
      HEAP32[$97>>2] = $93;
      $98 = ((($93)) + 24|0);
      HEAP32[$98>>2] = $R$3;
      $$1 = $9;$$14 = $10;
      break;
     }
    }
   }
  } else {
   $$1 = $p;$$14 = $psize;
  }
 } while(0);
 $107 = HEAP32[(7648)>>2]|0;
 $108 = ($0>>>0)<($107>>>0);
 if ($108) {
  _abort();
  // unreachable;
 }
 $109 = ((($0)) + 4|0);
 $110 = HEAP32[$109>>2]|0;
 $111 = $110 & 2;
 $112 = ($111|0)==(0);
 if ($112) {
  $113 = HEAP32[(7656)>>2]|0;
  $114 = ($0|0)==($113|0);
  if ($114) {
   $115 = HEAP32[(7644)>>2]|0;
   $116 = (($115) + ($$14))|0;
   HEAP32[(7644)>>2] = $116;
   HEAP32[(7656)>>2] = $$1;
   $117 = $116 | 1;
   $118 = ((($$1)) + 4|0);
   HEAP32[$118>>2] = $117;
   $119 = HEAP32[(7652)>>2]|0;
   $120 = ($$1|0)==($119|0);
   if (!($120)) {
    return;
   }
   HEAP32[(7652)>>2] = 0;
   HEAP32[(7640)>>2] = 0;
   return;
  }
  $121 = HEAP32[(7652)>>2]|0;
  $122 = ($0|0)==($121|0);
  if ($122) {
   $123 = HEAP32[(7640)>>2]|0;
   $124 = (($123) + ($$14))|0;
   HEAP32[(7640)>>2] = $124;
   HEAP32[(7652)>>2] = $$1;
   $125 = $124 | 1;
   $126 = ((($$1)) + 4|0);
   HEAP32[$126>>2] = $125;
   $127 = (($$1) + ($124)|0);
   HEAP32[$127>>2] = $124;
   return;
  }
  $128 = $110 & -8;
  $129 = (($128) + ($$14))|0;
  $130 = $110 >>> 3;
  $131 = ($110>>>0)<(256);
  do {
   if ($131) {
    $132 = ((($0)) + 8|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ((($0)) + 12|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = $130 << 1;
    $137 = (7672 + ($136<<2)|0);
    $138 = ($133|0)==($137|0);
    if (!($138)) {
     $139 = ($133>>>0)<($107>>>0);
     if ($139) {
      _abort();
      // unreachable;
     }
     $140 = ((($133)) + 12|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($0|0);
     if (!($142)) {
      _abort();
      // unreachable;
     }
    }
    $143 = ($135|0)==($133|0);
    if ($143) {
     $144 = 1 << $130;
     $145 = $144 ^ -1;
     $146 = HEAP32[1908]|0;
     $147 = $146 & $145;
     HEAP32[1908] = $147;
     break;
    }
    $148 = ($135|0)==($137|0);
    if ($148) {
     $$pre21 = ((($135)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $149 = ($135>>>0)<($107>>>0);
     if ($149) {
      _abort();
      // unreachable;
     }
     $150 = ((($135)) + 8|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)==($0|0);
     if ($152) {
      $$pre$phi22Z2D = $150;
     } else {
      _abort();
      // unreachable;
     }
    }
    $153 = ((($133)) + 12|0);
    HEAP32[$153>>2] = $135;
    HEAP32[$$pre$phi22Z2D>>2] = $133;
   } else {
    $154 = ((($0)) + 24|0);
    $155 = HEAP32[$154>>2]|0;
    $156 = ((($0)) + 12|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ($157|0)==($0|0);
    do {
     if ($158) {
      $168 = ((($0)) + 16|0);
      $169 = ((($168)) + 4|0);
      $170 = HEAP32[$169>>2]|0;
      $171 = ($170|0)==(0|0);
      if ($171) {
       $172 = HEAP32[$168>>2]|0;
       $173 = ($172|0)==(0|0);
       if ($173) {
        $R7$3 = 0;
        break;
       } else {
        $R7$1 = $172;$RP9$1 = $168;
       }
      } else {
       $R7$1 = $170;$RP9$1 = $169;
      }
      while(1) {
       $174 = ((($R7$1)) + 20|0);
       $175 = HEAP32[$174>>2]|0;
       $176 = ($175|0)==(0|0);
       if (!($176)) {
        $R7$1 = $175;$RP9$1 = $174;
        continue;
       }
       $177 = ((($R7$1)) + 16|0);
       $178 = HEAP32[$177>>2]|0;
       $179 = ($178|0)==(0|0);
       if ($179) {
        $R7$1$lcssa = $R7$1;$RP9$1$lcssa = $RP9$1;
        break;
       } else {
        $R7$1 = $178;$RP9$1 = $177;
       }
      }
      $180 = ($RP9$1$lcssa>>>0)<($107>>>0);
      if ($180) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$RP9$1$lcssa>>2] = 0;
       $R7$3 = $R7$1$lcssa;
       break;
      }
     } else {
      $159 = ((($0)) + 8|0);
      $160 = HEAP32[$159>>2]|0;
      $161 = ($160>>>0)<($107>>>0);
      if ($161) {
       _abort();
       // unreachable;
      }
      $162 = ((($160)) + 12|0);
      $163 = HEAP32[$162>>2]|0;
      $164 = ($163|0)==($0|0);
      if (!($164)) {
       _abort();
       // unreachable;
      }
      $165 = ((($157)) + 8|0);
      $166 = HEAP32[$165>>2]|0;
      $167 = ($166|0)==($0|0);
      if ($167) {
       HEAP32[$162>>2] = $157;
       HEAP32[$165>>2] = $160;
       $R7$3 = $157;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $181 = ($155|0)==(0|0);
    if (!($181)) {
     $182 = ((($0)) + 28|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = (7936 + ($183<<2)|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = ($0|0)==($185|0);
     if ($186) {
      HEAP32[$184>>2] = $R7$3;
      $cond16 = ($R7$3|0)==(0|0);
      if ($cond16) {
       $187 = 1 << $183;
       $188 = $187 ^ -1;
       $189 = HEAP32[(7636)>>2]|0;
       $190 = $189 & $188;
       HEAP32[(7636)>>2] = $190;
       break;
      }
     } else {
      $191 = HEAP32[(7648)>>2]|0;
      $192 = ($155>>>0)<($191>>>0);
      if ($192) {
       _abort();
       // unreachable;
      }
      $193 = ((($155)) + 16|0);
      $194 = HEAP32[$193>>2]|0;
      $195 = ($194|0)==($0|0);
      if ($195) {
       HEAP32[$193>>2] = $R7$3;
      } else {
       $196 = ((($155)) + 20|0);
       HEAP32[$196>>2] = $R7$3;
      }
      $197 = ($R7$3|0)==(0|0);
      if ($197) {
       break;
      }
     }
     $198 = HEAP32[(7648)>>2]|0;
     $199 = ($R7$3>>>0)<($198>>>0);
     if ($199) {
      _abort();
      // unreachable;
     }
     $200 = ((($R7$3)) + 24|0);
     HEAP32[$200>>2] = $155;
     $201 = ((($0)) + 16|0);
     $202 = HEAP32[$201>>2]|0;
     $203 = ($202|0)==(0|0);
     do {
      if (!($203)) {
       $204 = ($202>>>0)<($198>>>0);
       if ($204) {
        _abort();
        // unreachable;
       } else {
        $205 = ((($R7$3)) + 16|0);
        HEAP32[$205>>2] = $202;
        $206 = ((($202)) + 24|0);
        HEAP32[$206>>2] = $R7$3;
        break;
       }
      }
     } while(0);
     $207 = ((($201)) + 4|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ($208|0)==(0|0);
     if (!($209)) {
      $210 = HEAP32[(7648)>>2]|0;
      $211 = ($208>>>0)<($210>>>0);
      if ($211) {
       _abort();
       // unreachable;
      } else {
       $212 = ((($R7$3)) + 20|0);
       HEAP32[$212>>2] = $208;
       $213 = ((($208)) + 24|0);
       HEAP32[$213>>2] = $R7$3;
       break;
      }
     }
    }
   }
  } while(0);
  $214 = $129 | 1;
  $215 = ((($$1)) + 4|0);
  HEAP32[$215>>2] = $214;
  $216 = (($$1) + ($129)|0);
  HEAP32[$216>>2] = $129;
  $217 = HEAP32[(7652)>>2]|0;
  $218 = ($$1|0)==($217|0);
  if ($218) {
   HEAP32[(7640)>>2] = $129;
   return;
  } else {
   $$2 = $129;
  }
 } else {
  $219 = $110 & -2;
  HEAP32[$109>>2] = $219;
  $220 = $$14 | 1;
  $221 = ((($$1)) + 4|0);
  HEAP32[$221>>2] = $220;
  $222 = (($$1) + ($$14)|0);
  HEAP32[$222>>2] = $$14;
  $$2 = $$14;
 }
 $223 = $$2 >>> 3;
 $224 = ($$2>>>0)<(256);
 if ($224) {
  $225 = $223 << 1;
  $226 = (7672 + ($225<<2)|0);
  $227 = HEAP32[1908]|0;
  $228 = 1 << $223;
  $229 = $227 & $228;
  $230 = ($229|0)==(0);
  if ($230) {
   $231 = $227 | $228;
   HEAP32[1908] = $231;
   $$pre = ((($226)) + 8|0);
   $$pre$phiZ2D = $$pre;$F17$0 = $226;
  } else {
   $232 = ((($226)) + 8|0);
   $233 = HEAP32[$232>>2]|0;
   $234 = HEAP32[(7648)>>2]|0;
   $235 = ($233>>>0)<($234>>>0);
   if ($235) {
    _abort();
    // unreachable;
   } else {
    $$pre$phiZ2D = $232;$F17$0 = $233;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $236 = ((($F17$0)) + 12|0);
  HEAP32[$236>>2] = $$1;
  $237 = ((($$1)) + 8|0);
  HEAP32[$237>>2] = $F17$0;
  $238 = ((($$1)) + 12|0);
  HEAP32[$238>>2] = $226;
  return;
 }
 $239 = $$2 >>> 8;
 $240 = ($239|0)==(0);
 if ($240) {
  $I20$0 = 0;
 } else {
  $241 = ($$2>>>0)>(16777215);
  if ($241) {
   $I20$0 = 31;
  } else {
   $242 = (($239) + 1048320)|0;
   $243 = $242 >>> 16;
   $244 = $243 & 8;
   $245 = $239 << $244;
   $246 = (($245) + 520192)|0;
   $247 = $246 >>> 16;
   $248 = $247 & 4;
   $249 = $248 | $244;
   $250 = $245 << $248;
   $251 = (($250) + 245760)|0;
   $252 = $251 >>> 16;
   $253 = $252 & 2;
   $254 = $249 | $253;
   $255 = (14 - ($254))|0;
   $256 = $250 << $253;
   $257 = $256 >>> 15;
   $258 = (($255) + ($257))|0;
   $259 = $258 << 1;
   $260 = (($258) + 7)|0;
   $261 = $$2 >>> $260;
   $262 = $261 & 1;
   $263 = $262 | $259;
   $I20$0 = $263;
  }
 }
 $264 = (7936 + ($I20$0<<2)|0);
 $265 = ((($$1)) + 28|0);
 HEAP32[$265>>2] = $I20$0;
 $266 = ((($$1)) + 16|0);
 $267 = ((($$1)) + 20|0);
 HEAP32[$267>>2] = 0;
 HEAP32[$266>>2] = 0;
 $268 = HEAP32[(7636)>>2]|0;
 $269 = 1 << $I20$0;
 $270 = $268 & $269;
 $271 = ($270|0)==(0);
 if ($271) {
  $272 = $268 | $269;
  HEAP32[(7636)>>2] = $272;
  HEAP32[$264>>2] = $$1;
  $273 = ((($$1)) + 24|0);
  HEAP32[$273>>2] = $264;
  $274 = ((($$1)) + 12|0);
  HEAP32[$274>>2] = $$1;
  $275 = ((($$1)) + 8|0);
  HEAP32[$275>>2] = $$1;
  return;
 }
 $276 = HEAP32[$264>>2]|0;
 $277 = ($I20$0|0)==(31);
 $278 = $I20$0 >>> 1;
 $279 = (25 - ($278))|0;
 $280 = $277 ? 0 : $279;
 $281 = $$2 << $280;
 $K21$0 = $281;$T$0 = $276;
 while(1) {
  $282 = ((($T$0)) + 4|0);
  $283 = HEAP32[$282>>2]|0;
  $284 = $283 & -8;
  $285 = ($284|0)==($$2|0);
  if ($285) {
   $T$0$lcssa = $T$0;
   label = 127;
   break;
  }
  $286 = $K21$0 >>> 31;
  $287 = (((($T$0)) + 16|0) + ($286<<2)|0);
  $288 = $K21$0 << 1;
  $289 = HEAP32[$287>>2]|0;
  $290 = ($289|0)==(0|0);
  if ($290) {
   $$lcssa = $287;$T$0$lcssa30 = $T$0;
   label = 124;
   break;
  } else {
   $K21$0 = $288;$T$0 = $289;
  }
 }
 if ((label|0) == 124) {
  $291 = HEAP32[(7648)>>2]|0;
  $292 = ($$lcssa>>>0)<($291>>>0);
  if ($292) {
   _abort();
   // unreachable;
  }
  HEAP32[$$lcssa>>2] = $$1;
  $293 = ((($$1)) + 24|0);
  HEAP32[$293>>2] = $T$0$lcssa30;
  $294 = ((($$1)) + 12|0);
  HEAP32[$294>>2] = $$1;
  $295 = ((($$1)) + 8|0);
  HEAP32[$295>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $296 = ((($T$0$lcssa)) + 8|0);
  $297 = HEAP32[$296>>2]|0;
  $298 = HEAP32[(7648)>>2]|0;
  $299 = ($297>>>0)>=($298>>>0);
  $not$ = ($T$0$lcssa>>>0)>=($298>>>0);
  $300 = $299 & $not$;
  if (!($300)) {
   _abort();
   // unreachable;
  }
  $301 = ((($297)) + 12|0);
  HEAP32[$301>>2] = $$1;
  HEAP32[$296>>2] = $$1;
  $302 = ((($$1)) + 8|0);
  HEAP32[$302>>2] = $297;
  $303 = ((($$1)) + 12|0);
  HEAP32[$303>>2] = $T$0$lcssa;
  $304 = ((($$1)) + 24|0);
  HEAP32[$304>>2] = 0;
  return;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(77,($0|0),(6874|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1308);
  ___cxa_throw(($0|0),(104|0),(24|0));
  // unreachable;
 }
}
function __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(77,($0|0),(6874|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1328);
  ___cxa_throw(($0|0),(120|0),(24|0));
  // unreachable;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this,$__str) {
 $this = $this|0;
 $__str = $__str|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  ;HEAP32[$this>>2]=HEAP32[$__str>>2]|0;HEAP32[$this+4>>2]=HEAP32[$__str+4>>2]|0;HEAP32[$this+8>>2]=HEAP32[$__str+8>>2]|0;
 } else {
  $3 = ((($__str)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($__str)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$4,$6);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz) {
 $this = $this|0;
 $__s = $__s|0;
 $__sz = $__sz|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__p$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__sz>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = ($__sz>>>0)<(11);
 if ($1) {
  $2 = $__sz << 1;
  $3 = $2&255;
  HEAP8[$this>>0] = $3;
  $4 = ((($this)) + 1|0);
  $__p$0 = $4;
 } else {
  $5 = (($__sz) + 16)|0;
  $6 = $5 & -16;
  $7 = (__Znwj($6)|0);
  $8 = ((($this)) + 8|0);
  HEAP32[$8>>2] = $7;
  $9 = $6 | 1;
  HEAP32[$this>>2] = $9;
  $10 = ((($this)) + 4|0);
  HEAP32[$10>>2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy(($__p$0|0),($__s|0),($__sz|0))|0;
 $11 = (($__p$0) + ($__sz)|0);
 HEAP8[$11>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_jjRKS4_($this,$__str,$__pos,$__n,$__a) {
 $this = $this|0;
 $__str = $__str|0;
 $__pos = $__pos|0;
 $__n = $__n|0;
 $__a = $__a|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$__str>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 $3 = ((($__str)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $0&255;
 $6 = $5 >>> 1;
 $7 = $2 ? $6 : $4;
 $8 = ($7>>>0)<($__pos>>>0);
 if ($8) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_out_of_rangeEv($this);
  // unreachable;
 } else {
  $9 = ((($__str)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ((($__str)) + 1|0);
  $12 = $2 ? $11 : $10;
  $13 = (($12) + ($__pos)|0);
  $14 = (($7) - ($__pos))|0;
  $15 = ($14>>>0)<($__n>>>0);
  $16 = $15 ? $14 : $__n;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$13,$16);
  return;
 }
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if (!($2)) {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  __ZdlPv($4);
 }
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 $__p_new_stuff = $__p_new_stuff|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-18 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = ($__n_add|0)==(0);
 if (!($21)) {
  $22 = (($18) + ($__n_copy)|0);
  _memcpy(($22|0),($__p_new_stuff|0),($__n_add|0))|0;
 }
 $23 = (($__old_sz) - ($__n_del))|0;
 $24 = ($23|0)==($__n_copy|0);
 if (!($24)) {
  $25 = (($23) - ($__n_copy))|0;
  $26 = (($18) + ($__n_copy)|0);
  $27 = (($26) + ($__n_add)|0);
  $28 = (($20) + ($__n_copy)|0);
  $29 = (($28) + ($__n_del)|0);
  _memcpy(($27|0),($29|0),($25|0))|0;
 }
 $30 = ($__old_cap|0)==(10);
 if (!($30)) {
  __ZdlPv($20);
 }
 $31 = ((($this)) + 8|0);
 HEAP32[$31>>2] = $18;
 $32 = $17 | 1;
 HEAP32[$this>>2] = $32;
 $33 = (($23) + ($__n_add))|0;
 $34 = ((($this)) + 4|0);
 HEAP32[$34>>2] = $33;
 $35 = (($18) + ($33)|0);
 HEAP8[$35>>0] = 0;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this,$__res_arg) {
 $this = $this|0;
 $__res_arg = $__res_arg|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0, $phitmp$i = 0;
 var $phitmp$i2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__res_arg>>>0)>(4294967279);
 if ($0) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $1 = HEAP8[$this>>0]|0;
 $2 = $1 & 1;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $22 = 10;$8 = $1;
 } else {
  $4 = HEAP32[$this>>2]|0;
  $5 = $4 & -2;
  $phitmp$i = (($5) + -1)|0;
  $6 = $4&255;
  $22 = $phitmp$i;$8 = $6;
 }
 $7 = $8 & 1;
 $9 = ($7<<24>>24)==(0);
 if ($9) {
  $12 = $8&255;
  $13 = $12 >>> 1;
  $14 = $13;
 } else {
  $10 = ((($this)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $14 = $11;
 }
 $15 = ($14>>>0)>($__res_arg>>>0);
 $16 = $15 ? $14 : $__res_arg;
 $17 = ($16>>>0)<(11);
 if ($17) {
  $20 = 10;
 } else {
  $18 = (($16) + 16)|0;
  $19 = $18 & -16;
  $phitmp$i2 = (($19) + -1)|0;
  $20 = $phitmp$i2;
 }
 $21 = ($20|0)==($22|0);
 L14: do {
  if (!($21)) {
   $23 = ($20|0)==(10);
   do {
    if ($23) {
     $24 = ((($this)) + 1|0);
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $__new_data$1 = $24;$__now_long$0$off0 = 0;$__p$0 = $26;$__was_long$0$off0 = 1;
    } else {
     $27 = ($20>>>0)>($22>>>0);
     $28 = (($20) + 1)|0;
     if ($27) {
      $29 = (__Znwj($28)|0);
      $__new_data$0 = $29;
     } else {
      __THREW__ = 0;
      $30 = (invoke_ii(46,($28|0))|0);
      $31 = __THREW__; __THREW__ = 0;
      $32 = $31&1;
      if ($32) {
       $33 = ___cxa_find_matching_catch_3(0|0)|0;
       $34 = tempRet0;
       (___cxa_begin_catch(($33|0))|0);
       ___cxa_end_catch();
       break L14;
      } else {
       $__new_data$0 = $30;
      }
     }
     $35 = $8 & 1;
     $36 = ($35<<24>>24)==(0);
     if ($36) {
      $39 = ((($this)) + 1|0);
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $39;$__was_long$0$off0 = 0;
      break;
     } else {
      $37 = ((($this)) + 8|0);
      $38 = HEAP32[$37>>2]|0;
      $__new_data$1 = $__new_data$0;$__now_long$0$off0 = 1;$__p$0 = $38;$__was_long$0$off0 = 1;
      break;
     }
    }
   } while(0);
   $40 = $8 & 1;
   $41 = ($40<<24>>24)==(0);
   if ($41) {
    $44 = $8&255;
    $45 = $44 >>> 1;
    $47 = $45;
   } else {
    $42 = ((($this)) + 4|0);
    $43 = HEAP32[$42>>2]|0;
    $47 = $43;
   }
   $46 = (($47) + 1)|0;
   _memcpy(($__new_data$1|0),($__p$0|0),($46|0))|0;
   if ($__was_long$0$off0) {
    __ZdlPv($__p$0);
   }
   if ($__now_long$0$off0) {
    $48 = (($20) + 1)|0;
    $49 = $48 | 1;
    HEAP32[$this>>2] = $49;
    $50 = ((($this)) + 4|0);
    HEAP32[$50>>2] = $14;
    $51 = ((($this)) + 8|0);
    HEAP32[$51>>2] = $__new_data$1;
    break;
   } else {
    $52 = $14 << 1;
    $53 = $52&255;
    HEAP8[$this>>0] = $53;
    break;
   }
  }
 } while(0);
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this,$__n,$__c) {
 $this = $this|0;
 $__n = $__n|0;
 $__c = $__c|0;
 var $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($__n|0)==(0);
 if (!($0)) {
  $1 = HEAP8[$this>>0]|0;
  $2 = $1 & 1;
  $3 = ($2<<24>>24)==(0);
  if ($3) {
   $16 = 10;$8 = $1;
  } else {
   $4 = HEAP32[$this>>2]|0;
   $5 = $4 & -2;
   $phitmp$i = (($5) + -1)|0;
   $6 = $4&255;
   $16 = $phitmp$i;$8 = $6;
  }
  $7 = $8 & 1;
  $9 = ($7<<24>>24)==(0);
  if ($9) {
   $12 = $8&255;
   $13 = $12 >>> 1;
   $15 = $13;
  } else {
   $10 = ((($this)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $15 = $11;
  }
  $14 = (($16) - ($15))|0;
  $17 = ($14>>>0)<($__n>>>0);
  if ($17) {
   $18 = (($__n) - ($16))|0;
   $19 = (($18) + ($15))|0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$16,$19,$15,$15,0,0);
   $$pre = HEAP8[$this>>0]|0;
   $21 = $$pre;
  } else {
   $21 = $8;
  }
  $20 = $21 & 1;
  $22 = ($20<<24>>24)==(0);
  if ($22) {
   $25 = ((($this)) + 1|0);
   $27 = $25;
  } else {
   $23 = ((($this)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $27 = $24;
  }
  $26 = (($27) + ($15)|0);
  _memset(($26|0),($__c|0),($__n|0))|0;
  $28 = (($15) + ($__n))|0;
  $29 = HEAP8[$this>>0]|0;
  $30 = $29 & 1;
  $31 = ($30<<24>>24)==(0);
  if ($31) {
   $33 = $28 << 1;
   $34 = $33&255;
   HEAP8[$this>>0] = $34;
  } else {
   $32 = ((($this)) + 4|0);
   HEAP32[$32>>2] = $28;
  }
  $35 = (($27) + ($28)|0);
  HEAP8[$35>>0] = 0;
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add) {
 $this = $this|0;
 $__old_cap = $__old_cap|0;
 $__delta_cap = $__delta_cap|0;
 $__old_sz = $__old_sz|0;
 $__n_copy = $__n_copy|0;
 $__n_del = $__n_del|0;
 $__n_add = $__n_add|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (-17 - ($__old_cap))|0;
 $1 = ($0>>>0)<($__delta_cap>>>0);
 if ($1) {
  __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
  // unreachable;
 }
 $2 = HEAP8[$this>>0]|0;
 $3 = $2 & 1;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $7 = ((($this)) + 1|0);
  $20 = $7;
 } else {
  $5 = ((($this)) + 8|0);
  $6 = HEAP32[$5>>2]|0;
  $20 = $6;
 }
 $8 = ($__old_cap>>>0)<(2147483623);
 if ($8) {
  $9 = (($__delta_cap) + ($__old_cap))|0;
  $10 = $__old_cap << 1;
  $11 = ($9>>>0)<($10>>>0);
  $12 = $11 ? $10 : $9;
  $13 = ($12>>>0)<(11);
  $14 = (($12) + 16)|0;
  $15 = $14 & -16;
  $16 = $13 ? 11 : $15;
  $17 = $16;
 } else {
  $17 = -17;
 }
 $18 = (__Znwj($17)|0);
 $19 = ($__n_copy|0)==(0);
 if (!($19)) {
  _memcpy(($18|0),($20|0),($__n_copy|0))|0;
 }
 $21 = (($__old_sz) - ($__n_del))|0;
 $22 = ($21|0)==($__n_copy|0);
 if (!($22)) {
  $23 = (($21) - ($__n_copy))|0;
  $24 = (($18) + ($__n_copy)|0);
  $25 = (($24) + ($__n_add)|0);
  $26 = (($20) + ($__n_copy)|0);
  $27 = (($26) + ($__n_del)|0);
  _memcpy(($25|0),($27|0),($23|0))|0;
 }
 $28 = ($__old_cap|0)==(10);
 if (!($28)) {
  __ZdlPv($20);
 }
 $29 = ((($this)) + 8|0);
 HEAP32[$29>>2] = $18;
 $30 = $17 | 1;
 HEAP32[$this>>2] = $30;
 return;
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n) {
 $this = $this|0;
 $__s = $__s|0;
 $__n = $__n|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $15 = 10;$7 = $0;
 } else {
  $3 = HEAP32[$this>>2]|0;
  $4 = $3 & -2;
  $phitmp$i = (($4) + -1)|0;
  $5 = $3&255;
  $15 = $phitmp$i;$7 = $5;
 }
 $6 = $7 & 1;
 $8 = ($6<<24>>24)==(0);
 if ($8) {
  $11 = $7&255;
  $12 = $11 >>> 1;
  $14 = $12;
 } else {
  $9 = ((($this)) + 4|0);
  $10 = HEAP32[$9>>2]|0;
  $14 = $10;
 }
 $13 = (($15) - ($14))|0;
 $16 = ($13>>>0)<($__n>>>0);
 if ($16) {
  $33 = (($__n) - ($15))|0;
  $34 = (($33) + ($14))|0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$15,$34,$14,$14,0,$__n,$__s);
 } else {
  $17 = ($__n|0)==(0);
  if (!($17)) {
   $18 = $7 & 1;
   $19 = ($18<<24>>24)==(0);
   if ($19) {
    $22 = ((($this)) + 1|0);
    $24 = $22;
   } else {
    $20 = ((($this)) + 8|0);
    $21 = HEAP32[$20>>2]|0;
    $24 = $21;
   }
   $23 = (($24) + ($14)|0);
   _memcpy(($23|0),($__s|0),($__n|0))|0;
   $25 = (($14) + ($__n))|0;
   $26 = HEAP8[$this>>0]|0;
   $27 = $26 & 1;
   $28 = ($27<<24>>24)==(0);
   if ($28) {
    $30 = $25 << 1;
    $31 = $30&255;
    HEAP8[$this>>0] = $31;
   } else {
    $29 = ((($this)) + 4|0);
    HEAP32[$29>>2] = $25;
   }
   $32 = (($24) + ($25)|0);
   HEAP8[$32>>0] = 0;
  }
 }
 return ($this|0);
}
function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this,$__s) {
 $this = $this|0;
 $__s = $__s|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($__s)|0);
 $1 = (__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$0)|0);
 return ($1|0);
}
function __ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE5rfindEcj($this,$__c,$__pos) {
 $this = $this|0;
 $__c = $__c|0;
 $__pos = $__pos|0;
 var $$01$i = 0, $$lcssa = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $__ps$0$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP8[$this>>0]|0;
 $1 = $0 & 1;
 $2 = ($1<<24>>24)==(0);
 if ($2) {
  $7 = ((($this)) + 1|0);
  $8 = $0&255;
  $9 = $8 >>> 1;
  $10 = $9;$15 = $7;
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ((($this)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $10 = $6;$15 = $4;
 }
 $11 = ($10|0)==(0);
 L5: do {
  if ($11) {
   $23 = -1;
  } else {
   $12 = ($10>>>0)>($__pos>>>0);
   $13 = (($__pos) + 1)|0;
   $$01$i = $12 ? $13 : $10;
   $14 = (($15) + ($$01$i)|0);
   $__ps$0$i = $14;
   while(1) {
    $16 = ($__ps$0$i|0)==($15|0);
    if ($16) {
     $23 = -1;
     break L5;
    }
    $17 = ((($__ps$0$i)) + -1|0);
    $18 = HEAP8[$17>>0]|0;
    $19 = ($18<<24>>24)==($__c<<24>>24);
    if ($19) {
     $$lcssa = $17;
     break;
    } else {
     $__ps$0$i = $17;
    }
   }
   $20 = $$lcssa;
   $21 = $15;
   $22 = (($20) - ($21))|0;
   $23 = $22;
  }
 } while(0);
 return ($23|0);
}
function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (___cxa_allocate_exception(8)|0);
 __THREW__ = 0;
 invoke_vii(77,($0|0),(6887|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___cxa_free_exception(($0|0));
  ___resumeException($3|0);
  // unreachable;
 } else {
  HEAP32[$0>>2] = (1308);
  ___cxa_throw(($0|0),(104|0),(24|0));
  // unreachable;
 }
}
function __ZNSt3__118__libcpp_refstringC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_strlen($msg)|0);
 $1 = (($0) + 13)|0;
 $2 = (__Znwj($1)|0);
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $0;
 $4 = ((($2)) + 8|0);
 HEAP32[$4>>2] = 0;
 $5 = ((($2)) + 12|0);
 $6 = (($0) + 1)|0;
 _memcpy(($5|0),($msg|0),($6|0))|0;
 HEAP32[$this>>2] = $5;
 return;
}
function __ZNSt11logic_errorC2EPKc($this,$msg) {
 $this = $this|0;
 $msg = $msg|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (1288);
 $0 = ((($this)) + 4|0);
 __THREW__ = 0;
 invoke_vii(78,($0|0),($msg|0));
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $3 = ___cxa_find_matching_catch_2()|0;
  $4 = tempRet0;
  ___resumeException($3|0);
  // unreachable;
 } else {
  return;
 }
}
function __ZL25default_terminate_handlerv() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thrown_object = 0, $vararg_buffer = 0, $vararg_buffer10 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $thrown_object = sp + 36|0;
 $0 = (___cxa_get_globals_fast()|0);
 $1 = ($0|0)==(0|0);
 if (!($1)) {
  $2 = HEAP32[$0>>2]|0;
  $3 = ($2|0)==(0|0);
  if (!($3)) {
   $4 = ((($2)) + 80|0);
   $5 = ((($2)) + 48|0);
   $6 = $5;
   $7 = $6;
   $8 = HEAP32[$7>>2]|0;
   $9 = (($6) + 4)|0;
   $10 = $9;
   $11 = HEAP32[$10>>2]|0;
   $12 = $8 & -256;
   $13 = ($12|0)==(1126902528);
   $14 = ($11|0)==(1129074247);
   $15 = $13 & $14;
   if (!($15)) {
    $36 = HEAP32[314]|0;
    HEAP32[$vararg_buffer7>>2] = $36;
    _abort_message(7271,$vararg_buffer7);
    // unreachable;
   }
   $16 = ($8|0)==(1126902529);
   $17 = ($11|0)==(1129074247);
   $18 = $16 & $17;
   if ($18) {
    $19 = ((($2)) + 44|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = $20;
   } else {
    $21 = $4;
   }
   HEAP32[$thrown_object>>2] = $21;
   $22 = HEAP32[$2>>2]|0;
   $23 = ((($22)) + 4|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = HEAP32[2]|0;
   $26 = ((($25)) + 16|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (FUNCTION_TABLE_iiii[$27 & 127](8,$22,$thrown_object)|0);
   if ($28) {
    $29 = HEAP32[$thrown_object>>2]|0;
    $30 = HEAP32[314]|0;
    $31 = HEAP32[$29>>2]|0;
    $32 = ((($31)) + 8|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (FUNCTION_TABLE_ii[$33 & 63]($29)|0);
    HEAP32[$vararg_buffer>>2] = $30;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $24;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = $34;
    _abort_message(7185,$vararg_buffer);
    // unreachable;
   } else {
    $35 = HEAP32[314]|0;
    HEAP32[$vararg_buffer3>>2] = $35;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $24;
    _abort_message(7230,$vararg_buffer3);
    // unreachable;
   }
  }
 }
 _abort_message(7309,$vararg_buffer10);
 // unreachable;
}
function ___cxa_get_globals_fast() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_once((8128|0),(79|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  $2 = HEAP32[2033]|0;
  $3 = (_pthread_getspecific(($2|0))|0);
  STACKTOP = sp;return ($3|0);
 } else {
  _abort_message(6997,$vararg_buffer);
  // unreachable;
 }
 return (0)|0;
}
function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var $0 = 0, $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 $0 = (_pthread_key_create((8132|0),(80|0))|0);
 $1 = ($0|0)==(0);
 if ($1) {
  STACKTOP = sp;return;
 } else {
  _abort_message(6947,$vararg_buffer);
  // unreachable;
 }
}
function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p|0;
 var $0 = 0, $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer = sp;
 _free($p);
 $0 = HEAP32[2033]|0;
 $1 = (_pthread_setspecific(($0|0),(0|0))|0);
 $2 = ($1|0)==(0);
 if ($2) {
  STACKTOP = sp;return;
 } else {
  _abort_message(6894,$vararg_buffer);
  // unreachable;
 }
}
function _abort_message($format,$varargs) {
 $format = $format|0;
 $varargs = $varargs|0;
 var $0 = 0, $list = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $list = sp;
 HEAP32[$list>>2] = $varargs;
 $0 = HEAP32[264]|0;
 (_vfprintf($0,$format,$list)|0);
 (_fputc(10,$0)|0);
 _abort();
 // unreachable;
}
function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9type_infoD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZdlPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($ptr);
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr) {
 $this = $this|0;
 $thrown_type = $thrown_type|0;
 $adjustedPtr = $adjustedPtr|0;
 var $$0 = 0, $$2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $info = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = ($this|0)==($thrown_type|0);
 if ($0) {
  $$2 = 1;
 } else {
  $1 = ($thrown_type|0)==(0|0);
  if ($1) {
   $$2 = 0;
  } else {
   $2 = (___dynamic_cast($thrown_type,48,16,0)|0);
   $3 = ($2|0)==(0|0);
   if ($3) {
    $$2 = 0;
   } else {
    dest=$info; stop=dest+56|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
    HEAP32[$info>>2] = $2;
    $4 = ((($info)) + 8|0);
    HEAP32[$4>>2] = $this;
    $5 = ((($info)) + 12|0);
    HEAP32[$5>>2] = -1;
    $6 = ((($info)) + 48|0);
    HEAP32[$6>>2] = 1;
    $7 = HEAP32[$2>>2]|0;
    $8 = ((($7)) + 28|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = HEAP32[$adjustedPtr>>2]|0;
    FUNCTION_TABLE_viiii[$9 & 63]($2,$info,$10,1);
    $11 = ((($info)) + 24|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==(1);
    if ($13) {
     $14 = ((($info)) + 16|0);
     $15 = HEAP32[$14>>2]|0;
     HEAP32[$adjustedPtr>>2] = $15;
     $$0 = 1;
    } else {
     $$0 = 0;
    }
    $$2 = $$0;
   }
  }
 }
 STACKTOP = sp;return ($$2|0);
}
function ___dynamic_cast($static_ptr,$static_type,$dst_type,$src2dst_offset) {
 $static_ptr = $static_ptr|0;
 $static_type = $static_type|0;
 $dst_type = $dst_type|0;
 $src2dst_offset = $src2dst_offset|0;
 var $$ = 0, $$8 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_ptr$0 = 0, $info = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $info = sp;
 $0 = HEAP32[$static_ptr>>2]|0;
 $1 = ((($0)) + -8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($static_ptr) + ($2)|0);
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$info>>2] = $dst_type;
 $6 = ((($info)) + 4|0);
 HEAP32[$6>>2] = $static_ptr;
 $7 = ((($info)) + 8|0);
 HEAP32[$7>>2] = $static_type;
 $8 = ((($info)) + 12|0);
 HEAP32[$8>>2] = $src2dst_offset;
 $9 = ((($info)) + 16|0);
 $10 = ((($info)) + 20|0);
 $11 = ((($info)) + 24|0);
 $12 = ((($info)) + 28|0);
 $13 = ((($info)) + 32|0);
 $14 = ((($info)) + 40|0);
 $15 = ($5|0)==($dst_type|0);
 dest=$9; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));HEAP16[$9+36>>1]=0|0;HEAP8[$9+38>>0]=0|0;
 L1: do {
  if ($15) {
   $16 = ((($info)) + 48|0);
   HEAP32[$16>>2] = 1;
   $17 = HEAP32[$dst_type>>2]|0;
   $18 = ((($17)) + 20|0);
   $19 = HEAP32[$18>>2]|0;
   FUNCTION_TABLE_viiiiii[$19 & 127]($dst_type,$info,$3,$3,1,0);
   $20 = HEAP32[$11>>2]|0;
   $21 = ($20|0)==(1);
   $$ = $21 ? $3 : 0;
   $dst_ptr$0 = $$;
  } else {
   $22 = ((($info)) + 36|0);
   $23 = HEAP32[$5>>2]|0;
   $24 = ((($23)) + 24|0);
   $25 = HEAP32[$24>>2]|0;
   FUNCTION_TABLE_viiiii[$25 & 31]($5,$info,$3,1,0);
   $26 = HEAP32[$22>>2]|0;
   switch ($26|0) {
   case 0:  {
    $27 = HEAP32[$14>>2]|0;
    $28 = ($27|0)==(1);
    $29 = HEAP32[$12>>2]|0;
    $30 = ($29|0)==(1);
    $or$cond = $28 & $30;
    $31 = HEAP32[$13>>2]|0;
    $32 = ($31|0)==(1);
    $or$cond3 = $or$cond & $32;
    $33 = HEAP32[$10>>2]|0;
    $$8 = $or$cond3 ? $33 : 0;
    $dst_ptr$0 = $$8;
    break L1;
    break;
   }
   case 1:  {
    break;
   }
   default: {
    $dst_ptr$0 = 0;
    break L1;
   }
   }
   $34 = HEAP32[$11>>2]|0;
   $35 = ($34|0)==(1);
   if (!($35)) {
    $36 = HEAP32[$14>>2]|0;
    $37 = ($36|0)==(0);
    $38 = HEAP32[$12>>2]|0;
    $39 = ($38|0)==(1);
    $or$cond5 = $37 & $39;
    $40 = HEAP32[$13>>2]|0;
    $41 = ($40|0)==(1);
    $or$cond7 = $or$cond5 & $41;
    if (!($or$cond7)) {
     $dst_ptr$0 = 0;
     break;
    }
   }
   $42 = HEAP32[$9>>2]|0;
   $dst_ptr$0 = $42;
  }
 } while(0);
 STACKTOP = sp;return ($dst_ptr$0|0);
}
function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 20|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiiiii[$7 & 127]($4,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this,$info,$dst_ptr,$current_ptr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 53|0);
 HEAP8[$0>>0] = 1;
 $1 = ((($info)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==($current_ptr|0);
 do {
  if ($3) {
   $4 = ((($info)) + 52|0);
   HEAP8[$4>>0] = 1;
   $5 = ((($info)) + 16|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0|0);
   if ($7) {
    HEAP32[$5>>2] = $dst_ptr;
    $8 = ((($info)) + 24|0);
    HEAP32[$8>>2] = $path_below;
    $9 = ((($info)) + 36|0);
    HEAP32[$9>>2] = 1;
    $10 = ((($info)) + 48|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ($11|0)==(1);
    $13 = ($path_below|0)==(1);
    $or$cond = $12 & $13;
    if (!($or$cond)) {
     break;
    }
    $14 = ((($info)) + 54|0);
    HEAP8[$14>>0] = 1;
    break;
   }
   $15 = ($6|0)==($dst_ptr|0);
   if (!($15)) {
    $25 = ((($info)) + 36|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = (($26) + 1)|0;
    HEAP32[$25>>2] = $27;
    $28 = ((($info)) + 54|0);
    HEAP8[$28>>0] = 1;
    break;
   }
   $16 = ((($info)) + 24|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    HEAP32[$16>>2] = $path_below;
    $22 = $path_below;
   } else {
    $22 = $17;
   }
   $19 = ((($info)) + 48|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(1);
   $23 = ($22|0)==(1);
   $or$cond1 = $21 & $23;
   if ($or$cond1) {
    $24 = ((($info)) + 54|0);
    HEAP8[$24>>0] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $is_dst_type_derived_from_static_type$0$off02 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if (!($10)) {
    $44 = ((($this)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = HEAP32[$45>>2]|0;
    $47 = ((($46)) + 24|0);
    $48 = HEAP32[$47>>2]|0;
    FUNCTION_TABLE_viiiii[$48 & 31]($45,$info,$current_ptr,$path_below,$use_strcmp);
    break;
   }
   $11 = ((($info)) + 16|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==($current_ptr|0);
   if (!($13)) {
    $14 = ((($info)) + 20|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==($current_ptr|0);
    if (!($16)) {
     $19 = ((($info)) + 32|0);
     HEAP32[$19>>2] = $path_below;
     $20 = ((($info)) + 44|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($21|0)==(4);
     if ($22) {
      break;
     }
     $23 = ((($info)) + 52|0);
     HEAP8[$23>>0] = 0;
     $24 = ((($info)) + 53|0);
     HEAP8[$24>>0] = 0;
     $25 = ((($this)) + 8|0);
     $26 = HEAP32[$25>>2]|0;
     $27 = HEAP32[$26>>2]|0;
     $28 = ((($27)) + 20|0);
     $29 = HEAP32[$28>>2]|0;
     FUNCTION_TABLE_viiiiii[$29 & 127]($26,$info,$current_ptr,$current_ptr,1,$use_strcmp);
     $30 = HEAP8[$24>>0]|0;
     $31 = ($30<<24>>24)==(0);
     if ($31) {
      $is_dst_type_derived_from_static_type$0$off02 = 0;
      label = 13;
     } else {
      $32 = HEAP8[$23>>0]|0;
      $not$ = ($32<<24>>24)==(0);
      if ($not$) {
       $is_dst_type_derived_from_static_type$0$off02 = 1;
       label = 13;
      } else {
       label = 17;
      }
     }
     do {
      if ((label|0) == 13) {
       HEAP32[$14>>2] = $current_ptr;
       $33 = ((($info)) + 40|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = (($34) + 1)|0;
       HEAP32[$33>>2] = $35;
       $36 = ((($info)) + 36|0);
       $37 = HEAP32[$36>>2]|0;
       $38 = ($37|0)==(1);
       if ($38) {
        $39 = ((($info)) + 24|0);
        $40 = HEAP32[$39>>2]|0;
        $41 = ($40|0)==(2);
        if ($41) {
         $42 = ((($info)) + 54|0);
         HEAP8[$42>>0] = 1;
         if ($is_dst_type_derived_from_static_type$0$off02) {
          label = 17;
          break;
         } else {
          $43 = 4;
          break;
         }
        }
       }
       if ($is_dst_type_derived_from_static_type$0$off02) {
        label = 17;
       } else {
        $43 = 4;
       }
      }
     } while(0);
     if ((label|0) == 17) {
      $43 = 3;
     }
     HEAP32[$20>>2] = $43;
     break;
    }
   }
   $17 = ($path_below|0)==(1);
   if ($17) {
    $18 = ((($info)) + 32|0);
    HEAP32[$18>>2] = 1;
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 } else {
  $3 = ((($this)) + 8|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($5)) + 28|0);
  $7 = HEAP32[$6>>2]|0;
  FUNCTION_TABLE_viiii[$7 & 63]($4,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 16|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 do {
  if ($2) {
   HEAP32[$0>>2] = $adjustedPtr;
   $3 = ((($info)) + 24|0);
   HEAP32[$3>>2] = $path_below;
   $4 = ((($info)) + 36|0);
   HEAP32[$4>>2] = 1;
  } else {
   $5 = ($1|0)==($adjustedPtr|0);
   if (!($5)) {
    $9 = ((($info)) + 36|0);
    $10 = HEAP32[$9>>2]|0;
    $11 = (($10) + 1)|0;
    HEAP32[$9>>2] = $11;
    $12 = ((($info)) + 24|0);
    HEAP32[$12>>2] = 2;
    $13 = ((($info)) + 54|0);
    HEAP8[$13>>0] = 1;
    break;
   }
   $6 = ((($info)) + 24|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(2);
   if ($8) {
    HEAP32[$6>>2] = $path_below;
   }
  }
 } while(0);
 return;
}
function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $dst_ptr = $dst_ptr|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0,$info,$dst_ptr,$current_ptr,$path_below);
 }
 return;
}
function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp) {
 $this = $this|0;
 $info = $info|0;
 $current_ptr = $current_ptr|0;
 $path_below = $path_below|0;
 $use_strcmp = $use_strcmp|0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 do {
  if ($2) {
   $3 = ((($info)) + 4|0);
   $4 = HEAP32[$3>>2]|0;
   $5 = ($4|0)==($current_ptr|0);
   if ($5) {
    $6 = ((($info)) + 28|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = ($7|0)==(1);
    if (!($8)) {
     HEAP32[$6>>2] = $path_below;
    }
   }
  } else {
   $9 = HEAP32[$info>>2]|0;
   $10 = ($this|0)==($9|0);
   if ($10) {
    $11 = ((($info)) + 16|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ($12|0)==($current_ptr|0);
    if (!($13)) {
     $14 = ((($info)) + 20|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==($current_ptr|0);
     if (!($16)) {
      $19 = ((($info)) + 32|0);
      HEAP32[$19>>2] = $path_below;
      HEAP32[$14>>2] = $current_ptr;
      $20 = ((($info)) + 40|0);
      $21 = HEAP32[$20>>2]|0;
      $22 = (($21) + 1)|0;
      HEAP32[$20>>2] = $22;
      $23 = ((($info)) + 36|0);
      $24 = HEAP32[$23>>2]|0;
      $25 = ($24|0)==(1);
      if ($25) {
       $26 = ((($info)) + 24|0);
       $27 = HEAP32[$26>>2]|0;
       $28 = ($27|0)==(2);
       if ($28) {
        $29 = ((($info)) + 54|0);
        HEAP8[$29>>0] = 1;
       }
      }
      $30 = ((($info)) + 44|0);
      HEAP32[$30>>2] = 4;
      break;
     }
    }
    $17 = ($path_below|0)==(1);
    if ($17) {
     $18 = ((($info)) + 32|0);
     HEAP32[$18>>2] = 1;
    }
   }
  }
 } while(0);
 return;
}
function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below) {
 $this = $this|0;
 $info = $info|0;
 $adjustedPtr = $adjustedPtr|0;
 $path_below = $path_below|0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($info)) + 8|0);
 $1 = HEAP32[$0>>2]|0;
 $2 = ($this|0)==($1|0);
 if ($2) {
  __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0,$info,$adjustedPtr,$path_below);
 }
 return;
}
function __ZSt9terminatev() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 __THREW__ = 0;
 $0 = (invoke_i(81)|0);
 $1 = __THREW__; __THREW__ = 0;
 $2 = $1&1;
 if ($2) {
  $45 = ___cxa_find_matching_catch_3(0|0)|0;
  $46 = tempRet0;
  ___clang_call_terminate($45);
  // unreachable;
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = HEAP32[$0>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($4)) + 48|0);
   $7 = $6;
   $8 = $7;
   $9 = HEAP32[$8>>2]|0;
   $10 = (($7) + 4)|0;
   $11 = $10;
   $12 = HEAP32[$11>>2]|0;
   $13 = $9 & -256;
   $14 = ($13|0)==(1126902528);
   $15 = ($12|0)==(1129074247);
   $16 = $14 & $15;
   if ($16) {
    $17 = ((($4)) + 12|0);
    $18 = HEAP32[$17>>2]|0;
    __THREW__ = 0;
    invoke_v($18|0);
    $19 = __THREW__; __THREW__ = 0;
    $20 = $19&1;
    if (!($20)) {
     __THREW__ = 0;
     invoke_vii(82,(7321|0),($vararg_buffer|0));
     $21 = __THREW__; __THREW__ = 0;
    }
    $22 = ___cxa_find_matching_catch_3(0|0)|0;
    $23 = tempRet0;
    (___cxa_begin_catch(($22|0))|0);
    __THREW__ = 0;
    invoke_vii(82,(7361|0),($vararg_buffer1|0));
    $24 = __THREW__; __THREW__ = 0;
    $25 = ___cxa_find_matching_catch_3(0|0)|0;
    $26 = tempRet0;
    __THREW__ = 0;
    invoke_v(83);
    $27 = __THREW__; __THREW__ = 0;
    $28 = $27&1;
    if ($28) {
     $29 = ___cxa_find_matching_catch_3(0|0)|0;
     $30 = tempRet0;
     ___clang_call_terminate($29);
     // unreachable;
    } else {
     ___clang_call_terminate($25);
     // unreachable;
    }
   }
  }
 }
 $31 = HEAP32[293]|0;HEAP32[293] = (($31+0)|0);
 $32 = $31;
 __THREW__ = 0;
 invoke_v($32|0);
 $33 = __THREW__; __THREW__ = 0;
 $34 = $33&1;
 if (!($34)) {
  __THREW__ = 0;
  invoke_vii(82,(7321|0),($vararg_buffer3|0));
  $35 = __THREW__; __THREW__ = 0;
 }
 $36 = ___cxa_find_matching_catch_3(0|0)|0;
 $37 = tempRet0;
 (___cxa_begin_catch(($36|0))|0);
 __THREW__ = 0;
 invoke_vii(82,(7361|0),($vararg_buffer5|0));
 $38 = __THREW__; __THREW__ = 0;
 $39 = ___cxa_find_matching_catch_3(0|0)|0;
 $40 = tempRet0;
 __THREW__ = 0;
 invoke_v(83);
 $41 = __THREW__; __THREW__ = 0;
 $42 = $41&1;
 if ($42) {
  $43 = ___cxa_find_matching_catch_3(0|0)|0;
  $44 = tempRet0;
  ___clang_call_terminate($43);
  // unreachable;
 } else {
  ___clang_call_terminate($39);
  // unreachable;
 }
}
function __ZNSt9bad_allocD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9exceptionD2Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function __ZNSt9bad_allocD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($this);
 return;
}
function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (7424|0);
}
function __ZNSt11logic_errorD2Ev($this) {
 $this = $this|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[$this>>2] = (1288);
 $0 = ((($this)) + 4|0);
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($0);
 return;
}
function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[$this>>2]|0;
 $1 = ((($0)) + -4|0);
 $2 = HEAP32[$1>>2]|0;HEAP32[$1>>2] = (($2+-1)|0);
 $3 = (($2) + -1)|0;
 $4 = ($3|0)<(0);
 if ($4) {
  $5 = HEAP32[$this>>2]|0;
  $6 = ((($5)) + -12|0);
  __ZdlPv($6);
 }
 return;
}
function __ZNSt11logic_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNKSt11logic_error4whatEv($this) {
 $this = $this|0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ((($this)) + 4|0);
 $1 = HEAP32[$0>>2]|0;
 return ($1|0);
}
function __ZNSt12length_errorD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __ZNSt12out_of_rangeD0Ev($this) {
 $this = $this|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}
function __Znwj($size) {
 $size = $size|0;
 var $$lcssa = 0, $$size = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($size|0)==(0);
 $$size = $0 ? 1 : $size;
 while(1) {
  $1 = (_malloc($$size)|0);
  $2 = ($1|0)==(0|0);
  if (!($2)) {
   $$lcssa = $1;
   label = 6;
   break;
  }
  $3 = (__ZSt15get_new_handlerv()|0);
  $4 = ($3|0)==(0|0);
  if ($4) {
   label = 5;
   break;
  }
  FUNCTION_TABLE_v[$3 & 127]();
 }
 if ((label|0) == 5) {
  $5 = (___cxa_allocate_exception(4)|0);
  HEAP32[$5>>2] = (1268);
  ___cxa_throw(($5|0),(72|0),(21|0));
  // unreachable;
 }
 else if ((label|0) == 6) {
  return ($$lcssa|0);
 }
 return (0)|0;
}
function __ZSt15get_new_handlerv() {
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[2034]|0;HEAP32[2034] = (($0+0)|0);
 $1 = $0;
 return ($1|0);
}
function __Znaj($size) {
 $size = $size|0;
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (__Znwj($size)|0);
 return ($0|0);
}
function __ZdaPv($ptr) {
 $ptr = $ptr|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 __ZdlPv($ptr);
 return;
}
function ___cxa_can_catch($catchType,$excpType,$thrown) {
 $catchType = $catchType|0;
 $excpType = $excpType|0;
 $thrown = $thrown|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $temp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abort();
 $temp = sp;
 $0 = HEAP32[$thrown>>2]|0;
 HEAP32[$temp>>2] = $0;
 $1 = HEAP32[$catchType>>2]|0;
 $2 = ((($1)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_iiii[$3 & 127]($catchType,$excpType,$temp)|0);
 $5 = $4&1;
 if ($4) {
  $6 = HEAP32[$temp>>2]|0;
  HEAP32[$thrown>>2] = $6;
 }
 STACKTOP = sp;return ($5|0);
}
function ___cxa_is_pointer_type($type) {
 $type = $type|0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($type|0)==(0|0);
 if ($0) {
  $3 = 0;
 } else {
  $1 = (___dynamic_cast($type,48,152,0)|0);
  $phitmp = ($1|0)!=(0|0);
  $3 = $phitmp;
 }
 $2 = $3&1;
 return ($2|0);
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
  }

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0 | 0, tempRet0 ^ $7$1 | 0, $7$0 | 0, $7$1 | 0) | 0;
  return $10$0 | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0 | 0, $1$1 ^ $a$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0 | 0, $2$1 ^ $b$1 | 0, $2$0 | 0, $2$1 | 0) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0 | 0, HEAP32[$rem + 4 >> 2] ^ $1$1 | 0, $1$0 | 0, $1$1 | 0) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return $1$0 | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 16 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================



  
function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_viiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  FUNCTION_TABLE_viiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0);
}


function dynCall_i(index) {
  index = index|0;
  
  return FUNCTION_TABLE_i[index&127]()|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&127](a1|0);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_v(index) {
  index = index|0;
  
  FUNCTION_TABLE_v[index&127]();
}


function dynCall_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0;
  FUNCTION_TABLE_viiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0);
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiiiii(index,a1,a2,a3,a4,a5) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0;
  return FUNCTION_TABLE_iiiiii[index&127](a1|0,a2|0,a3|0,a4|0,a5|0)|0;
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(0);return 0;
}
function b1(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_viiiii(1);
}
function b2() {
 ; nullFunc_i(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}
function _emscripten_run_script__wrapper(p0) {
 p0 = p0|0; _emscripten_run_script(p0|0);
}
function b4(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(4);
}
function _emscripten_worker_respond_provisionally__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_worker_respond_provisionally(p0|0,p1|0);
}
function b5(p0) {
 p0 = p0|0; nullFunc_ii(5);return 0;
}
function b6(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(6);
}
function b7() {
 ; nullFunc_v(7);
}
function ___cxa_end_catch__wrapper() {
 ; ___cxa_end_catch();
}
function b8(p0,p1,p2,p3,p4,p5) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0; nullFunc_viiiiii(8);
}
function b9(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(9);return 0;
}
function b10(p0,p1,p2,p3,p4) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0; nullFunc_iiiiii(10);return 0;
}
function b11(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZL16stbi__stdio_readPvPci,b0,b0,b0,___stdout_write,___stdio_seek,___stdio_write,b0,b0,b0,b0,b0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,__ZL13GetBundleNameRNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPci,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,__ZNSt3__111char_traitsIcE7compareEPKcS3_j,b0,b0,b0,b0,b0,b0,b0
,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc,b0,b0,b0,b0,b0,b0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_read,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1];
var FUNCTION_TABLE_i = [b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,___cxa_get_globals_fast,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,b3,b3,b3,b3,__ZN10__cxxabiv120__si_class_type_infoD0Ev,b3,b3,b3,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,b3,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,b3,__ZNSt12length_errorD0Ev,__ZNSt12out_of_rangeD0Ev
,__ZNSt3__110unique_ptrI11asyncArgs_tNS_14default_deleteIS1_EEED2Ev,__ZNSt3__110unique_ptrI6file_tNS_14default_deleteIS1_EEED2Ev,b3,b3,b3,__ZL18InitSystem_OnErrorPv,b3,b3,__ZL8FailOpenRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,__ZNK6file_t4SendEv,_emscripten_run_script__wrapper,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_cleanup_267,_cleanup,b3,b3,b3,b3,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_vii = [b4,b4,__ZL16stbi__stdio_skipPvi,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,__ZL14ReadFile_ProxyPci,b4,b4,b4,b4,b4,b4,b4,__ZL15SendFile_OnLoadPci,__ZNKSt3__16vectorIhNS_9allocatorIhEEE17__annotate_shrinkEj,__ZL23TraverseDirectory_ProxyPci,__ZL22TraverseDirectory_ReadPci,b4,__ZL15ReadImage_ProxyPci,__ZL8FullPathPKc,b4,__ZN6file_tC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,b4,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj,__ZN6file_t4OpenERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE,b4,b4,b4,__ZNSt3__16vectorIcNS_9allocatorIcEEE8allocateEj
,b4,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_,b4,b4,b4,__ZNSt3__16vectorIhNS_9allocatorIhEEE26__swap_out_circular_bufferERNS_14__split_bufferIhRS2_EE,_emscripten_worker_respond_provisionally__wrapper,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,__ZNSt11logic_errorC2EPKc,__ZNSt3__118__libcpp_refstringC2EPKc,b4,b4,b4,_abort_message,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,b5,__ZL15stbi__stdio_eofPv,___stdio_close,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__ZNKSt9bad_alloc4whatEv,b5,b5,__ZNKSt11logic_error4whatEv,b5,b5
,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,__Znwj,b5,__ZNK6file_tcvbEv,__ZNSt3__111char_traitsIcE6lengthEPKc,b5,b5,b5,b5,b5,__ZN6file_t9ReadImageEv,b5,b5,b5
,b5,b5,b5,_fclose,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZL17InitSystem_OnLoadPvS_i,b6,b6,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj,b6,__ZN10charBuff_tC2EPKci,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,__ZL10ReplaceExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,__ZNSt3__114__split_bufferIhRNS_9allocatorIhEEE18__construct_at_endEjRKh,b6,b6,b6,__ZL16stbi__idct_blockPhiPs,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_v = [b7,b7,b7,b7,b7,b7,b7,b7,__ZL25default_terminate_handlerv,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b7,b7,b7,___cxa_end_catch__wrapper,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,__ZL22stbi__YCbCr_to_RGB_rowPhPKhS1_S1_ii,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_printf,b9,b9,b9,b9,b9,b9,__ZL6GetExtRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERS5_,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc,b9,b9];
var FUNCTION_TABLE_iiiiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,__ZL23stbi__resample_row_hv_2PhS_S_ii,__ZL14resample_row_1PhS_S_ii,__ZL22stbi__resample_row_v_2PhS_S_ii,__ZL22stbi__resample_row_h_2PhS_S_ii,__ZL26stbi__resample_row_genericPhS_S_ii,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10];
var FUNCTION_TABLE_viiii = [b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,__ZN11asyncArgs_tC2EPFvPciES0_i,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11,b11
,b11,b11,b11,b11,b11];

  return { _stbi_image_free: _stbi_image_free, ___cxa_can_catch: ___cxa_can_catch, _TraverseDirectory: _TraverseDirectory, _stbi_load_from_memory: _stbi_load_from_memory, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Add: _i64Add, _ReadImage: _ReadImage, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _free: _free, _stbi_load: _stbi_load, _memcpy: _memcpy, _ReadFile_Chunk: _ReadFile_Chunk, _bitshift64Lshr: _bitshift64Lshr, _ReadFile_Begin: _ReadFile_Begin, _fflush: _fflush, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_file_traverse_cxx: __GLOBAL__sub_I_file_traverse_cxx, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_v: dynCall_v, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__stbi_image_free = asm["_stbi_image_free"]; asm["_stbi_image_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stbi_image_free.apply(null, arguments);
};

var real___GLOBAL__sub_I_file_traverse_cxx = asm["__GLOBAL__sub_I_file_traverse_cxx"]; asm["__GLOBAL__sub_I_file_traverse_cxx"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real___GLOBAL__sub_I_file_traverse_cxx.apply(null, arguments);
};

var real____cxa_can_catch = asm["___cxa_can_catch"]; asm["___cxa_can_catch"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_can_catch.apply(null, arguments);
};

var real__TraverseDirectory = asm["_TraverseDirectory"]; asm["_TraverseDirectory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__TraverseDirectory.apply(null, arguments);
};

var real__stbi_load_from_memory = asm["_stbi_load_from_memory"]; asm["_stbi_load_from_memory"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stbi_load_from_memory.apply(null, arguments);
};

var real____cxa_is_pointer_type = asm["___cxa_is_pointer_type"]; asm["___cxa_is_pointer_type"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____cxa_is_pointer_type.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__ReadImage = asm["_ReadImage"]; asm["_ReadImage"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ReadImage.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real__ReadFile_Begin = asm["_ReadFile_Begin"]; asm["_ReadFile_Begin"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ReadFile_Begin.apply(null, arguments);
};

var real__stbi_load = asm["_stbi_load"]; asm["_stbi_load"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__stbi_load.apply(null, arguments);
};

var real__ReadFile_Chunk = asm["_ReadFile_Chunk"]; asm["_ReadFile_Chunk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ReadFile_Chunk.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _stbi_image_free = Module["_stbi_image_free"] = asm["_stbi_image_free"];
var __GLOBAL__sub_I_file_traverse_cxx = Module["__GLOBAL__sub_I_file_traverse_cxx"] = asm["__GLOBAL__sub_I_file_traverse_cxx"];
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _TraverseDirectory = Module["_TraverseDirectory"] = asm["_TraverseDirectory"];
var _stbi_load_from_memory = Module["_stbi_load_from_memory"] = asm["_stbi_load_from_memory"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _ReadImage = Module["_ReadImage"] = asm["_ReadImage"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _ReadFile_Begin = Module["_ReadFile_Begin"] = asm["_ReadFile_Begin"];
var _stbi_load = Module["_stbi_load"] = asm["_stbi_load"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _ReadFile_Chunk = Module["_ReadFile_Chunk"] = asm["_ReadFile_Chunk"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===




function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}


var workerResponded = false, workerCallbackId = -1;

(function() {
  var messageBuffer = null, buffer = 0, bufferSize = 0;

  function flushMessages() {
    if (!messageBuffer) return;
    if (runtimeInitialized) {
      var temp = messageBuffer;
      messageBuffer = null;
      temp.forEach(function(message) {
        onmessage(message);
      });
    }
  }

  function messageResender() {
    flushMessages();
    if (messageBuffer) {
      setTimeout(messageResender, 100); // still more to do
    }
  }

  onmessage = function onmessage(msg) {
    // if main has not yet been called (mem init file, other async things), buffer messages
    if (!runtimeInitialized) {
      if (!messageBuffer) {
        messageBuffer = [];
        setTimeout(messageResender, 100);
      }
      messageBuffer.push(msg);
      return;
    }
    flushMessages();

    var func = Module['_' + msg.data['funcName']];
    if (!func) throw 'invalid worker function to call: ' + msg.data['funcName'];
    var data = msg.data['data'];
    if (data) {
      if (!data.byteLength) data = new Uint8Array(data);
      if (!buffer || bufferSize < data.length) {
        if (buffer) _free(buffer);
        bufferSize = data.length;
        buffer = _malloc(data.length);
      }
      HEAPU8.set(data, buffer);
    }

    workerResponded = false;
    workerCallbackId = msg.data['callbackId'];
    if (data) {
      func(buffer, data.length);
    } else {
      func(0, 0);
    }
  }
})();





// {{MODULE_ADDITIONS}}



